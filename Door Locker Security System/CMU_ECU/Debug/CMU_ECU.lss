
CMU_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cd4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001cd4  00001d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000029dc  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001929  00000000  00000000  00004754  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000607d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000061bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000632d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a7cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 cb 0c 	call	0x1996	; 0x1996 <main>
      7a:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e8       	ldi	r26, 0x88	; 136
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	88 e8       	ldi	r24, 0x88	; 136
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <uart_Init>:
 *      Author: Lenovo
 */
#include"uart.h"
#define UBRR_value (((F_CPU/(16*BAUD_RATE)))-1) //16 in case normal mode and 8 in case double speed
void uart_Init()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	//we use normal mode not double speed mode
	UCSRB|=(1<<TXEN)|(1<<RXEN);//enable for TX and RX
     b3e:	aa e2       	ldi	r26, 0x2A	; 42
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ea e2       	ldi	r30, 0x2A	; 42
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	88 61       	ori	r24, 0x18	; 24
     b4a:	8c 93       	st	X, r24
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//uart select=1 cauze we use UCSRC and use 8-bit mode
     b4c:	a0 e4       	ldi	r26, 0x40	; 64
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e0 e4       	ldi	r30, 0x40	; 64
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	86 68       	ori	r24, 0x86	; 134
     b58:	8c 93       	st	X, r24
	UBRRH=UBRR_value>>8;
     b5a:	e0 e4       	ldi	r30, 0x40	; 64
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	10 82       	st	Z, r1
	UBRRL=UBRR_value;
     b60:	e9 e2       	ldi	r30, 0x29	; 41
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	8b e2       	ldi	r24, 0x2B	; 43
     b66:	80 83       	st	Z, r24
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <uart_sendByte>:
void uart_sendByte(uint8 data)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	0f 92       	push	r0
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));//polling until UDRE=1 which means UDR ready to send data
     b7a:	eb e2       	ldi	r30, 0x2B	; 43
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	80 72       	andi	r24, 0x20	; 32
     b86:	90 70       	andi	r25, 0x00	; 0
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	b9 f3       	breq	.-18     	; 0xb7a <uart_sendByte+0xc>
	UDR=data;
     b8c:	ec e2       	ldi	r30, 0x2C	; 44
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	80 83       	st	Z, r24
}
     b94:	0f 90       	pop	r0
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <uart_recieveByte>:
uint8 uart_recieveByte()
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
     ba4:	eb e2       	ldi	r30, 0x2B	; 43
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	88 23       	and	r24, r24
     bac:	dc f7       	brge	.-10     	; 0xba4 <uart_recieveByte+0x8>
	return UDR;
     bae:	ec e2       	ldi	r30, 0x2C	; 44
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
}
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <uart_sendString>:
void uart_sendString(uint8* str)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <uart_sendString+0x6>
     bc0:	0f 92       	push	r0
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	9b 83       	std	Y+3, r25	; 0x03
     bc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     bca:	19 82       	std	Y+1, r1	; 0x01
     bcc:	0e c0       	rjmp	.+28     	; 0xbea <uart_sendString+0x30>
	while(str[i]!='\0')
	{
		uart_sendByte(str[i]);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	9b 81       	ldd	r25, Y+3	; 0x03
     bd8:	fc 01       	movw	r30, r24
     bda:	e2 0f       	add	r30, r18
     bdc:	f3 1f       	adc	r31, r19
     bde:	80 81       	ld	r24, Z
     be0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <uart_sendByte>
		i++;
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}
void uart_sendString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	9b 81       	ldd	r25, Y+3	; 0x03
     bf4:	fc 01       	movw	r30, r24
     bf6:	e2 0f       	add	r30, r18
     bf8:	f3 1f       	adc	r31, r19
     bfa:	80 81       	ld	r24, Z
     bfc:	88 23       	and	r24, r24
     bfe:	39 f7       	brne	.-50     	; 0xbce <uart_sendString+0x14>
	{
		uart_sendByte(str[i]);
		i++;
	}
}
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <uart_recieveString>:
void uart_recieveString(uint8* str)
{
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	00 d0       	rcall	.+0      	; 0xc16 <uart_recieveString+0xa>
     c16:	0f 92       	push	r0
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9b 83       	std	Y+3, r25	; 0x03
     c1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     c20:	19 82       	std	Y+1, r1	; 0x01
	str[i]=uart_recieveByte();
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	9b 81       	ldd	r25, Y+3	; 0x03
     c2c:	8c 01       	movw	r16, r24
     c2e:	02 0f       	add	r16, r18
     c30:	13 1f       	adc	r17, r19
     c32:	0e 94 ce 05 	call	0xb9c	; 0xb9c <uart_recieveByte>
     c36:	f8 01       	movw	r30, r16
     c38:	80 83       	st	Z, r24
     c3a:	0f c0       	rjmp	.+30     	; 0xc5a <uart_recieveString+0x4e>
	while(str[i]!='#')
	{
		i++;
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	89 83       	std	Y+1, r24	; 0x01
		str[i]=uart_recieveByte();
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	9b 81       	ldd	r25, Y+3	; 0x03
     c4c:	8c 01       	movw	r16, r24
     c4e:	02 0f       	add	r16, r18
     c50:	13 1f       	adc	r17, r19
     c52:	0e 94 ce 05 	call	0xb9c	; 0xb9c <uart_recieveByte>
     c56:	f8 01       	movw	r30, r16
     c58:	80 83       	st	Z, r24
}
void uart_recieveString(uint8* str)
{
	uint8 i=0;
	str[i]=uart_recieveByte();
	while(str[i]!='#')
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	fc 01       	movw	r30, r24
     c66:	e2 0f       	add	r30, r18
     c68:	f3 1f       	adc	r31, r19
     c6a:	80 81       	ld	r24, Z
     c6c:	83 32       	cpi	r24, 0x23	; 35
     c6e:	31 f7       	brne	.-52     	; 0xc3c <uart_recieveString+0x30>
	{
		i++;
		str[i]=uart_recieveByte();
	}
	str[i]='\0';
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	9b 81       	ldd	r25, Y+3	; 0x03
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	10 82       	st	Z, r1

}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <Timer0_normalMode_Init>:
 *      Author: Lenovo
 */

#include"Timer.h"
void Timer0_normalMode_Init()
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,7);//FOC0 setting in non PWM mode
     c9a:	a3 e5       	ldi	r26, 0x53	; 83
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e3 e5       	ldi	r30, 0x53	; 83
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 68       	ori	r24, 0x80	; 128
     ca6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);//1024 prescaler,, timer overflow every 256ms for 1 second need 4overflow
     ca8:	a3 e5       	ldi	r26, 0x53	; 83
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e3 e5       	ldi	r30, 0x53	; 83
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	84 60       	ori	r24, 0x04	; 4
     cb4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
     cb6:	a3 e5       	ldi	r26, 0x53	; 83
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e3 e5       	ldi	r30, 0x53	; 83
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24

	TCNT0=0; //start count from 0 to max value for this timer register which 255
     cc4:	e2 e5       	ldi	r30, 0x52	; 82
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
	SET_BIT(TIMSK,0);//set MIE for normal mode timer0
     cca:	a9 e5       	ldi	r26, 0x59	; 89
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e9 e5       	ldi	r30, 0x59	; 89
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	81 60       	ori	r24, 0x01	; 1
     cd6:	8c 93       	st	X, r24
	SET_BIT(SREG,7);
     cd8:	af e5       	ldi	r26, 0x5F	; 95
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	ef e5       	ldi	r30, 0x5F	; 95
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	80 68       	ori	r24, 0x80	; 128
     ce4:	8c 93       	st	X, r24
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <Timer1_normalMode_Init>:
void Timer1_normalMode_Init()
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,3); //FOC1A in case non PWM mode
     cf4:	af e4       	ldi	r26, 0x4F	; 79
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ef e4       	ldi	r30, 0x4F	; 79
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	88 60       	ori	r24, 0x08	; 8
     d00:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,2);//FOC1B
     d02:	af e4       	ldi	r26, 0x4F	; 79
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ef e4       	ldi	r30, 0x4F	; 79
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	84 60       	ori	r24, 0x04	; 4
     d0e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,2); //make 1024 prescaler
     d10:	ae e4       	ldi	r26, 0x4E	; 78
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ee e4       	ldi	r30, 0x4E	; 78
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,0);
     d1e:	ae e4       	ldi	r26, 0x4E	; 78
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ee e4       	ldi	r30, 0x4E	; 78
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	8c 93       	st	X, r24
	TCNT1=0;
     d2c:	ec e4       	ldi	r30, 0x4C	; 76
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	11 82       	std	Z+1, r1	; 0x01
     d32:	10 82       	st	Z, r1
	SET_BIT(TIMSK,2);//enable MIE for Timer1
     d34:	a9 e5       	ldi	r26, 0x59	; 89
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e9 e5       	ldi	r30, 0x59	; 89
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	84 60       	ori	r24, 0x04	; 4
     d40:	8c 93       	st	X, r24
	SET_BIT(SREG,7);//enable GIE
     d42:	af e5       	ldi	r26, 0x5F	; 95
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ef e5       	ldi	r30, 0x5F	; 95
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	8c 93       	st	X, r24

}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <Timer0_CTCMode_Init>:
void Timer0_CTCMode_Init()
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,7);//FOC0 set in this mode(its set in non PWM mode)
     d5e:	a3 e5       	ldi	r26, 0x53	; 83
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e3 e5       	ldi	r30, 0x53	; 83
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);//set WGM01 CTC mode
     d6c:	a3 e5       	ldi	r26, 0x53	; 83
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e3 e5       	ldi	r30, 0x53	; 83
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
     d7a:	a3 e5       	ldi	r26, 0x53	; 83
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e3 e5       	ldi	r30, 0x53	; 83
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	84 60       	ori	r24, 0x04	; 4
     d86:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0); //1024 prescaler
     d88:	a3 e5       	ldi	r26, 0x53	; 83
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e3 e5       	ldi	r30, 0x53	; 83
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	81 60       	ori	r24, 0x01	; 1
     d94:	8c 93       	st	X, r24
	TCNT0=0;
     d96:	e2 e5       	ldi	r30, 0x52	; 82
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	10 82       	st	Z, r1
	OCR0=250;
     d9c:	ec e5       	ldi	r30, 0x5C	; 92
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	8a ef       	ldi	r24, 0xFA	; 250
     da2:	80 83       	st	Z, r24
	SET_BIT(TIMSK,1);//enable MIE
     da4:	a9 e5       	ldi	r26, 0x59	; 89
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e9 e5       	ldi	r30, 0x59	; 89
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	8c 93       	st	X, r24
	SET_BIT(SREG,7);
     db2:	af e5       	ldi	r26, 0x5F	; 95
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ef e5       	ldi	r30, 0x5F	; 95
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 68       	ori	r24, 0x80	; 128
     dbe:	8c 93       	st	X, r24
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <Timer1_CTCMode_Init>:
void Timer1_CTCMode_Init()
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,3);//FOC1A
     dce:	af e4       	ldi	r26, 0x4F	; 79
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	ef e4       	ldi	r30, 0x4F	; 79
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 60       	ori	r24, 0x08	; 8
     dda:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,2);//FOC1B
     ddc:	af e4       	ldi	r26, 0x4F	; 79
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ef e4       	ldi	r30, 0x4F	; 79
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	84 60       	ori	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,3);//set WGM 12 (CTC mode)
     dea:	ae e4       	ldi	r26, 0x4E	; 78
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ee e4       	ldi	r30, 0x4E	; 78
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 60       	ori	r24, 0x08	; 8
     df6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,2); //1024 prescaler
     df8:	ae e4       	ldi	r26, 0x4E	; 78
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ee e4       	ldi	r30, 0x4E	; 78
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,0);
     e06:	ae e4       	ldi	r26, 0x4E	; 78
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ee e4       	ldi	r30, 0x4E	; 78
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	8c 93       	st	X, r24

	TCNT1=0;
     e14:	ec e4       	ldi	r30, 0x4C	; 76
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	11 82       	std	Z+1, r1	; 0x01
     e1a:	10 82       	st	Z, r1
	OCR1A=60000; //compare match occurs at 60000
     e1c:	ea e4       	ldi	r30, 0x4A	; 74
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 e6       	ldi	r24, 0x60	; 96
     e22:	9a ee       	ldi	r25, 0xEA	; 234
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
	SET_BIT(TIMSK,4);
     e28:	a9 e5       	ldi	r26, 0x59	; 89
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e9 e5       	ldi	r30, 0x59	; 89
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 61       	ori	r24, 0x10	; 16
     e34:	8c 93       	st	X, r24

}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <Timer0_PWM_Init>:
void Timer0_PWM_Init(uint8 duty_cycle)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0,6);
     e48:	a3 e5       	ldi	r26, 0x53	; 83
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e3 e5       	ldi	r30, 0x53	; 83
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3); //make timer works in PWM mode
     e56:	a3 e5       	ldi	r26, 0x53	; 83
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e3 e5       	ldi	r30, 0x53	; 83
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);//set COM01 to works in OC0
     e64:	a3 e5       	ldi	r26, 0x53	; 83
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e3 e5       	ldi	r30, 0x53	; 83
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 62       	ori	r24, 0x20	; 32
     e70:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);//8 prescaler
     e72:	a3 e5       	ldi	r26, 0x53	; 83
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e3 e5       	ldi	r30, 0x53	; 83
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	8c 93       	st	X, r24
	TCNT0=0;
     e80:	e2 e5       	ldi	r30, 0x52	; 82
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	10 82       	st	Z, r1
	OCR0=duty_cycle;
     e86:	ec e5       	ldi	r30, 0x5C	; 92
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	80 83       	st	Z, r24

}
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <INT0_Init>:
 *      Author: Lenovo
 */
#include"Interrupt.h"

void INT0_Init()
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MCUCR,0);
     e9e:	a5 e5       	ldi	r26, 0x55	; 85
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8e 7f       	andi	r24, 0xFE	; 254
     eaa:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1); //make interrupt 0 request interrupt at falling edge
     eac:	a5 e5       	ldi	r26, 0x55	; 85
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e5 e5       	ldi	r30, 0x55	; 85
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	8c 93       	st	X, r24
	SET_BIT(GICR,6);  //enable MIE (INT0)
     eba:	ab e5       	ldi	r26, 0x5B	; 91
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	eb e5       	ldi	r30, 0x5B	; 91
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	8c 93       	st	X, r24
	SET_BIT(SREG,7); //enable GIE
     ec8:	af e5       	ldi	r26, 0x5F	; 95
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ef e5       	ldi	r30, 0x5F	; 95
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	8c 93       	st	X, r24
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <INT1_Init>:

void INT1_Init()
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,3);
     ee4:	a5 e5       	ldi	r26, 0x55	; 85
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e5       	ldi	r30, 0x55	; 85
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,2); //make interrupt 1 request interrupt at falling edge
     ef2:	a5 e5       	ldi	r26, 0x55	; 85
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e5       	ldi	r30, 0x55	; 85
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8b 7f       	andi	r24, 0xFB	; 251
     efe:	8c 93       	st	X, r24
	SET_BIT(GICR,7);  //enable MIE (INT1)
     f00:	ab e5       	ldi	r26, 0x5B	; 91
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	eb e5       	ldi	r30, 0x5B	; 91
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	8c 93       	st	X, r24
	SET_BIT(SREG,7); //enable GIE
     f0e:	af e5       	ldi	r26, 0x5F	; 95
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ef e5       	ldi	r30, 0x5F	; 95
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	8c 93       	st	X, r24
}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <INT2_Init>:
void INT2_Init()
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCSR,6);
     f2a:	a4 e5       	ldi	r26, 0x54	; 84
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e4 e5       	ldi	r30, 0x54	; 84
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	8c 93       	st	X, r24
	SET_BIT(GICR,5);  //enable MIE (INT2)
     f38:	ab e5       	ldi	r26, 0x5B	; 91
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e5       	ldi	r30, 0x5B	; 91
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	8c 93       	st	X, r24
	SET_BIT(SREG,7); //enable GIE
     f46:	af e5       	ldi	r26, 0x5F	; 95
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ef e5       	ldi	r30, 0x5F	; 95
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	8c 93       	st	X, r24
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <TWI_Init>:
 *  Created on: May 26, 2023
 *      Author: Lenovo
 */
#include"I2C.h"
void TWI_Init()
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	TWBR=0x02;
     f62:	e0 e2       	ldi	r30, 0x20	; 32
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	80 83       	st	Z, r24
	TWSR=0x00;
     f6a:	e1 e2       	ldi	r30, 0x21	; 33
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	10 82       	st	Z, r1
	TWAR=0b000000100;
     f70:	e2 e2       	ldi	r30, 0x22	; 34
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	84 e0       	ldi	r24, 0x04	; 4
     f76:	80 83       	st	Z, r24
	TWCR|=(1<<TWEN);
     f78:	a6 e5       	ldi	r26, 0x56	; 86
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e6 e5       	ldi	r30, 0x56	; 86
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	84 60       	ori	r24, 0x04	; 4
     f84:	8c 93       	st	X, r24
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <TWI_start>:
void TWI_start()
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     f94:	e6 e5       	ldi	r30, 0x56	; 86
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	84 ea       	ldi	r24, 0xA4	; 164
     f9a:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
     f9c:	e6 e5       	ldi	r30, 0x56	; 86
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 23       	and	r24, r24
     fa4:	dc f7       	brge	.-10     	; 0xf9c <TWI_start+0x10>
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TWI_stop>:
void TWI_stop()
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     fb4:	e6 e5       	ldi	r30, 0x56	; 86
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	84 e9       	ldi	r24, 0x94	; 148
     fba:	80 83       	st	Z, r24
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <TWI_write>:
void TWI_write(uint8 data)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	   TWDR=data;
     fce:	e3 e2       	ldi	r30, 0x23	; 35
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	80 83       	st	Z, r24
	    /*
		 * Clear the TWINT flag before sending the data TWINT=1
		 * Enable TWI Module TWEN=1
		 */
	    TWCR=(1<<TWINT)|(1<<TWEN);
     fd6:	e6 e5       	ldi	r30, 0x56	; 86
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	84 e8       	ldi	r24, 0x84	; 132
     fdc:	80 83       	st	Z, r24
	    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	    while(BIT_IS_CLEAR(TWCR,TWINT));
     fde:	e6 e5       	ldi	r30, 0x56	; 86
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 23       	and	r24, r24
     fe6:	dc f7       	brge	.-10     	; 0xfde <TWI_write+0x1c>
}
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TWI_readWithACK>:
uint8 TWI_readWithACK()
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     ff8:	e6 e5       	ldi	r30, 0x56	; 86
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	84 ec       	ldi	r24, 0xC4	; 196
     ffe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1000:	e6 e5       	ldi	r30, 0x56	; 86
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	dc f7       	brge	.-10     	; 0x1000 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    100a:	e3 e2       	ldi	r30, 0x23	; 35
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
}
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <TWI_readWithNACK>:
uint8 TWI_readWithNACK()
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR=(1<<TWINT)|(1<<TWEN);
    101e:	e6 e5       	ldi	r30, 0x56	; 86
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	84 e8       	ldi	r24, 0x84	; 132
    1024:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1026:	e6 e5       	ldi	r30, 0x56	; 86
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 23       	and	r24, r24
    102e:	dc f7       	brge	.-10     	; 0x1026 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1030:	e3 e2       	ldi	r30, 0x23	; 35
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <TWI_getStatus>:
uint8 TWI_getStatus()
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status=TWSR&0xF8;
    1046:	e1 e2       	ldi	r30, 0x21	; 33
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 7f       	andi	r24, 0xF8	; 248
    104e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <EEPROM_init>:
 *      Author: Lenovo
 */
#include"EEPROM.h"
#include"../I2C_Driver/I2C.h"
void EEPROM_init(void)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_Init();
    1062:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TWI_Init>
}
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <EEPROM_writeByte+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <EEPROM_writeByte+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    107e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_start>
    if (TWI_getStatus() != TW_START)
    1082:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    1086:	88 30       	cpi	r24, 0x08	; 8
    1088:	11 f0       	breq	.+4      	; 0x108e <EEPROM_writeByte+0x22>
        return ERROR;
    108a:	1c 82       	std	Y+4, r1	; 0x04
    108c:	28 c0       	rjmp	.+80     	; 0x10de <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	80 70       	andi	r24, 0x00	; 0
    1094:	97 70       	andi	r25, 0x07	; 7
    1096:	88 0f       	add	r24, r24
    1098:	89 2f       	mov	r24, r25
    109a:	88 1f       	adc	r24, r24
    109c:	99 0b       	sbc	r25, r25
    109e:	91 95       	neg	r25
    10a0:	80 6a       	ori	r24, 0xA0	; 160
    10a2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    10a6:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    10aa:	88 31       	cpi	r24, 0x18	; 24
    10ac:	11 f0       	breq	.+4      	; 0x10b2 <EEPROM_writeByte+0x46>
        return ERROR;
    10ae:	1c 82       	std	Y+4, r1	; 0x04
    10b0:	16 c0       	rjmp	.+44     	; 0x10de <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    10b8:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    10bc:	88 32       	cpi	r24, 0x28	; 40
    10be:	11 f0       	breq	.+4      	; 0x10c4 <EEPROM_writeByte+0x58>
        return ERROR;
    10c0:	1c 82       	std	Y+4, r1	; 0x04
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    10ca:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    10ce:	88 32       	cpi	r24, 0x28	; 40
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <EEPROM_writeByte+0x6a>
        return ERROR;
    10d2:	1c 82       	std	Y+4, r1	; 0x04
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    10d6:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_stop>

    return SUCCESS;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	8c 83       	std	Y+4, r24	; 0x04
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <EEPROM_readByte+0x6>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <EEPROM_readByte+0x8>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	7c 83       	std	Y+4, r23	; 0x04
    1102:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1104:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_start>
    if (TWI_getStatus() != TW_START)
    1108:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    110c:	88 30       	cpi	r24, 0x08	; 8
    110e:	11 f0       	breq	.+4      	; 0x1114 <EEPROM_readByte+0x26>
        return ERROR;
    1110:	1d 82       	std	Y+5, r1	; 0x05
    1112:	44 c0       	rjmp	.+136    	; 0x119c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	80 70       	andi	r24, 0x00	; 0
    111a:	97 70       	andi	r25, 0x07	; 7
    111c:	88 0f       	add	r24, r24
    111e:	89 2f       	mov	r24, r25
    1120:	88 1f       	adc	r24, r24
    1122:	99 0b       	sbc	r25, r25
    1124:	91 95       	neg	r25
    1126:	80 6a       	ori	r24, 0xA0	; 160
    1128:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    112c:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    1130:	88 31       	cpi	r24, 0x18	; 24
    1132:	11 f0       	breq	.+4      	; 0x1138 <EEPROM_readByte+0x4a>
        return ERROR;
    1134:	1d 82       	std	Y+5, r1	; 0x05
    1136:	32 c0       	rjmp	.+100    	; 0x119c <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    113e:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    1142:	88 32       	cpi	r24, 0x28	; 40
    1144:	11 f0       	breq	.+4      	; 0x114a <EEPROM_readByte+0x5c>
        return ERROR;
    1146:	1d 82       	std	Y+5, r1	; 0x05
    1148:	29 c0       	rjmp	.+82     	; 0x119c <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    114a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    114e:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    1152:	80 31       	cpi	r24, 0x10	; 16
    1154:	11 f0       	breq	.+4      	; 0x115a <EEPROM_readByte+0x6c>
        return ERROR;
    1156:	1d 82       	std	Y+5, r1	; 0x05
    1158:	21 c0       	rjmp	.+66     	; 0x119c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	80 70       	andi	r24, 0x00	; 0
    1160:	97 70       	andi	r25, 0x07	; 7
    1162:	88 0f       	add	r24, r24
    1164:	89 2f       	mov	r24, r25
    1166:	88 1f       	adc	r24, r24
    1168:	99 0b       	sbc	r25, r25
    116a:	91 95       	neg	r25
    116c:	81 6a       	ori	r24, 0xA1	; 161
    116e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1172:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    1176:	80 34       	cpi	r24, 0x40	; 64
    1178:	11 f0       	breq	.+4      	; 0x117e <EEPROM_readByte+0x90>
        return ERROR;
    117a:	1d 82       	std	Y+5, r1	; 0x05
    117c:	0f c0       	rjmp	.+30     	; 0x119c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    117e:	0e 94 0b 08 	call	0x1016	; 0x1016 <TWI_readWithNACK>
    1182:	eb 81       	ldd	r30, Y+3	; 0x03
    1184:	fc 81       	ldd	r31, Y+4	; 0x04
    1186:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1188:	0e 94 1e 08 	call	0x103c	; 0x103c <TWI_getStatus>
    118c:	88 35       	cpi	r24, 0x58	; 88
    118e:	11 f0       	breq	.+4      	; 0x1194 <EEPROM_readByte+0xa6>
        return ERROR;
    1190:	1d 82       	std	Y+5, r1	; 0x05
    1192:	04 c0       	rjmp	.+8      	; 0x119c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1194:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_stop>
    return SUCCESS;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	8d 83       	std	Y+5, r24	; 0x05
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <set_port_direction>:
 *      Author: Lenovo
 */
#include"DIO.h"

void set_port_direction(PORT_TYPE ptype,DIO_DIRECTION dir)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <set_port_direction+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <set_port_direction+0x8>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <set_port_direction+0xa>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	6a 83       	std	Y+2, r22	; 0x02
	if(dir == INPUT)
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	88 23       	and	r24, r24
    11c4:	79 f5       	brne	.+94     	; 0x1224 <set_port_direction+0x76>
	{
		switch(ptype)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3e 83       	std	Y+6, r19	; 0x06
    11ce:	2d 83       	std	Y+5, r18	; 0x05
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	c9 f0       	breq	.+50     	; 0x120c <set_port_direction+0x5e>
    11da:	2d 81       	ldd	r18, Y+5	; 0x05
    11dc:	3e 81       	ldd	r19, Y+6	; 0x06
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <set_port_direction+0x40>
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <set_port_direction+0x56>
    11ec:	50 c0       	rjmp	.+160    	; 0x128e <set_port_direction+0xe0>
    11ee:	2d 81       	ldd	r18, Y+5	; 0x05
    11f0:	3e 81       	ldd	r19, Y+6	; 0x06
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	71 f0       	breq	.+28     	; 0x1214 <set_port_direction+0x66>
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	69 f0       	breq	.+26     	; 0x121c <set_port_direction+0x6e>
    1202:	45 c0       	rjmp	.+138    	; 0x128e <set_port_direction+0xe0>
		{
		case PORTA_reg:
			DDRA=0x00;
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	10 82       	st	Z, r1
    120a:	41 c0       	rjmp	.+130    	; 0x128e <set_port_direction+0xe0>
			break;
		case PORTB_reg:
			DDRB=0x00;
    120c:	e7 e3       	ldi	r30, 0x37	; 55
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	10 82       	st	Z, r1
    1212:	3d c0       	rjmp	.+122    	; 0x128e <set_port_direction+0xe0>
			break;
		case PORTC_reg:
			DDRC=0x00;
    1214:	e4 e3       	ldi	r30, 0x34	; 52
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	10 82       	st	Z, r1
    121a:	39 c0       	rjmp	.+114    	; 0x128e <set_port_direction+0xe0>
			break;
		case PORTD_reg:
			DDRD=0x00;
    121c:	e1 e3       	ldi	r30, 0x31	; 49
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	10 82       	st	Z, r1
    1222:	35 c0       	rjmp	.+106    	; 0x128e <set_port_direction+0xe0>
			break;
		}

	}
	else if(dir == OUTPUT)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 f5       	brne	.+100    	; 0x128e <set_port_direction+0xe0>
	{
		switch(ptype)
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	2b 83       	std	Y+3, r18	; 0x03
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	d1 f0       	breq	.+52     	; 0x1272 <set_port_direction+0xc4>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <set_port_direction+0xa4>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	61 f0       	breq	.+24     	; 0x1268 <set_port_direction+0xba>
    1250:	1e c0       	rjmp	.+60     	; 0x128e <set_port_direction+0xe0>
    1252:	2b 81       	ldd	r18, Y+3	; 0x03
    1254:	3c 81       	ldd	r19, Y+4	; 0x04
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <set_port_direction+0xce>
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <set_port_direction+0xd8>
    1266:	13 c0       	rjmp	.+38     	; 0x128e <set_port_direction+0xe0>
		{
		case PORTA_reg:
			DDRA=0xFF;
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	80 83       	st	Z, r24
    1270:	0e c0       	rjmp	.+28     	; 0x128e <set_port_direction+0xe0>
			break;
		case PORTB_reg:
			DDRB=0xFF;
    1272:	e7 e3       	ldi	r30, 0x37	; 55
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 83       	st	Z, r24
    127a:	09 c0       	rjmp	.+18     	; 0x128e <set_port_direction+0xe0>
			break;
		case PORTC_reg:
			DDRC=0xFF;
    127c:	e4 e3       	ldi	r30, 0x34	; 52
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	80 83       	st	Z, r24
    1284:	04 c0       	rjmp	.+8      	; 0x128e <set_port_direction+0xe0>
			break;
		case PORTD_reg:
			DDRD=0xFF;
    1286:	e1 e3       	ldi	r30, 0x31	; 49
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	80 83       	st	Z, r24
			break;
		}
	}
}
    128e:	26 96       	adiw	r28, 0x06	; 6
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <set_pin_direction>:
void set_pin_direction(PORT_TYPE ptype,PIN_NUM p_num,DIO_DIRECTION dir)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	27 97       	sbiw	r28, 0x07	; 7
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	6a 83       	std	Y+2, r22	; 0x02
    12b8:	4b 83       	std	Y+3, r20	; 0x03
	if(dir == INPUT)
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 23       	and	r24, r24
    12be:	09 f0       	breq	.+2      	; 0x12c2 <set_pin_direction+0x22>
    12c0:	74 c0       	rjmp	.+232    	; 0x13aa <set_pin_direction+0x10a>
	{
		switch(ptype)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3f 83       	std	Y+7, r19	; 0x07
    12ca:	2e 83       	std	Y+6, r18	; 0x06
    12cc:	8e 81       	ldd	r24, Y+6	; 0x06
    12ce:	9f 81       	ldd	r25, Y+7	; 0x07
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	59 f1       	breq	.+86     	; 0x132c <set_pin_direction+0x8c>
    12d6:	2e 81       	ldd	r18, Y+6	; 0x06
    12d8:	3f 81       	ldd	r19, Y+7	; 0x07
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	2c f4       	brge	.+10     	; 0x12ea <set_pin_direction+0x4a>
    12e0:	8e 81       	ldd	r24, Y+6	; 0x06
    12e2:	9f 81       	ldd	r25, Y+7	; 0x07
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	69 f0       	breq	.+26     	; 0x1302 <set_pin_direction+0x62>
    12e8:	d2 c0       	rjmp	.+420    	; 0x148e <set_pin_direction+0x1ee>
    12ea:	2e 81       	ldd	r18, Y+6	; 0x06
    12ec:	3f 81       	ldd	r19, Y+7	; 0x07
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	89 f1       	breq	.+98     	; 0x1356 <set_pin_direction+0xb6>
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	9f 81       	ldd	r25, Y+7	; 0x07
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <set_pin_direction+0x60>
    12fe:	40 c0       	rjmp	.+128    	; 0x1380 <set_pin_direction+0xe0>
    1300:	c6 c0       	rjmp	.+396    	; 0x148e <set_pin_direction+0x1ee>
		{
		case PORTA_reg:
			CLEAR_BIT(DDRA,p_num);
    1302:	aa e3       	ldi	r26, 0x3A	; 58
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ea e3       	ldi	r30, 0x3A	; 58
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <set_pin_direction+0x80>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <set_pin_direction+0x7c>
    1324:	80 95       	com	r24
    1326:	84 23       	and	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	b1 c0       	rjmp	.+354    	; 0x148e <set_pin_direction+0x1ee>
			break;
		case PORTB_reg:
			CLEAR_BIT(DDRB,p_num);
    132c:	a7 e3       	ldi	r26, 0x37	; 55
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e7 e3       	ldi	r30, 0x37	; 55
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <set_pin_direction+0xaa>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <set_pin_direction+0xa6>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	9c c0       	rjmp	.+312    	; 0x148e <set_pin_direction+0x1ee>
			break;
		case PORTC_reg:
			CLEAR_BIT(DDRC,p_num);
    1356:	a4 e3       	ldi	r26, 0x34	; 52
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e4 e3       	ldi	r30, 0x34	; 52
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <set_pin_direction+0xd4>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <set_pin_direction+0xd0>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	87 c0       	rjmp	.+270    	; 0x148e <set_pin_direction+0x1ee>
			break;
		case PORTD_reg:
			CLEAR_BIT(DDRD,p_num);
    1380:	a1 e3       	ldi	r26, 0x31	; 49
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <set_pin_direction+0xfe>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <set_pin_direction+0xfa>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	72 c0       	rjmp	.+228    	; 0x148e <set_pin_direction+0x1ee>
			break;
		}
	}
	else if(dir == OUTPUT)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <set_pin_direction+0x112>
    13b0:	6e c0       	rjmp	.+220    	; 0x148e <set_pin_direction+0x1ee>
	{
		switch(ptype)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3d 83       	std	Y+5, r19	; 0x05
    13ba:	2c 83       	std	Y+4, r18	; 0x04
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	49 f1       	breq	.+82     	; 0x1418 <set_pin_direction+0x178>
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <set_pin_direction+0x13a>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	61 f0       	breq	.+24     	; 0x13f0 <set_pin_direction+0x150>
    13d8:	5a c0       	rjmp	.+180    	; 0x148e <set_pin_direction+0x1ee>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	71 f1       	breq	.+92     	; 0x1440 <set_pin_direction+0x1a0>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	e9 f1       	breq	.+122    	; 0x1468 <set_pin_direction+0x1c8>
    13ee:	4f c0       	rjmp	.+158    	; 0x148e <set_pin_direction+0x1ee>
		{
		case PORTA_reg:
			SET_BIT(DDRA,p_num);
    13f0:	aa e3       	ldi	r26, 0x3A	; 58
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ea e3       	ldi	r30, 0x3A	; 58
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <set_pin_direction+0x16e>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <set_pin_direction+0x16a>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	3b c0       	rjmp	.+118    	; 0x148e <set_pin_direction+0x1ee>
			break;
		case PORTB_reg:
			SET_BIT(DDRB,p_num);
    1418:	a7 e3       	ldi	r26, 0x37	; 55
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <set_pin_direction+0x196>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <set_pin_direction+0x192>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	27 c0       	rjmp	.+78     	; 0x148e <set_pin_direction+0x1ee>
			break;
		case PORTC_reg:
			SET_BIT(DDRC,p_num);
    1440:	a4 e3       	ldi	r26, 0x34	; 52
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e4 e3       	ldi	r30, 0x34	; 52
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <set_pin_direction+0x1be>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <set_pin_direction+0x1ba>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	13 c0       	rjmp	.+38     	; 0x148e <set_pin_direction+0x1ee>
			break;
		case PORTD_reg:
			SET_BIT(DDRD,p_num);
    1468:	a1 e3       	ldi	r26, 0x31	; 49
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e1 e3       	ldi	r30, 0x31	; 49
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <set_pin_direction+0x1e6>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <set_pin_direction+0x1e2>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
			break;
		}

	}

}
    148e:	27 96       	adiw	r28, 0x07	; 7
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <set_port_value>:
void set_port_value(PORT_TYPE ptype,uint8 value)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <set_port_value+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <set_port_value+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(ptype)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	d1 f0       	breq	.+52     	; 0x14f8 <set_port_value+0x58>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <set_port_value+0x38>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	61 f0       	breq	.+24     	; 0x14ee <set_port_value+0x4e>
    14d6:	1e c0       	rjmp	.+60     	; 0x1514 <set_port_value+0x74>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	81 f0       	breq	.+32     	; 0x1502 <set_port_value+0x62>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <set_port_value+0x6c>
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <set_port_value+0x74>
	{
	case PORTA_reg:
		PORTA=value;
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	80 83       	st	Z, r24
    14f6:	0e c0       	rjmp	.+28     	; 0x1514 <set_port_value+0x74>
		break;
	case PORTB_reg:
		PORTB=value;
    14f8:	e8 e3       	ldi	r30, 0x38	; 56
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <set_port_value+0x74>
		break;
	case PORTC_reg:
		PORTC=value;
    1502:	e5 e3       	ldi	r30, 0x35	; 53
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <set_port_value+0x74>
		break;
	case PORTD_reg:
		PORTD=value;
    150c:	e2 e3       	ldi	r30, 0x32	; 50
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
		break;
	}
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <set_pin_value>:
void set_pin_value(PORT_TYPE ptype,PIN_NUM p_num,DIO_VAL val)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	27 97       	sbiw	r28, 0x07	; 7
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	6a 83       	std	Y+2, r22	; 0x02
    153a:	4b 83       	std	Y+3, r20	; 0x03
	if(val == HIGH)
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	09 f0       	breq	.+2      	; 0x1544 <set_pin_value+0x22>
    1542:	6f c0       	rjmp	.+222    	; 0x1622 <set_pin_value+0x100>
	{
		switch(ptype)
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3f 83       	std	Y+7, r19	; 0x07
    154c:	2e 83       	std	Y+6, r18	; 0x06
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	9f 81       	ldd	r25, Y+7	; 0x07
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	91 05       	cpc	r25, r1
    1556:	49 f1       	breq	.+82     	; 0x15aa <set_pin_value+0x88>
    1558:	2e 81       	ldd	r18, Y+6	; 0x06
    155a:	3f 81       	ldd	r19, Y+7	; 0x07
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	2c f4       	brge	.+10     	; 0x156c <set_pin_value+0x4a>
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	9f 81       	ldd	r25, Y+7	; 0x07
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	61 f0       	breq	.+24     	; 0x1582 <set_pin_value+0x60>
    156a:	d2 c0       	rjmp	.+420    	; 0x1710 <set_pin_value+0x1ee>
    156c:	2e 81       	ldd	r18, Y+6	; 0x06
    156e:	3f 81       	ldd	r19, Y+7	; 0x07
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	71 f1       	breq	.+92     	; 0x15d2 <set_pin_value+0xb0>
    1576:	8e 81       	ldd	r24, Y+6	; 0x06
    1578:	9f 81       	ldd	r25, Y+7	; 0x07
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	91 05       	cpc	r25, r1
    157e:	e9 f1       	breq	.+122    	; 0x15fa <set_pin_value+0xd8>
    1580:	c7 c0       	rjmp	.+398    	; 0x1710 <set_pin_value+0x1ee>
		{
		case PORTA_reg:
			SET_BIT(PORTA,p_num);
    1582:	ab e3       	ldi	r26, 0x3B	; 59
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e3       	ldi	r30, 0x3B	; 59
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <set_pin_value+0x7e>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <set_pin_value+0x7a>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	b3 c0       	rjmp	.+358    	; 0x1710 <set_pin_value+0x1ee>
			break;
		case PORTB_reg:
			SET_BIT(PORTB,p_num);
    15aa:	a8 e3       	ldi	r26, 0x38	; 56
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e8 e3       	ldi	r30, 0x38	; 56
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <set_pin_value+0xa6>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <set_pin_value+0xa2>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	9f c0       	rjmp	.+318    	; 0x1710 <set_pin_value+0x1ee>
			break;
		case PORTC_reg:
			SET_BIT(PORTC,p_num);
    15d2:	a5 e3       	ldi	r26, 0x35	; 53
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e3       	ldi	r30, 0x35	; 53
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <set_pin_value+0xce>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <set_pin_value+0xca>
    15f4:	84 2b       	or	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	8b c0       	rjmp	.+278    	; 0x1710 <set_pin_value+0x1ee>
			break;
		case PORTD_reg:
			SET_BIT(PORTD,p_num);
    15fa:	a2 e3       	ldi	r26, 0x32	; 50
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e2 e3       	ldi	r30, 0x32	; 50
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <set_pin_value+0xf6>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <set_pin_value+0xf2>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	77 c0       	rjmp	.+238    	; 0x1710 <set_pin_value+0x1ee>
			break;
		}

	}
	else if(val == LOW)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	88 23       	and	r24, r24
    1626:	09 f0       	breq	.+2      	; 0x162a <set_pin_value+0x108>
    1628:	73 c0       	rjmp	.+230    	; 0x1710 <set_pin_value+0x1ee>
	{
		switch(ptype)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	3d 83       	std	Y+5, r19	; 0x05
    1632:	2c 83       	std	Y+4, r18	; 0x04
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	91 05       	cpc	r25, r1
    163c:	59 f1       	breq	.+86     	; 0x1694 <set_pin_value+0x172>
    163e:	2c 81       	ldd	r18, Y+4	; 0x04
    1640:	3d 81       	ldd	r19, Y+5	; 0x05
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	2c f4       	brge	.+10     	; 0x1652 <set_pin_value+0x130>
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f0       	breq	.+26     	; 0x166a <set_pin_value+0x148>
    1650:	5f c0       	rjmp	.+190    	; 0x1710 <set_pin_value+0x1ee>
    1652:	2c 81       	ldd	r18, Y+4	; 0x04
    1654:	3d 81       	ldd	r19, Y+5	; 0x05
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	89 f1       	breq	.+98     	; 0x16be <set_pin_value+0x19c>
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	91 05       	cpc	r25, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <set_pin_value+0x146>
    1666:	40 c0       	rjmp	.+128    	; 0x16e8 <set_pin_value+0x1c6>
    1668:	53 c0       	rjmp	.+166    	; 0x1710 <set_pin_value+0x1ee>
		{
		case PORTA_reg:
			CLEAR_BIT(PORTA,p_num);
    166a:	ab e3       	ldi	r26, 0x3B	; 59
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <set_pin_value+0x166>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <set_pin_value+0x162>
    168c:	80 95       	com	r24
    168e:	84 23       	and	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	3e c0       	rjmp	.+124    	; 0x1710 <set_pin_value+0x1ee>
			break;
		case PORTB_reg:
			CLEAR_BIT(PORTB,p_num);
    1694:	a8 e3       	ldi	r26, 0x38	; 56
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <set_pin_value+0x190>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <set_pin_value+0x18c>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	29 c0       	rjmp	.+82     	; 0x1710 <set_pin_value+0x1ee>
			break;
		case PORTC_reg:
			CLEAR_BIT(PORTC,p_num);
    16be:	a5 e3       	ldi	r26, 0x35	; 53
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <set_pin_value+0x1ba>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <set_pin_value+0x1b6>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <set_pin_value+0x1ee>
			break;
		case PORTD_reg:
			CLEAR_BIT(PORTD,p_num);
    16e8:	a2 e3       	ldi	r26, 0x32	; 50
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e2 e3       	ldi	r30, 0x32	; 50
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <set_pin_value+0x1e4>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <set_pin_value+0x1e0>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
			break;
		}
	}

}
    1710:	27 96       	adiw	r28, 0x07	; 7
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <get_pin_value>:
DIO_VAL get_pin_value(PORT_TYPE ptype,PIN_NUM p_num)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <get_pin_value+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <get_pin_value+0x8>
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VAL x;
	switch(ptype)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3d 83       	std	Y+5, r19	; 0x05
    173c:	2c 83       	std	Y+4, r18	; 0x04
    173e:	4c 81       	ldd	r20, Y+4	; 0x04
    1740:	5d 81       	ldd	r21, Y+5	; 0x05
    1742:	41 30       	cpi	r20, 0x01	; 1
    1744:	51 05       	cpc	r21, r1
    1746:	41 f1       	breq	.+80     	; 0x1798 <get_pin_value+0x76>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	91 05       	cpc	r25, r1
    1750:	34 f4       	brge	.+12     	; 0x175e <get_pin_value+0x3c>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	21 15       	cp	r18, r1
    1758:	31 05       	cpc	r19, r1
    175a:	61 f0       	breq	.+24     	; 0x1774 <get_pin_value+0x52>
    175c:	52 c0       	rjmp	.+164    	; 0x1802 <get_pin_value+0xe0>
    175e:	4c 81       	ldd	r20, Y+4	; 0x04
    1760:	5d 81       	ldd	r21, Y+5	; 0x05
    1762:	42 30       	cpi	r20, 0x02	; 2
    1764:	51 05       	cpc	r21, r1
    1766:	51 f1       	breq	.+84     	; 0x17bc <get_pin_value+0x9a>
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	9d 81       	ldd	r25, Y+5	; 0x05
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	91 05       	cpc	r25, r1
    1770:	b9 f1       	breq	.+110    	; 0x17e0 <get_pin_value+0xbe>
    1772:	47 c0       	rjmp	.+142    	; 0x1802 <get_pin_value+0xe0>
	{
	case PORTA_reg:
			x=GET_BIT(PINA,p_num);
    1774:	e9 e3       	ldi	r30, 0x39	; 57
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a9 01       	movw	r20, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <get_pin_value+0x6a>
    1788:	55 95       	asr	r21
    178a:	47 95       	ror	r20
    178c:	8a 95       	dec	r24
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <get_pin_value+0x66>
    1790:	ca 01       	movw	r24, r20
    1792:	81 70       	andi	r24, 0x01	; 1
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	35 c0       	rjmp	.+106    	; 0x1802 <get_pin_value+0xe0>
			break;
	case PORTB_reg:
			x=GET_BIT(PINB,p_num);
    1798:	e6 e3       	ldi	r30, 0x36	; 54
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <get_pin_value+0x8e>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <get_pin_value+0x8a>
    17b4:	ca 01       	movw	r24, r20
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	23 c0       	rjmp	.+70     	; 0x1802 <get_pin_value+0xe0>
			break;
	case PORTC_reg:
			x=GET_BIT(PINC,p_num);
    17bc:	e3 e3       	ldi	r30, 0x33	; 51
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <get_pin_value+0xb2>
    17d0:	55 95       	asr	r21
    17d2:	47 95       	ror	r20
    17d4:	8a 95       	dec	r24
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <get_pin_value+0xae>
    17d8:	ca 01       	movw	r24, r20
    17da:	81 70       	andi	r24, 0x01	; 1
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	11 c0       	rjmp	.+34     	; 0x1802 <get_pin_value+0xe0>
			break;
	case PORTD_reg:
			x=GET_BIT(PIND,p_num);
    17e0:	e0 e3       	ldi	r30, 0x30	; 48
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a9 01       	movw	r20, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <get_pin_value+0xd6>
    17f4:	55 95       	asr	r21
    17f6:	47 95       	ror	r20
    17f8:	8a 95       	dec	r24
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <get_pin_value+0xd2>
    17fc:	ca 01       	movw	r24, r20
    17fe:	81 70       	andi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return x;
    1802:	89 81       	ldd	r24, Y+1	; 0x01


}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <buzzer_Init>:
 *  Created on: May 26, 2023
 *      Author: Lenovo
 */
#include"Buzzer.h"
void buzzer_Init()
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	set_pin_direction(PORTD_reg, PIN7, OUTPUT);
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	67 e0       	ldi	r22, 0x07	; 7
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 50 09 	call	0x12a0	; 0x12a0 <set_pin_direction>
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <buzzer_ON>:
void buzzer_ON()
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	set_pin_value(PORTD_reg, PIN7, HIGH);
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	67 e0       	ldi	r22, 0x07	; 7
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <buzzer_OFF>:
void buzzer_OFF()
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
	set_pin_value(PORTD_reg, PIN7, LOW);
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	67 e0       	ldi	r22, 0x07	; 7
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <LED_Init>:
 *      Author: Lenovo
 */
#include"LED.h"

void LED_Init()
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
	set_pin_direction(PORTC_reg, PIN6, OUTPUT);//red led
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	66 e0       	ldi	r22, 0x06	; 6
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <set_pin_direction>
	set_pin_direction(PORTC_reg, PIN7, OUTPUT);//green led
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	67 e0       	ldi	r22, 0x07	; 7
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 50 09 	call	0x12a0	; 0x12a0 <set_pin_direction>
}
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <greenLed_ON>:

void greenLed_ON()
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	set_pin_value(PORTC_reg, PIN7, HIGH);
    1886:	82 e0       	ldi	r24, 0x02	; 2
    1888:	67 e0       	ldi	r22, 0x07	; 7
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <greenLed_OFF>:
void greenLed_OFF()
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	set_pin_value(PORTC_reg, PIN7, LOW);
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	67 e0       	ldi	r22, 0x07	; 7
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <redLed_ON>:
void redLed_ON()
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	set_pin_value(PORTC_reg, PIN6, HIGH);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	66 e0       	ldi	r22, 0x06	; 6
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <redLed_OFF>:
void redLed_OFF()
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	set_pin_value(PORTC_reg, PIN6, LOW);
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	66 e0       	ldi	r22, 0x06	; 6
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <motor_Init>:
 *      Author: Lenovo
 */
#include"MOTOR.h"

void motor_Init()
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
	set_pin_direction(PORTB_reg, PIN0, OUTPUT);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 50 09 	call	0x12a0	; 0x12a0 <set_pin_direction>
	set_pin_direction(PORTB_reg, PIN1, OUTPUT);
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <set_pin_direction>
	set_pin_direction(PORTB_reg, PIN3, OUTPUT);//OC0 pin
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	63 e0       	ldi	r22, 0x03	; 3
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 50 09 	call	0x12a0	; 0x12a0 <set_pin_direction>
	set_pin_value(PORTB_reg, PIN0, LOW);//by default fan turned off
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
	set_pin_value(PORTB_reg, PIN1, LOW);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>

}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <open_door>:
void open_door()
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	Timer0_PWM_Init(128);//move 2.5Volt
    1926:	80 e8       	ldi	r24, 0x80	; 128
    1928:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Timer0_PWM_Init>
	set_pin_value(PORTB_reg, PIN0, HIGH);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
	set_pin_value(PORTB_reg, PIN1, LOW);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <close_door>:
void close_door()
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
	Timer0_PWM_Init(128);//move 2.5Volt
    194e:	80 e8       	ldi	r24, 0x80	; 128
    1950:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Timer0_PWM_Init>
	set_pin_value(PORTB_reg, PIN0, LOW);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
	set_pin_value(PORTB_reg, PIN1, HIGH);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <stop>:
void stop()
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
	Timer0_PWM_Init(0);//move 0Volt
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Timer0_PWM_Init>
	set_pin_value(PORTB_reg, PIN0, LOW);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
	set_pin_value(PORTB_reg, PIN1, LOW);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 91 0a 	call	0x1522	; 0x1522 <set_pin_value>
}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <main>:
#include<string.h>
#include<avr/io.h>
#define SET_PASS '#'
#define OPENED_DOOR '+'
int main()
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	c2 56       	subi	r28, 0x62	; 98
    19a0:	d0 40       	sbci	r29, 0x00	; 0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
	uart_Init();
    19ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <uart_Init>
	TWI_Init();
    19b0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TWI_Init>
	EEPROM_init();
    19b4:	0e 94 2d 08 	call	0x105a	; 0x105a <EEPROM_init>
	LED_Init();
    19b8:	0e 94 2e 0c 	call	0x185c	; 0x185c <LED_Init>
	buzzer_Init();
    19bc:	0e 94 0a 0c 	call	0x1814	; 0x1814 <buzzer_Init>
	motor_Init();
    19c0:	0e 94 6f 0c 	call	0x18de	; 0x18de <motor_Init>
	uint8 default_pass[10];
	uint8 entered_pass[10];
	uint8 new_pass[10];

	uint8 correct_message[20]="correct pass!#";
    19c4:	ce 01       	movw	r24, r28
    19c6:	8f 96       	adiw	r24, 0x2f	; 47
    19c8:	69 96       	adiw	r28, 0x19	; 25
    19ca:	9f af       	std	Y+63, r25	; 0x3f
    19cc:	8e af       	std	Y+62, r24	; 0x3e
    19ce:	69 97       	sbiw	r28, 0x19	; 25
    19d0:	a0 e6       	ldi	r26, 0x60	; 96
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	6b 96       	adiw	r28, 0x1b	; 27
    19d6:	bf af       	std	Y+63, r27	; 0x3f
    19d8:	ae af       	std	Y+62, r26	; 0x3e
    19da:	6b 97       	sbiw	r28, 0x1b	; 27
    19dc:	bf e0       	ldi	r27, 0x0F	; 15
    19de:	6c 96       	adiw	r28, 0x1c	; 28
    19e0:	bf af       	std	Y+63, r27	; 0x3f
    19e2:	6c 97       	sbiw	r28, 0x1c	; 28
    19e4:	6b 96       	adiw	r28, 0x1b	; 27
    19e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    19e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    19ea:	6b 97       	sbiw	r28, 0x1b	; 27
    19ec:	00 80       	ld	r0, Z
    19ee:	6b 96       	adiw	r28, 0x1b	; 27
    19f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    19f4:	6b 97       	sbiw	r28, 0x1b	; 27
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	6b 96       	adiw	r28, 0x1b	; 27
    19fa:	9f af       	std	Y+63, r25	; 0x3f
    19fc:	8e af       	std	Y+62, r24	; 0x3e
    19fe:	6b 97       	sbiw	r28, 0x1b	; 27
    1a00:	69 96       	adiw	r28, 0x19	; 25
    1a02:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a04:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a06:	69 97       	sbiw	r28, 0x19	; 25
    1a08:	0c 92       	st	X, r0
    1a0a:	69 96       	adiw	r28, 0x19	; 25
    1a0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a10:	69 97       	sbiw	r28, 0x19	; 25
    1a12:	31 96       	adiw	r30, 0x01	; 1
    1a14:	69 96       	adiw	r28, 0x19	; 25
    1a16:	ff af       	std	Y+63, r31	; 0x3f
    1a18:	ee af       	std	Y+62, r30	; 0x3e
    1a1a:	69 97       	sbiw	r28, 0x19	; 25
    1a1c:	6c 96       	adiw	r28, 0x1c	; 28
    1a1e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a20:	6c 97       	sbiw	r28, 0x1c	; 28
    1a22:	f1 50       	subi	r31, 0x01	; 1
    1a24:	6c 96       	adiw	r28, 0x1c	; 28
    1a26:	ff af       	std	Y+63, r31	; 0x3f
    1a28:	6c 97       	sbiw	r28, 0x1c	; 28
    1a2a:	6c 96       	adiw	r28, 0x1c	; 28
    1a2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a2e:	6c 97       	sbiw	r28, 0x1c	; 28
    1a30:	88 23       	and	r24, r24
    1a32:	c1 f6       	brne	.-80     	; 0x19e4 <main+0x4e>
    1a34:	85 e0       	ldi	r24, 0x05	; 5
    1a36:	fe 01       	movw	r30, r28
    1a38:	fe 96       	adiw	r30, 0x3e	; 62
    1a3a:	df 01       	movw	r26, r30
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	1d 92       	st	X+, r1
    1a40:	9a 95       	dec	r25
    1a42:	e9 f7       	brne	.-6      	; 0x1a3e <main+0xa8>
	uint8 incorrect_message[20]="Incorrect pass!";
    1a44:	de 01       	movw	r26, r28
    1a46:	ad 5b       	subi	r26, 0xBD	; 189
    1a48:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4a:	6e 96       	adiw	r28, 0x1e	; 30
    1a4c:	bf af       	std	Y+63, r27	; 0x3f
    1a4e:	ae af       	std	Y+62, r26	; 0x3e
    1a50:	6e 97       	sbiw	r28, 0x1e	; 30
    1a52:	6e 96       	adiw	r28, 0x1e	; 30
    1a54:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a56:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a58:	6e 97       	sbiw	r28, 0x1e	; 30
    1a5a:	a0 96       	adiw	r28, 0x20	; 32
    1a5c:	ff af       	std	Y+63, r31	; 0x3f
    1a5e:	ee af       	std	Y+62, r30	; 0x3e
    1a60:	a0 97       	sbiw	r28, 0x20	; 32
    1a62:	84 e7       	ldi	r24, 0x74	; 116
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a2 96       	adiw	r28, 0x22	; 34
    1a68:	9f af       	std	Y+63, r25	; 0x3f
    1a6a:	8e af       	std	Y+62, r24	; 0x3e
    1a6c:	a2 97       	sbiw	r28, 0x22	; 34
    1a6e:	90 e1       	ldi	r25, 0x10	; 16
    1a70:	a3 96       	adiw	r28, 0x23	; 35
    1a72:	9f af       	std	Y+63, r25	; 0x3f
    1a74:	a3 97       	sbiw	r28, 0x23	; 35
    1a76:	a2 96       	adiw	r28, 0x22	; 34
    1a78:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a7a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a7c:	a2 97       	sbiw	r28, 0x22	; 34
    1a7e:	0c 90       	ld	r0, X
    1a80:	a2 96       	adiw	r28, 0x22	; 34
    1a82:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a84:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a86:	a2 97       	sbiw	r28, 0x22	; 34
    1a88:	31 96       	adiw	r30, 0x01	; 1
    1a8a:	a2 96       	adiw	r28, 0x22	; 34
    1a8c:	ff af       	std	Y+63, r31	; 0x3f
    1a8e:	ee af       	std	Y+62, r30	; 0x3e
    1a90:	a2 97       	sbiw	r28, 0x22	; 34
    1a92:	a0 96       	adiw	r28, 0x20	; 32
    1a94:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a96:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a98:	a0 97       	sbiw	r28, 0x20	; 32
    1a9a:	0c 92       	st	X, r0
    1a9c:	a0 96       	adiw	r28, 0x20	; 32
    1a9e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aa0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aa2:	a0 97       	sbiw	r28, 0x20	; 32
    1aa4:	31 96       	adiw	r30, 0x01	; 1
    1aa6:	a0 96       	adiw	r28, 0x20	; 32
    1aa8:	ff af       	std	Y+63, r31	; 0x3f
    1aaa:	ee af       	std	Y+62, r30	; 0x3e
    1aac:	a0 97       	sbiw	r28, 0x20	; 32
    1aae:	a3 96       	adiw	r28, 0x23	; 35
    1ab0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ab2:	a3 97       	sbiw	r28, 0x23	; 35
    1ab4:	f1 50       	subi	r31, 0x01	; 1
    1ab6:	a3 96       	adiw	r28, 0x23	; 35
    1ab8:	ff af       	std	Y+63, r31	; 0x3f
    1aba:	a3 97       	sbiw	r28, 0x23	; 35
    1abc:	a3 96       	adiw	r28, 0x23	; 35
    1abe:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ac0:	a3 97       	sbiw	r28, 0x23	; 35
    1ac2:	88 23       	and	r24, r24
    1ac4:	c1 f6       	brne	.-80     	; 0x1a76 <main+0xe0>
    1ac6:	6e 96       	adiw	r28, 0x1e	; 30
    1ac8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1aca:	bf ad       	ldd	r27, Y+63	; 0x3f
    1acc:	6e 97       	sbiw	r28, 0x1e	; 30
    1ace:	50 96       	adiw	r26, 0x10	; 16
    1ad0:	1d 92       	st	X+, r1
    1ad2:	1d 92       	st	X+, r1
    1ad4:	1d 92       	st	X+, r1
    1ad6:	1c 92       	st	X, r1
    1ad8:	53 97       	sbiw	r26, 0x13	; 19
	while(1)
	{
		uint8 choice;
		choice=uart_recieveByte();
    1ada:	0e 94 ce 05 	call	0xb9c	; 0xb9c <uart_recieveByte>
    1ade:	88 8b       	std	Y+16, r24	; 0x10
		switch(choice)
    1ae0:	88 89       	ldd	r24, Y+16	; 0x10
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	83 32       	cpi	r24, 0x23	; 35
    1ae8:	91 05       	cpc	r25, r1
    1aea:	b9 f7       	brne	.-18     	; 0x1ada <main+0x144>
		{
			case SET_PASS:
				do{
			uart_recieveString(default_pass);//receive default pass
    1aec:	ce 01       	movw	r24, r28
    1aee:	41 96       	adiw	r24, 0x11	; 17
    1af0:	0e 94 06 06 	call	0xc0c	; 0xc0c <uart_recieveString>
			uart_recieveString(entered_pass);//receive entered pass
    1af4:	ce 01       	movw	r24, r28
    1af6:	4b 96       	adiw	r24, 0x1b	; 27
    1af8:	0e 94 06 06 	call	0xc0c	; 0xc0c <uart_recieveString>
			if(strcmp(default_pass,entered_pass)==0)//if they are equal save default pass in EEPROM
    1afc:	ce 01       	movw	r24, r28
    1afe:	41 96       	adiw	r24, 0x11	; 17
    1b00:	9e 01       	movw	r18, r28
    1b02:	25 5e       	subi	r18, 0xE5	; 229
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	b9 01       	movw	r22, r18
    1b08:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <strcmp>
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <main+0x17c>
    1b10:	9b c0       	rjmp	.+310    	; 0x1c48 <main+0x2b2>
			{
				uint8 i;
				for(i=0;i<5;i++)
    1b12:	1f 86       	std	Y+15, r1	; 0x0f
    1b14:	88 c0       	rjmp	.+272    	; 0x1c26 <main+0x290>
				{
					EEPROM_writeByte(0x0311+i, default_pass[i]);
    1b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	8f 5e       	subi	r24, 0xEF	; 239
    1b1e:	9c 4f       	sbci	r25, 0xFC	; 252
    1b20:	ac 01       	movw	r20, r24
    1b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	ce 01       	movw	r24, r28
    1b2a:	41 96       	adiw	r24, 0x11	; 17
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e2 0f       	add	r30, r18
    1b30:	f3 1f       	adc	r31, r19
    1b32:	20 81       	ld	r18, Z
    1b34:	ca 01       	movw	r24, r20
    1b36:	62 2f       	mov	r22, r18
    1b38:	0e 94 36 08 	call	0x106c	; 0x106c <EEPROM_writeByte>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e2       	ldi	r26, 0x20	; 32
    1b42:	b1 e4       	ldi	r27, 0x41	; 65
    1b44:	8b 87       	std	Y+11, r24	; 0x0b
    1b46:	9c 87       	std	Y+12, r25	; 0x0c
    1b48:	ad 87       	std	Y+13, r26	; 0x0d
    1b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a e7       	ldi	r20, 0x7A	; 122
    1b5a:	53 e4       	ldi	r21, 0x43	; 67
    1b5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8f 83       	std	Y+7, r24	; 0x07
    1b66:	98 87       	std	Y+8, r25	; 0x08
    1b68:	a9 87       	std	Y+9, r26	; 0x09
    1b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <main+0x1f8>
		__ticks = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <main+0x276>
	else if (__tmp > 65535)
    1b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b90:	78 85       	ldd	r23, Y+8	; 0x08
    1b92:	89 85       	ldd	r24, Y+9	; 0x09
    1b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <main+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <main+0x258>
    1bd0:	89 e1       	ldi	r24, 0x19	; 25
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9c 83       	std	Y+4, r25	; 0x04
    1bd6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <main+0x246>
    1be0:	9c 83       	std	Y+4, r25	; 0x04
    1be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <main+0x23a>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfa:	78 85       	ldd	r23, Y+8	; 0x08
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	9a 81       	ldd	r25, Y+2	; 0x02
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <main+0x282>
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
			uart_recieveString(default_pass);//receive default pass
			uart_recieveString(entered_pass);//receive entered pass
			if(strcmp(default_pass,entered_pass)==0)//if they are equal save default pass in EEPROM
			{
				uint8 i;
				for(i=0;i<5;i++)
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	8f 5f       	subi	r24, 0xFF	; 255
    1c24:	8f 87       	std	Y+15, r24	; 0x0f
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c28:	85 30       	cpi	r24, 0x05	; 5
    1c2a:	08 f4       	brcc	.+2      	; 0x1c2e <main+0x298>
    1c2c:	74 cf       	rjmp	.-280    	; 0x1b16 <main+0x180>
				{
					EEPROM_writeByte(0x0311+i, default_pass[i]);
					_delay_ms(10);
				}
				default_pass[i]='\0';
    1c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	ce 01       	movw	r24, r28
    1c36:	41 96       	adiw	r24, 0x11	; 17
    1c38:	fc 01       	movw	r30, r24
    1c3a:	e2 0f       	add	r30, r18
    1c3c:	f3 1f       	adc	r31, r19
    1c3e:	10 82       	st	Z, r1
			   uart_sendByte('1');
    1c40:	81 e3       	ldi	r24, 0x31	; 49
    1c42:	0e 94 b7 05 	call	0xb6e	; 0xb6e <uart_sendByte>
    1c46:	49 cf       	rjmp	.-366    	; 0x1ada <main+0x144>
			   break;
			}
			else
				uart_sendByte('0');
    1c48:	80 e3       	ldi	r24, 0x30	; 48
    1c4a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <uart_sendByte>
    1c4e:	4e cf       	rjmp	.-356    	; 0x1aec <main+0x156>

00001c50 <__prologue_saves__>:
    1c50:	2f 92       	push	r2
    1c52:	3f 92       	push	r3
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	8f 92       	push	r8
    1c5e:	9f 92       	push	r9
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	ca 1b       	sub	r28, r26
    1c7a:	db 0b       	sbc	r29, r27
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	09 94       	ijmp

00001c88 <__epilogue_restores__>:
    1c88:	2a 88       	ldd	r2, Y+18	; 0x12
    1c8a:	39 88       	ldd	r3, Y+17	; 0x11
    1c8c:	48 88       	ldd	r4, Y+16	; 0x10
    1c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c9e:	df 80       	ldd	r13, Y+7	; 0x07
    1ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    1caa:	b9 81       	ldd	r27, Y+1	; 0x01
    1cac:	ce 0f       	add	r28, r30
    1cae:	d1 1d       	adc	r29, r1
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	ed 01       	movw	r28, r26
    1cbc:	08 95       	ret

00001cbe <strcmp>:
    1cbe:	fb 01       	movw	r30, r22
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	8d 91       	ld	r24, X+
    1cc4:	01 90       	ld	r0, Z+
    1cc6:	80 19       	sub	r24, r0
    1cc8:	01 10       	cpse	r0, r1
    1cca:	d9 f3       	breq	.-10     	; 0x1cc2 <strcmp+0x4>
    1ccc:	99 0b       	sbc	r25, r25
    1cce:	08 95       	ret

00001cd0 <_exit>:
    1cd0:	f8 94       	cli

00001cd2 <__stop_program>:
    1cd2:	ff cf       	rjmp	.-2      	; 0x1cd2 <__stop_program>
