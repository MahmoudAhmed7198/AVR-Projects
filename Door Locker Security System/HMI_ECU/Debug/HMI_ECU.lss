
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00002d98  00002e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800092  00800092  00002e5e  2**0
                  ALLOC
  3 .stab         00002a3c  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001375  00000000  00000000  0000589c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000099f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ab91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b35f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 14 	call	0x2882	; 0x2882 <main>
      8a:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e8       	ldi	r26, 0x89	; 137
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e8       	ldi	r24, 0x89	; 137
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <uart_Init>:
 *      Author: Lenovo
 */
#include"uart.h"
#define UBRR_value (((F_CPU/(16*BAUD_RATE)))-1) //16 in case normal mode and 8 in case double speed
void uart_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//we use normal mode not double speed mode
	UCSRB|=(1<<TXEN)|(1<<RXEN);//enable for TX and RX
     b4e:	aa e2       	ldi	r26, 0x2A	; 42
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e2       	ldi	r30, 0x2A	; 42
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 61       	ori	r24, 0x18	; 24
     b5a:	8c 93       	st	X, r24
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//uart select=1 cauze we use UCSRC and use 8-bit mode
     b5c:	a0 e4       	ldi	r26, 0x40	; 64
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	86 68       	ori	r24, 0x86	; 134
     b68:	8c 93       	st	X, r24
	UBRRH=UBRR_value>>8; //set UBRR value right adjusted(UBRRL first then UBRRH)
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
	UBRRL=UBRR_value;  //set all value(first 8 bits in UBRRL)
     b70:	e9 e2       	ldi	r30, 0x29	; 41
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	8b e2       	ldi	r24, 0x2B	; 43
     b76:	80 83       	st	Z, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <uart_sendByte>:
void uart_sendByte(uint8 data)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));//polling until UDRE=1 which means UDR ready to send data
     b8a:	eb e2       	ldi	r30, 0x2B	; 43
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	80 72       	andi	r24, 0x20	; 32
     b96:	90 70       	andi	r25, 0x00	; 0
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	b9 f3       	breq	.-18     	; 0xb8a <uart_sendByte+0xc>
	UDR=data;
     b9c:	ec e2       	ldi	r30, 0x2C	; 44
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	80 83       	st	Z, r24
}
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <uart_recieveByte>:
uint8 uart_recieveByte()
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));//wait until receive complete buffer=1 to read received data
     bb4:	eb e2       	ldi	r30, 0x2B	; 43
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 23       	and	r24, r24
     bbc:	dc f7       	brge	.-10     	; 0xbb4 <uart_recieveByte+0x8>
	return UDR;//read received data
     bbe:	ec e2       	ldi	r30, 0x2C	; 44
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
}
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <uart_sendString>:
void uart_sendString(uint8* str)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <uart_sendString+0x6>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9b 83       	std	Y+3, r25	; 0x03
     bd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     bda:	19 82       	std	Y+1, r1	; 0x01
     bdc:	0e c0       	rjmp	.+28     	; 0xbfa <uart_sendString+0x30>
	while(str[i]!='\0')
	{
		uart_sendByte(str[i]);
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	9b 81       	ldd	r25, Y+3	; 0x03
     be8:	fc 01       	movw	r30, r24
     bea:	e2 0f       	add	r30, r18
     bec:	f3 1f       	adc	r31, r19
     bee:	80 81       	ld	r24, Z
     bf0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <uart_sendByte>
		i++;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	89 83       	std	Y+1, r24	; 0x01
	return UDR;//read received data
}
void uart_sendString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	9b 81       	ldd	r25, Y+3	; 0x03
     c04:	fc 01       	movw	r30, r24
     c06:	e2 0f       	add	r30, r18
     c08:	f3 1f       	adc	r31, r19
     c0a:	80 81       	ld	r24, Z
     c0c:	88 23       	and	r24, r24
     c0e:	39 f7       	brne	.-50     	; 0xbde <uart_sendString+0x14>
	{
		uart_sendByte(str[i]);
		i++;
	}
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <uart_recieveString>:
void uart_recieveString(uint8* str)
{
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <uart_recieveString+0xa>
     c26:	0f 92       	push	r0
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	9b 83       	std	Y+3, r25	; 0x03
     c2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     c30:	19 82       	std	Y+1, r1	; 0x01
	str[i]=uart_recieveByte();
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	8c 01       	movw	r16, r24
     c3e:	02 0f       	add	r16, r18
     c40:	13 1f       	adc	r17, r19
     c42:	0e 94 d6 05 	call	0xbac	; 0xbac <uart_recieveByte>
     c46:	f8 01       	movw	r30, r16
     c48:	80 83       	st	Z, r24
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <uart_recieveString+0x4e>
	while(str[i]!='#')
	{
		i++;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	89 83       	std	Y+1, r24	; 0x01
		str[i]=uart_recieveByte();
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	9b 81       	ldd	r25, Y+3	; 0x03
     c5c:	8c 01       	movw	r16, r24
     c5e:	02 0f       	add	r16, r18
     c60:	13 1f       	adc	r17, r19
     c62:	0e 94 d6 05 	call	0xbac	; 0xbac <uart_recieveByte>
     c66:	f8 01       	movw	r30, r16
     c68:	80 83       	st	Z, r24
}
void uart_recieveString(uint8* str)
{
	uint8 i=0;
	str[i]=uart_recieveByte();
	while(str[i]!='#')
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	fc 01       	movw	r30, r24
     c76:	e2 0f       	add	r30, r18
     c78:	f3 1f       	adc	r31, r19
     c7a:	80 81       	ld	r24, Z
     c7c:	83 32       	cpi	r24, 0x23	; 35
     c7e:	31 f7       	brne	.-52     	; 0xc4c <uart_recieveString+0x30>
	{
		i++;
		str[i]=uart_recieveByte();
	}
	str[i]='\0';
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	9b 81       	ldd	r25, Y+3	; 0x03
     c8a:	fc 01       	movw	r30, r24
     c8c:	e2 0f       	add	r30, r18
     c8e:	f3 1f       	adc	r31, r19
     c90:	10 82       	st	Z, r1

}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <INT0_Init>:
 *      Author: Lenovo
 */
#include"Interrupt.h"

void INT0_Init()
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MCUCR,0);
     caa:	a5 e5       	ldi	r26, 0x55	; 85
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e5 e5       	ldi	r30, 0x55	; 85
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8e 7f       	andi	r24, 0xFE	; 254
     cb6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1); //make interrupt 0 request interrupt at falling edge
     cb8:	a5 e5       	ldi	r26, 0x55	; 85
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e5 e5       	ldi	r30, 0x55	; 85
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	8c 93       	st	X, r24
	SET_BIT(GICR,6);  //enable MIE (INT0)
     cc6:	ab e5       	ldi	r26, 0x5B	; 91
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	eb e5       	ldi	r30, 0x5B	; 91
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 64       	ori	r24, 0x40	; 64
     cd2:	8c 93       	st	X, r24
	SET_BIT(SREG,7); //enable GIE
     cd4:	af e5       	ldi	r26, 0x5F	; 95
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ef e5       	ldi	r30, 0x5F	; 95
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 68       	ori	r24, 0x80	; 128
     ce0:	8c 93       	st	X, r24
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <INT1_Init>:

void INT1_Init()
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,3);
     cf0:	a5 e5       	ldi	r26, 0x55	; 85
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e5 e5       	ldi	r30, 0x55	; 85
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,2); //make interrupt 1 request interrupt at falling edge
     cfe:	a5 e5       	ldi	r26, 0x55	; 85
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e5       	ldi	r30, 0x55	; 85
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8b 7f       	andi	r24, 0xFB	; 251
     d0a:	8c 93       	st	X, r24
	SET_BIT(GICR,7);  //enable MIE (INT1)
     d0c:	ab e5       	ldi	r26, 0x5B	; 91
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	eb e5       	ldi	r30, 0x5B	; 91
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	8c 93       	st	X, r24
	SET_BIT(SREG,7); //enable GIE
     d1a:	af e5       	ldi	r26, 0x5F	; 95
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ef e5       	ldi	r30, 0x5F	; 95
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	8c 93       	st	X, r24
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <INT2_Init>:
void INT2_Init()
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCSR,6);
     d36:	a4 e5       	ldi	r26, 0x54	; 84
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e4 e5       	ldi	r30, 0x54	; 84
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	8c 93       	st	X, r24
	SET_BIT(GICR,5);  //enable MIE (INT2)
     d44:	ab e5       	ldi	r26, 0x5B	; 91
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	eb e5       	ldi	r30, 0x5B	; 91
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 62       	ori	r24, 0x20	; 32
     d50:	8c 93       	st	X, r24
	SET_BIT(SREG,7); //enable GIE
     d52:	af e5       	ldi	r26, 0x5F	; 95
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ef e5       	ldi	r30, 0x5F	; 95
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	8c 93       	st	X, r24
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <set_port_direction>:
 *      Author: Lenovo
 */
#include"DIO.h"

void set_port_direction(PORT_TYPE ptype,DIO_DIRECTION dir)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <set_port_direction+0x6>
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <set_port_direction+0x8>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <set_port_direction+0xa>
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	6a 83       	std	Y+2, r22	; 0x02
	if(dir == INPUT)
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	88 23       	and	r24, r24
     d7c:	79 f5       	brne	.+94     	; 0xddc <set_port_direction+0x76>
	{
		switch(ptype)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3e 83       	std	Y+6, r19	; 0x06
     d86:	2d 83       	std	Y+5, r18	; 0x05
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	c9 f0       	breq	.+50     	; 0xdc4 <set_port_direction+0x5e>
     d92:	2d 81       	ldd	r18, Y+5	; 0x05
     d94:	3e 81       	ldd	r19, Y+6	; 0x06
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	2c f4       	brge	.+10     	; 0xda6 <set_port_direction+0x40>
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	61 f0       	breq	.+24     	; 0xdbc <set_port_direction+0x56>
     da4:	50 c0       	rjmp	.+160    	; 0xe46 <set_port_direction+0xe0>
     da6:	2d 81       	ldd	r18, Y+5	; 0x05
     da8:	3e 81       	ldd	r19, Y+6	; 0x06
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	71 f0       	breq	.+28     	; 0xdcc <set_port_direction+0x66>
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	91 05       	cpc	r25, r1
     db8:	69 f0       	breq	.+26     	; 0xdd4 <set_port_direction+0x6e>
     dba:	45 c0       	rjmp	.+138    	; 0xe46 <set_port_direction+0xe0>
		{
		case PORTA_reg:
			DDRA=0x00;
     dbc:	ea e3       	ldi	r30, 0x3A	; 58
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	10 82       	st	Z, r1
     dc2:	41 c0       	rjmp	.+130    	; 0xe46 <set_port_direction+0xe0>
			break;
		case PORTB_reg:
			DDRB=0x00;
     dc4:	e7 e3       	ldi	r30, 0x37	; 55
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	10 82       	st	Z, r1
     dca:	3d c0       	rjmp	.+122    	; 0xe46 <set_port_direction+0xe0>
			break;
		case PORTC_reg:
			DDRC=0x00;
     dcc:	e4 e3       	ldi	r30, 0x34	; 52
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	10 82       	st	Z, r1
     dd2:	39 c0       	rjmp	.+114    	; 0xe46 <set_port_direction+0xe0>
			break;
		case PORTD_reg:
			DDRD=0x00;
     dd4:	e1 e3       	ldi	r30, 0x31	; 49
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	10 82       	st	Z, r1
     dda:	35 c0       	rjmp	.+106    	; 0xe46 <set_port_direction+0xe0>
			break;
		}

	}
	else if(dir == OUTPUT)
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	91 f5       	brne	.+100    	; 0xe46 <set_port_direction+0xe0>
	{
		switch(ptype)
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	3c 83       	std	Y+4, r19	; 0x04
     dea:	2b 83       	std	Y+3, r18	; 0x03
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	91 05       	cpc	r25, r1
     df4:	d1 f0       	breq	.+52     	; 0xe2a <set_port_direction+0xc4>
     df6:	2b 81       	ldd	r18, Y+3	; 0x03
     df8:	3c 81       	ldd	r19, Y+4	; 0x04
     dfa:	22 30       	cpi	r18, 0x02	; 2
     dfc:	31 05       	cpc	r19, r1
     dfe:	2c f4       	brge	.+10     	; 0xe0a <set_port_direction+0xa4>
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	61 f0       	breq	.+24     	; 0xe20 <set_port_direction+0xba>
     e08:	1e c0       	rjmp	.+60     	; 0xe46 <set_port_direction+0xe0>
     e0a:	2b 81       	ldd	r18, Y+3	; 0x03
     e0c:	3c 81       	ldd	r19, Y+4	; 0x04
     e0e:	22 30       	cpi	r18, 0x02	; 2
     e10:	31 05       	cpc	r19, r1
     e12:	81 f0       	breq	.+32     	; 0xe34 <set_port_direction+0xce>
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	91 05       	cpc	r25, r1
     e1c:	81 f0       	breq	.+32     	; 0xe3e <set_port_direction+0xd8>
     e1e:	13 c0       	rjmp	.+38     	; 0xe46 <set_port_direction+0xe0>
		{
		case PORTA_reg:
			DDRA=0xFF;
     e20:	ea e3       	ldi	r30, 0x3A	; 58
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	80 83       	st	Z, r24
     e28:	0e c0       	rjmp	.+28     	; 0xe46 <set_port_direction+0xe0>
			break;
		case PORTB_reg:
			DDRB=0xFF;
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	80 83       	st	Z, r24
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <set_port_direction+0xe0>
			break;
		case PORTC_reg:
			DDRC=0xFF;
     e34:	e4 e3       	ldi	r30, 0x34	; 52
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	80 83       	st	Z, r24
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <set_port_direction+0xe0>
			break;
		case PORTD_reg:
			DDRD=0xFF;
     e3e:	e1 e3       	ldi	r30, 0x31	; 49
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 83       	st	Z, r24
			break;
		}
	}
}
     e46:	26 96       	adiw	r28, 0x06	; 6
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <set_pin_direction>:
void set_pin_direction(PORT_TYPE ptype,PIN_NUM p_num,DIO_DIRECTION dir)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	27 97       	sbiw	r28, 0x07	; 7
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	6a 83       	std	Y+2, r22	; 0x02
     e70:	4b 83       	std	Y+3, r20	; 0x03
	if(dir == INPUT)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	88 23       	and	r24, r24
     e76:	09 f0       	breq	.+2      	; 0xe7a <set_pin_direction+0x22>
     e78:	74 c0       	rjmp	.+232    	; 0xf62 <set_pin_direction+0x10a>
	{
		switch(ptype)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3f 83       	std	Y+7, r19	; 0x07
     e82:	2e 83       	std	Y+6, r18	; 0x06
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	59 f1       	breq	.+86     	; 0xee4 <set_pin_direction+0x8c>
     e8e:	2e 81       	ldd	r18, Y+6	; 0x06
     e90:	3f 81       	ldd	r19, Y+7	; 0x07
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	31 05       	cpc	r19, r1
     e96:	2c f4       	brge	.+10     	; 0xea2 <set_pin_direction+0x4a>
     e98:	8e 81       	ldd	r24, Y+6	; 0x06
     e9a:	9f 81       	ldd	r25, Y+7	; 0x07
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	69 f0       	breq	.+26     	; 0xeba <set_pin_direction+0x62>
     ea0:	d2 c0       	rjmp	.+420    	; 0x1046 <set_pin_direction+0x1ee>
     ea2:	2e 81       	ldd	r18, Y+6	; 0x06
     ea4:	3f 81       	ldd	r19, Y+7	; 0x07
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	89 f1       	breq	.+98     	; 0xf0e <set_pin_direction+0xb6>
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	91 05       	cpc	r25, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <set_pin_direction+0x60>
     eb6:	40 c0       	rjmp	.+128    	; 0xf38 <set_pin_direction+0xe0>
     eb8:	c6 c0       	rjmp	.+396    	; 0x1046 <set_pin_direction+0x1ee>
		{
		case PORTA_reg:
			CLEAR_BIT(DDRA,p_num);
     eba:	aa e3       	ldi	r26, 0x3A	; 58
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ea e3       	ldi	r30, 0x3A	; 58
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <set_pin_direction+0x80>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <set_pin_direction+0x7c>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	b1 c0       	rjmp	.+354    	; 0x1046 <set_pin_direction+0x1ee>
			break;
		case PORTB_reg:
			CLEAR_BIT(DDRB,p_num);
     ee4:	a7 e3       	ldi	r26, 0x37	; 55
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e3       	ldi	r30, 0x37	; 55
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <set_pin_direction+0xaa>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <set_pin_direction+0xa6>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	9c c0       	rjmp	.+312    	; 0x1046 <set_pin_direction+0x1ee>
			break;
		case PORTC_reg:
			CLEAR_BIT(DDRC,p_num);
     f0e:	a4 e3       	ldi	r26, 0x34	; 52
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e4 e3       	ldi	r30, 0x34	; 52
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <set_pin_direction+0xd4>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <set_pin_direction+0xd0>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	87 c0       	rjmp	.+270    	; 0x1046 <set_pin_direction+0x1ee>
			break;
		case PORTD_reg:
			CLEAR_BIT(DDRD,p_num);
     f38:	a1 e3       	ldi	r26, 0x31	; 49
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 e3       	ldi	r30, 0x31	; 49
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <set_pin_direction+0xfe>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <set_pin_direction+0xfa>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	72 c0       	rjmp	.+228    	; 0x1046 <set_pin_direction+0x1ee>
			break;
		}
	}
	else if(dir == OUTPUT)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <set_pin_direction+0x112>
     f68:	6e c0       	rjmp	.+220    	; 0x1046 <set_pin_direction+0x1ee>
	{
		switch(ptype)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3d 83       	std	Y+5, r19	; 0x05
     f72:	2c 83       	std	Y+4, r18	; 0x04
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	49 f1       	breq	.+82     	; 0xfd0 <set_pin_direction+0x178>
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <set_pin_direction+0x13a>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <set_pin_direction+0x150>
     f90:	5a c0       	rjmp	.+180    	; 0x1046 <set_pin_direction+0x1ee>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	71 f1       	breq	.+92     	; 0xff8 <set_pin_direction+0x1a0>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	e9 f1       	breq	.+122    	; 0x1020 <set_pin_direction+0x1c8>
     fa6:	4f c0       	rjmp	.+158    	; 0x1046 <set_pin_direction+0x1ee>
		{
		case PORTA_reg:
			SET_BIT(DDRA,p_num);
     fa8:	aa e3       	ldi	r26, 0x3A	; 58
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e3       	ldi	r30, 0x3A	; 58
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <set_pin_direction+0x16e>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <set_pin_direction+0x16a>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	3b c0       	rjmp	.+118    	; 0x1046 <set_pin_direction+0x1ee>
			break;
		case PORTB_reg:
			SET_BIT(DDRB,p_num);
     fd0:	a7 e3       	ldi	r26, 0x37	; 55
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e7 e3       	ldi	r30, 0x37	; 55
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <set_pin_direction+0x196>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <set_pin_direction+0x192>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	27 c0       	rjmp	.+78     	; 0x1046 <set_pin_direction+0x1ee>
			break;
		case PORTC_reg:
			SET_BIT(DDRC,p_num);
     ff8:	a4 e3       	ldi	r26, 0x34	; 52
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e4 e3       	ldi	r30, 0x34	; 52
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <set_pin_direction+0x1be>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <set_pin_direction+0x1ba>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <set_pin_direction+0x1ee>
			break;
		case PORTD_reg:
			SET_BIT(DDRD,p_num);
    1020:	a1 e3       	ldi	r26, 0x31	; 49
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e1 e3       	ldi	r30, 0x31	; 49
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <set_pin_direction+0x1e6>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <set_pin_direction+0x1e2>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
			break;
		}

	}

}
    1046:	27 96       	adiw	r28, 0x07	; 7
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <set_port_value>:
void set_port_value(PORT_TYPE ptype,uint8 value)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <set_port_value+0x6>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <set_port_value+0x8>
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
	switch(ptype)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3c 83       	std	Y+4, r19	; 0x04
    1070:	2b 83       	std	Y+3, r18	; 0x03
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	d1 f0       	breq	.+52     	; 0x10b0 <set_port_value+0x58>
    107c:	2b 81       	ldd	r18, Y+3	; 0x03
    107e:	3c 81       	ldd	r19, Y+4	; 0x04
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	2c f4       	brge	.+10     	; 0x1090 <set_port_value+0x38>
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	61 f0       	breq	.+24     	; 0x10a6 <set_port_value+0x4e>
    108e:	1e c0       	rjmp	.+60     	; 0x10cc <set_port_value+0x74>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	81 f0       	breq	.+32     	; 0x10ba <set_port_value+0x62>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	81 f0       	breq	.+32     	; 0x10c4 <set_port_value+0x6c>
    10a4:	13 c0       	rjmp	.+38     	; 0x10cc <set_port_value+0x74>
	{
	case PORTA_reg:
		PORTA=value;
    10a6:	eb e3       	ldi	r30, 0x3B	; 59
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	80 83       	st	Z, r24
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <set_port_value+0x74>
		break;
	case PORTB_reg:
		PORTB=value;
    10b0:	e8 e3       	ldi	r30, 0x38	; 56
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	80 83       	st	Z, r24
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <set_port_value+0x74>
		break;
	case PORTC_reg:
		PORTC=value;
    10ba:	e5 e3       	ldi	r30, 0x35	; 53
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <set_port_value+0x74>
		break;
	case PORTD_reg:
		PORTD=value;
    10c4:	e2 e3       	ldi	r30, 0x32	; 50
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
		break;
	}
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <set_pin_value>:
void set_pin_value(PORT_TYPE ptype,PIN_NUM p_num,DIO_VAL val)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	27 97       	sbiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
    10f2:	4b 83       	std	Y+3, r20	; 0x03
	if(val == HIGH)
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	09 f0       	breq	.+2      	; 0x10fc <set_pin_value+0x22>
    10fa:	6f c0       	rjmp	.+222    	; 0x11da <set_pin_value+0x100>
	{
		switch(ptype)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3f 83       	std	Y+7, r19	; 0x07
    1104:	2e 83       	std	Y+6, r18	; 0x06
    1106:	8e 81       	ldd	r24, Y+6	; 0x06
    1108:	9f 81       	ldd	r25, Y+7	; 0x07
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	49 f1       	breq	.+82     	; 0x1162 <set_pin_value+0x88>
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	2c f4       	brge	.+10     	; 0x1124 <set_pin_value+0x4a>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	61 f0       	breq	.+24     	; 0x113a <set_pin_value+0x60>
    1122:	d2 c0       	rjmp	.+420    	; 0x12c8 <set_pin_value+0x1ee>
    1124:	2e 81       	ldd	r18, Y+6	; 0x06
    1126:	3f 81       	ldd	r19, Y+7	; 0x07
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	71 f1       	breq	.+92     	; 0x118a <set_pin_value+0xb0>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	e9 f1       	breq	.+122    	; 0x11b2 <set_pin_value+0xd8>
    1138:	c7 c0       	rjmp	.+398    	; 0x12c8 <set_pin_value+0x1ee>
		{
		case PORTA_reg:
			SET_BIT(PORTA,p_num);
    113a:	ab e3       	ldi	r26, 0x3B	; 59
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	eb e3       	ldi	r30, 0x3B	; 59
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <set_pin_value+0x7e>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <set_pin_value+0x7a>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	b3 c0       	rjmp	.+358    	; 0x12c8 <set_pin_value+0x1ee>
			break;
		case PORTB_reg:
			SET_BIT(PORTB,p_num);
    1162:	a8 e3       	ldi	r26, 0x38	; 56
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e8 e3       	ldi	r30, 0x38	; 56
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <set_pin_value+0xa6>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <set_pin_value+0xa2>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	9f c0       	rjmp	.+318    	; 0x12c8 <set_pin_value+0x1ee>
			break;
		case PORTC_reg:
			SET_BIT(PORTC,p_num);
    118a:	a5 e3       	ldi	r26, 0x35	; 53
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e5 e3       	ldi	r30, 0x35	; 53
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <set_pin_value+0xce>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <set_pin_value+0xca>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	8b c0       	rjmp	.+278    	; 0x12c8 <set_pin_value+0x1ee>
			break;
		case PORTD_reg:
			SET_BIT(PORTD,p_num);
    11b2:	a2 e3       	ldi	r26, 0x32	; 50
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <set_pin_value+0xf6>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <set_pin_value+0xf2>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	77 c0       	rjmp	.+238    	; 0x12c8 <set_pin_value+0x1ee>
			break;
		}

	}
	else if(val == LOW)
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 23       	and	r24, r24
    11de:	09 f0       	breq	.+2      	; 0x11e2 <set_pin_value+0x108>
    11e0:	73 c0       	rjmp	.+230    	; 0x12c8 <set_pin_value+0x1ee>
	{
		switch(ptype)
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3d 83       	std	Y+5, r19	; 0x05
    11ea:	2c 83       	std	Y+4, r18	; 0x04
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	59 f1       	breq	.+86     	; 0x124c <set_pin_value+0x172>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <set_pin_value+0x130>
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	69 f0       	breq	.+26     	; 0x1222 <set_pin_value+0x148>
    1208:	5f c0       	rjmp	.+190    	; 0x12c8 <set_pin_value+0x1ee>
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	3d 81       	ldd	r19, Y+5	; 0x05
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	89 f1       	breq	.+98     	; 0x1276 <set_pin_value+0x19c>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <set_pin_value+0x146>
    121e:	40 c0       	rjmp	.+128    	; 0x12a0 <set_pin_value+0x1c6>
    1220:	53 c0       	rjmp	.+166    	; 0x12c8 <set_pin_value+0x1ee>
		{
		case PORTA_reg:
			CLEAR_BIT(PORTA,p_num);
    1222:	ab e3       	ldi	r26, 0x3B	; 59
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	eb e3       	ldi	r30, 0x3B	; 59
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <set_pin_value+0x166>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <set_pin_value+0x162>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	3e c0       	rjmp	.+124    	; 0x12c8 <set_pin_value+0x1ee>
			break;
		case PORTB_reg:
			CLEAR_BIT(PORTB,p_num);
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <set_pin_value+0x190>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <set_pin_value+0x18c>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	29 c0       	rjmp	.+82     	; 0x12c8 <set_pin_value+0x1ee>
			break;
		case PORTC_reg:
			CLEAR_BIT(PORTC,p_num);
    1276:	a5 e3       	ldi	r26, 0x35	; 53
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <set_pin_value+0x1ba>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <set_pin_value+0x1b6>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <set_pin_value+0x1ee>
			break;
		case PORTD_reg:
			CLEAR_BIT(PORTD,p_num);
    12a0:	a2 e3       	ldi	r26, 0x32	; 50
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <set_pin_value+0x1e4>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <set_pin_value+0x1e0>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
			break;
		}
	}

}
    12c8:	27 96       	adiw	r28, 0x07	; 7
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <get_pin_value>:
DIO_VAL get_pin_value(PORT_TYPE ptype,PIN_NUM p_num)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <get_pin_value+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <get_pin_value+0x8>
    12e2:	0f 92       	push	r0
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VAL x;
	switch(ptype)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3d 83       	std	Y+5, r19	; 0x05
    12f4:	2c 83       	std	Y+4, r18	; 0x04
    12f6:	4c 81       	ldd	r20, Y+4	; 0x04
    12f8:	5d 81       	ldd	r21, Y+5	; 0x05
    12fa:	41 30       	cpi	r20, 0x01	; 1
    12fc:	51 05       	cpc	r21, r1
    12fe:	41 f1       	breq	.+80     	; 0x1350 <get_pin_value+0x76>
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	91 05       	cpc	r25, r1
    1308:	34 f4       	brge	.+12     	; 0x1316 <get_pin_value+0x3c>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	21 15       	cp	r18, r1
    1310:	31 05       	cpc	r19, r1
    1312:	61 f0       	breq	.+24     	; 0x132c <get_pin_value+0x52>
    1314:	52 c0       	rjmp	.+164    	; 0x13ba <get_pin_value+0xe0>
    1316:	4c 81       	ldd	r20, Y+4	; 0x04
    1318:	5d 81       	ldd	r21, Y+5	; 0x05
    131a:	42 30       	cpi	r20, 0x02	; 2
    131c:	51 05       	cpc	r21, r1
    131e:	51 f1       	breq	.+84     	; 0x1374 <get_pin_value+0x9a>
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	b9 f1       	breq	.+110    	; 0x1398 <get_pin_value+0xbe>
    132a:	47 c0       	rjmp	.+142    	; 0x13ba <get_pin_value+0xe0>
	{
	case PORTA_reg:
			x=GET_BIT(PINA,p_num);
    132c:	e9 e3       	ldi	r30, 0x39	; 57
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <get_pin_value+0x6a>
    1340:	55 95       	asr	r21
    1342:	47 95       	ror	r20
    1344:	8a 95       	dec	r24
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <get_pin_value+0x66>
    1348:	ca 01       	movw	r24, r20
    134a:	81 70       	andi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	35 c0       	rjmp	.+106    	; 0x13ba <get_pin_value+0xe0>
			break;
	case PORTB_reg:
			x=GET_BIT(PINB,p_num);
    1350:	e6 e3       	ldi	r30, 0x36	; 54
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a9 01       	movw	r20, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <get_pin_value+0x8e>
    1364:	55 95       	asr	r21
    1366:	47 95       	ror	r20
    1368:	8a 95       	dec	r24
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <get_pin_value+0x8a>
    136c:	ca 01       	movw	r24, r20
    136e:	81 70       	andi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	23 c0       	rjmp	.+70     	; 0x13ba <get_pin_value+0xe0>
			break;
	case PORTC_reg:
			x=GET_BIT(PINC,p_num);
    1374:	e3 e3       	ldi	r30, 0x33	; 51
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <get_pin_value+0xb2>
    1388:	55 95       	asr	r21
    138a:	47 95       	ror	r20
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <get_pin_value+0xae>
    1390:	ca 01       	movw	r24, r20
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	11 c0       	rjmp	.+34     	; 0x13ba <get_pin_value+0xe0>
			break;
	case PORTD_reg:
			x=GET_BIT(PIND,p_num);
    1398:	e0 e3       	ldi	r30, 0x30	; 48
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <get_pin_value+0xd6>
    13ac:	55 95       	asr	r21
    13ae:	47 95       	ror	r20
    13b0:	8a 95       	dec	r24
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <get_pin_value+0xd2>
    13b4:	ca 01       	movw	r24, r20
    13b6:	81 70       	andi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return x;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01


}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <get_key_pressed>:
#elif(N_COL == 4)
static uint8 Keypad_4x4_config(uint8 button_number);
#endif

uint8 get_key_pressed()
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <get_key_pressed+0x6>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;

	while(1)
	{
		for(col=0;col<N_COL;col++)
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	4c c0       	rjmp	.+152    	; 0x1472 <get_key_pressed+0xa6>
		{
			Keypad_DDR=(0b00010000<<col);//make col0 output and rest of cols and rows are input
    13da:	ea e3       	ldi	r30, 0x3A	; 58
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	80 e1       	ldi	r24, 0x10	; 16
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <get_key_pressed+0x22>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	2a 95       	dec	r18
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <get_key_pressed+0x1e>
    13f2:	80 83       	st	Z, r24
			Keypad_PORT=(~(0b00010000<<col));//put 0 on col0 and make all pins internal pull up resistance
    13f4:	eb e3       	ldi	r30, 0x3B	; 59
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	80 e1       	ldi	r24, 0x10	; 16
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <get_key_pressed+0x3e>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <get_key_pressed+0x3a>
    140e:	80 95       	com	r24
    1410:	80 83       	st	Z, r24
			for(row=0;row<N_ROW;row++)
    1412:	1a 82       	std	Y+2, r1	; 0x02
    1414:	28 c0       	rjmp	.+80     	; 0x1466 <get_key_pressed+0x9a>
			{
				if(BIT_IS_CLEAR(Keypad_PIN,row))
    1416:	e9 e3       	ldi	r30, 0x39	; 57
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a9 01       	movw	r20, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <get_key_pressed+0x62>
    142a:	55 95       	asr	r21
    142c:	47 95       	ror	r20
    142e:	8a 95       	dec	r24
    1430:	e2 f7       	brpl	.-8      	; 0x142a <get_key_pressed+0x5e>
    1432:	ca 01       	movw	r24, r20
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	90 70       	andi	r25, 0x00	; 0
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	91 f4       	brne	.+36     	; 0x1460 <get_key_pressed+0x94>
				{
					#if(N_COL == 3)
					return keypad_4X3_config((row*N_COL)+col+1);
					#elif(N_COL == 4)
					return Keypad_4x4_config((row*N_COL)+col+1);
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	98 2f       	mov	r25, r24
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	89 0f       	add	r24, r25
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	0e 94 b7 0a 	call	0x156e	; 0x156e <Keypad_4x4_config>
					#endif
				}
			}
		}
	}
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret
	{
		for(col=0;col<N_COL;col++)
		{
			Keypad_DDR=(0b00010000<<col);//make col0 output and rest of cols and rows are input
			Keypad_PORT=(~(0b00010000<<col));//put 0 on col0 and make all pins internal pull up resistance
			for(row=0;row<N_ROW;row++)
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	a8 f2       	brcs	.-86     	; 0x1416 <get_key_pressed+0x4a>
{
	uint8 row,col;

	while(1)
	{
		for(col=0;col<N_COL;col++)
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	08 f4       	brcc	.+2      	; 0x147a <get_key_pressed+0xae>
    1478:	b0 cf       	rjmp	.-160    	; 0x13da <get_key_pressed+0xe>
    147a:	ad cf       	rjmp	.-166    	; 0x13d6 <get_key_pressed+0xa>

0000147c <keypad_4X3_config>:
			}
		}
	}
}
static uint8 keypad_4X3_config(uint8 button_number)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <keypad_4X3_config+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <keypad_4X3_config+0x8>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3c 83       	std	Y+4, r19	; 0x04
    1492:	2b 83       	std	Y+3, r18	; 0x03
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	85 30       	cpi	r24, 0x05	; 5
    149a:	91 05       	cpc	r25, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <keypad_4X3_config+0x24>
    149e:	4c c0       	rjmp	.+152    	; 0x1538 <keypad_4X3_config+0xbc>
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	3c 81       	ldd	r19, Y+4	; 0x04
    14a4:	26 30       	cpi	r18, 0x06	; 6
    14a6:	31 05       	cpc	r19, r1
    14a8:	dc f4       	brge	.+54     	; 0x14e0 <keypad_4X3_config+0x64>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	91 05       	cpc	r25, r1
    14b2:	c9 f1       	breq	.+114    	; 0x1526 <keypad_4X3_config+0xaa>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	23 30       	cpi	r18, 0x03	; 3
    14ba:	31 05       	cpc	r19, r1
    14bc:	34 f4       	brge	.+12     	; 0x14ca <keypad_4X3_config+0x4e>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	61 f1       	breq	.+88     	; 0x1520 <keypad_4X3_config+0xa4>
    14c8:	48 c0       	rjmp	.+144    	; 0x155a <keypad_4X3_config+0xde>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	23 30       	cpi	r18, 0x03	; 3
    14d0:	31 05       	cpc	r19, r1
    14d2:	61 f1       	breq	.+88     	; 0x152c <keypad_4X3_config+0xb0>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	91 05       	cpc	r25, r1
    14dc:	51 f1       	breq	.+84     	; 0x1532 <keypad_4X3_config+0xb6>
    14de:	3d c0       	rjmp	.+122    	; 0x155a <keypad_4X3_config+0xde>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	28 30       	cpi	r18, 0x08	; 8
    14e6:	31 05       	cpc	r19, r1
    14e8:	81 f1       	breq	.+96     	; 0x154a <keypad_4X3_config+0xce>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	89 30       	cpi	r24, 0x09	; 9
    14f0:	91 05       	cpc	r25, r1
    14f2:	5c f4       	brge	.+22     	; 0x150a <keypad_4X3_config+0x8e>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	26 30       	cpi	r18, 0x06	; 6
    14fa:	31 05       	cpc	r19, r1
    14fc:	01 f1       	breq	.+64     	; 0x153e <keypad_4X3_config+0xc2>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	87 30       	cpi	r24, 0x07	; 7
    1504:	91 05       	cpc	r25, r1
    1506:	f1 f0       	breq	.+60     	; 0x1544 <keypad_4X3_config+0xc8>
    1508:	28 c0       	rjmp	.+80     	; 0x155a <keypad_4X3_config+0xde>
    150a:	2b 81       	ldd	r18, Y+3	; 0x03
    150c:	3c 81       	ldd	r19, Y+4	; 0x04
    150e:	29 30       	cpi	r18, 0x09	; 9
    1510:	31 05       	cpc	r19, r1
    1512:	f1 f0       	breq	.+60     	; 0x1550 <keypad_4X3_config+0xd4>
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	8b 30       	cpi	r24, 0x0B	; 11
    151a:	91 05       	cpc	r25, r1
    151c:	e1 f0       	breq	.+56     	; 0x1556 <keypad_4X3_config+0xda>
    151e:	1d c0       	rjmp	.+58     	; 0x155a <keypad_4X3_config+0xde>
	{
	case 1:
		return 1;
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	1c c0       	rjmp	.+56     	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 2:
		return 2;
    1526:	22 e0       	ldi	r18, 0x02	; 2
    1528:	2a 83       	std	Y+2, r18	; 0x02
    152a:	19 c0       	rjmp	.+50     	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 3:
		return 3;
    152c:	33 e0       	ldi	r19, 0x03	; 3
    152e:	3a 83       	std	Y+2, r19	; 0x02
    1530:	16 c0       	rjmp	.+44     	; 0x155e <keypad_4X3_config+0xe2>
	case 4:
		return 4;
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	8a 83       	std	Y+2, r24	; 0x02
    1536:	13 c0       	rjmp	.+38     	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 5:
		return 5;
    1538:	95 e0       	ldi	r25, 0x05	; 5
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	10 c0       	rjmp	.+32     	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 6:
		return 6;
    153e:	26 e0       	ldi	r18, 0x06	; 6
    1540:	2a 83       	std	Y+2, r18	; 0x02
    1542:	0d c0       	rjmp	.+26     	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 7:
		return 7;
    1544:	37 e0       	ldi	r19, 0x07	; 7
    1546:	3a 83       	std	Y+2, r19	; 0x02
    1548:	0a c0       	rjmp	.+20     	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 8:
		return 8;
    154a:	88 e0       	ldi	r24, 0x08	; 8
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	07 c0       	rjmp	.+14     	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 9:
		return 9;
    1550:	99 e0       	ldi	r25, 0x09	; 9
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	04 c0       	rjmp	.+8      	; 0x155e <keypad_4X3_config+0xe2>
		break;
	case 11:
		return 0;
    1556:	1a 82       	std	Y+2, r1	; 0x02
    1558:	02 c0       	rjmp	.+4      	; 0x155e <keypad_4X3_config+0xe2>
		break;
	default:
		return button_number;
    155a:	29 81       	ldd	r18, Y+1	; 0x01
    155c:	2a 83       	std	Y+2, r18	; 0x02
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <Keypad_4x4_config>:

static uint8 Keypad_4x4_config(uint8 button_number)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <Keypad_4x4_config+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Keypad_4x4_config+0x8>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	89 83       	std	Y+1, r24	; 0x01

	switch(button_number)
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3c 83       	std	Y+4, r19	; 0x04
    1584:	2b 83       	std	Y+3, r18	; 0x03
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <Keypad_4x4_config+0x24>
    1590:	70 c0       	rjmp	.+224    	; 0x1672 <Keypad_4x4_config+0x104>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	29 30       	cpi	r18, 0x09	; 9
    1598:	31 05       	cpc	r19, r1
    159a:	5c f5       	brge	.+86     	; 0x15f2 <Keypad_4x4_config+0x84>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <Keypad_4x4_config+0x3a>
    15a6:	59 c0       	rjmp	.+178    	; 0x165a <Keypad_4x4_config+0xec>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	25 30       	cpi	r18, 0x05	; 5
    15ae:	31 05       	cpc	r19, r1
    15b0:	9c f4       	brge	.+38     	; 0x15d8 <Keypad_4x4_config+0x6a>
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	91 05       	cpc	r25, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <Keypad_4x4_config+0x50>
    15bc:	48 c0       	rjmp	.+144    	; 0x164e <Keypad_4x4_config+0xe0>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	23 30       	cpi	r18, 0x03	; 3
    15c4:	31 05       	cpc	r19, r1
    15c6:	0c f0       	brlt	.+2      	; 0x15ca <Keypad_4x4_config+0x5c>
    15c8:	45 c0       	rjmp	.+138    	; 0x1654 <Keypad_4x4_config+0xe6>
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <Keypad_4x4_config+0x68>
    15d4:	39 c0       	rjmp	.+114    	; 0x1648 <Keypad_4x4_config+0xda>
    15d6:	67 c0       	rjmp	.+206    	; 0x16a6 <Keypad_4x4_config+0x138>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	26 30       	cpi	r18, 0x06	; 6
    15de:	31 05       	cpc	r19, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <Keypad_4x4_config+0x76>
    15e2:	41 c0       	rjmp	.+130    	; 0x1666 <Keypad_4x4_config+0xf8>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	87 30       	cpi	r24, 0x07	; 7
    15ea:	91 05       	cpc	r25, r1
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <Keypad_4x4_config+0x82>
    15ee:	3e c0       	rjmp	.+124    	; 0x166c <Keypad_4x4_config+0xfe>
    15f0:	37 c0       	rjmp	.+110    	; 0x1660 <Keypad_4x4_config+0xf2>
    15f2:	2b 81       	ldd	r18, Y+3	; 0x03
    15f4:	3c 81       	ldd	r19, Y+4	; 0x04
    15f6:	2c 30       	cpi	r18, 0x0C	; 12
    15f8:	31 05       	cpc	r19, r1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <Keypad_4x4_config+0x90>
    15fc:	46 c0       	rjmp	.+140    	; 0x168a <Keypad_4x4_config+0x11c>
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	8d 30       	cpi	r24, 0x0D	; 13
    1604:	91 05       	cpc	r25, r1
    1606:	5c f4       	brge	.+22     	; 0x161e <Keypad_4x4_config+0xb0>
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	2a 30       	cpi	r18, 0x0A	; 10
    160e:	31 05       	cpc	r19, r1
    1610:	b1 f1       	breq	.+108    	; 0x167e <Keypad_4x4_config+0x110>
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	8b 30       	cpi	r24, 0x0B	; 11
    1618:	91 05       	cpc	r25, r1
    161a:	a4 f5       	brge	.+104    	; 0x1684 <Keypad_4x4_config+0x116>
    161c:	2d c0       	rjmp	.+90     	; 0x1678 <Keypad_4x4_config+0x10a>
    161e:	2b 81       	ldd	r18, Y+3	; 0x03
    1620:	3c 81       	ldd	r19, Y+4	; 0x04
    1622:	2e 30       	cpi	r18, 0x0E	; 14
    1624:	31 05       	cpc	r19, r1
    1626:	b9 f1       	breq	.+110    	; 0x1696 <Keypad_4x4_config+0x128>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	8e 30       	cpi	r24, 0x0E	; 14
    162e:	91 05       	cpc	r25, r1
    1630:	7c f1       	brlt	.+94     	; 0x1690 <Keypad_4x4_config+0x122>
    1632:	2b 81       	ldd	r18, Y+3	; 0x03
    1634:	3c 81       	ldd	r19, Y+4	; 0x04
    1636:	2f 30       	cpi	r18, 0x0F	; 15
    1638:	31 05       	cpc	r19, r1
    163a:	79 f1       	breq	.+94     	; 0x169a <Keypad_4x4_config+0x12c>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	80 31       	cpi	r24, 0x10	; 16
    1642:	91 05       	cpc	r25, r1
    1644:	69 f1       	breq	.+90     	; 0x16a0 <Keypad_4x4_config+0x132>
    1646:	2f c0       	rjmp	.+94     	; 0x16a6 <Keypad_4x4_config+0x138>
	{
	case 1: return 7;
    1648:	97 e0       	ldi	r25, 0x07	; 7
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	2e c0       	rjmp	.+92     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 2: return 8;
    164e:	28 e0       	ldi	r18, 0x08	; 8
    1650:	2a 83       	std	Y+2, r18	; 0x02
    1652:	2b c0       	rjmp	.+86     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 3: return 9;
    1654:	39 e0       	ldi	r19, 0x09	; 9
    1656:	3a 83       	std	Y+2, r19	; 0x02
    1658:	28 c0       	rjmp	.+80     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 4: return '/';
    165a:	8f e2       	ldi	r24, 0x2F	; 47
    165c:	8a 83       	std	Y+2, r24	; 0x02
    165e:	25 c0       	rjmp	.+74     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 5: return 4;
    1660:	94 e0       	ldi	r25, 0x04	; 4
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	22 c0       	rjmp	.+68     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 6: return 5;
    1666:	25 e0       	ldi	r18, 0x05	; 5
    1668:	2a 83       	std	Y+2, r18	; 0x02
    166a:	1f c0       	rjmp	.+62     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 7: return 6;
    166c:	36 e0       	ldi	r19, 0x06	; 6
    166e:	3a 83       	std	Y+2, r19	; 0x02
    1670:	1c c0       	rjmp	.+56     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 8: return '*'; /* ASCII Code of '*' */
    1672:	8a e2       	ldi	r24, 0x2A	; 42
    1674:	8a 83       	std	Y+2, r24	; 0x02
    1676:	19 c0       	rjmp	.+50     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 9: return 1;
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	16 c0       	rjmp	.+44     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 10: return 2;
    167e:	22 e0       	ldi	r18, 0x02	; 2
    1680:	2a 83       	std	Y+2, r18	; 0x02
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 11: return 3;
    1684:	33 e0       	ldi	r19, 0x03	; 3
    1686:	3a 83       	std	Y+2, r19	; 0x02
    1688:	10 c0       	rjmp	.+32     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 12: return '-'; /* ASCII Code of '-' */
    168a:	8d e2       	ldi	r24, 0x2D	; 45
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 13: return 13;  /* ASCII of Enter */
    1690:	9d e0       	ldi	r25, 0x0D	; 13
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	0a c0       	rjmp	.+20     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 14: return 0;
    1696:	1a 82       	std	Y+2, r1	; 0x02
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 15:return '=';
    169a:	2d e3       	ldi	r18, 0x3D	; 61
    169c:	2a 83       	std	Y+2, r18	; 0x02
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	case 16: return '+'; /* ASCII Code of '+' */
    16a0:	3b e2       	ldi	r19, 0x2B	; 43
    16a2:	3a 83       	std	Y+2, r19	; 0x02
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <Keypad_4x4_config+0x13c>
			break;
	default: return button_number;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	8a 83       	std	Y+2, r24	; 0x02
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
	}

}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <LCD_Init>:
 */

#include"LCD.h"

void LCD_Init()
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	set_pin_direction(PORTC_reg, RS, OUTPUT);
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	0e 94 2c 07 	call	0xe58	; 0xe58 <set_pin_direction>
	set_pin_direction(PORTC_reg,RW,OUTPUT); //make control pins output
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	0e 94 2c 07 	call	0xe58	; 0xe58 <set_pin_direction>
	set_pin_direction(PORTC_reg,E,OUTPUT);
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	62 e0       	ldi	r22, 0x02	; 2
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	0e 94 2c 07 	call	0xe58	; 0xe58 <set_pin_direction>

	#if(LCD_BIT_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_DIR|=0xF0; //make upper port pins output
    16e0:	a4 e3       	ldi	r26, 0x34	; 52
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e4 e3       	ldi	r30, 0x34	; 52
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 6f       	ori	r24, 0xF0	; 240
    16ec:	8c 93       	st	X, r24
	#else
	LCD_DATA_DIR|=0x0F; //make lower port pins output
	#endif
	LCD_SendCommand(FOUR_BIT_DATA_MODE);
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
	LCD_SendCommand(LCD_4_BIT_TWO_LINE);
    16f4:	88 e2       	ldi	r24, 0x28	; 40
    16f6:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
	#elif(LCD_BIT_MODE==8)
	LCD_DATA_DIR|=0xFF;
	LCD_SendCommand(LCD_8_BIT_TWO_LINE);
	#endif
	LCD_SendCommand(DISPLAY_ON_CURSOR_OFF);
    16fa:	8c e0       	ldi	r24, 0x0C	; 12
    16fc:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
	LCD_SendCommand(CLEAR_DISPLAY);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <LCD_SendCommand>:
void LCD_SendCommand(uint8 command)
{
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	c3 56       	subi	r28, 0x63	; 99
    171a:	d0 40       	sbci	r29, 0x00	; 0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	fe 01       	movw	r30, r28
    1728:	ed 59       	subi	r30, 0x9D	; 157
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 83       	st	Z, r24
	set_pin_value(PORTC_reg, RS, LOW);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
	set_pin_value(PORTC_reg, RW, LOW);
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    1742:	fe 01       	movw	r30, r28
    1744:	e1 5a       	subi	r30, 0xA1	; 161
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e8       	ldi	r26, 0x80	; 128
    174e:	bf e3       	ldi	r27, 0x3F	; 63
    1750:	80 83       	st	Z, r24
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	a2 83       	std	Z+2, r26	; 0x02
    1756:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1758:	8e 01       	movw	r16, r28
    175a:	05 5a       	subi	r16, 0xA5	; 165
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	fe 01       	movw	r30, r28
    1760:	e1 5a       	subi	r30, 0xA1	; 161
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a e7       	ldi	r20, 0x7A	; 122
    1772:	53 e4       	ldi	r21, 0x43	; 67
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	f8 01       	movw	r30, r16
    177e:	80 83       	st	Z, r24
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	a2 83       	std	Z+2, r26	; 0x02
    1784:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1786:	fe 01       	movw	r30, r28
    1788:	e5 5a       	subi	r30, 0xA5	; 165
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	44 f4       	brge	.+16     	; 0x17b4 <LCD_SendCommand+0xa8>
		__ticks = 1;
    17a4:	fe 01       	movw	r30, r28
    17a6:	e7 5a       	subi	r30, 0xA7	; 167
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	64 c0       	rjmp	.+200    	; 0x187c <LCD_SendCommand+0x170>
	else if (__tmp > 65535)
    17b4:	fe 01       	movw	r30, r28
    17b6:	e5 5a       	subi	r30, 0xA5	; 165
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	0c f0       	brlt	.+2      	; 0x17d4 <LCD_SendCommand+0xc8>
    17d2:	43 c0       	rjmp	.+134    	; 0x185a <LCD_SendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	fe 01       	movw	r30, r28
    17d6:	e1 5a       	subi	r30, 0xA1	; 161
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8e 01       	movw	r16, r28
    17f4:	07 5a       	subi	r16, 0xA7	; 167
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	f8 01       	movw	r30, r16
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	1f c0       	rjmp	.+62     	; 0x184a <LCD_SendCommand+0x13e>
    180c:	fe 01       	movw	r30, r28
    180e:	e9 5a       	subi	r30, 0xA9	; 169
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	89 e1       	ldi	r24, 0x19	; 25
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    181a:	fe 01       	movw	r30, r28
    181c:	e9 5a       	subi	r30, 0xA9	; 169
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_SendCommand+0x118>
    1828:	fe 01       	movw	r30, r28
    182a:	e9 5a       	subi	r30, 0xA9	; 169
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	de 01       	movw	r26, r28
    1834:	a7 5a       	subi	r26, 0xA7	; 167
    1836:	bf 4f       	sbci	r27, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	e7 5a       	subi	r30, 0xA7	; 167
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	9c 93       	st	X, r25
    1848:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5a       	subi	r30, 0xA7	; 167
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	d1 f6       	brne	.-76     	; 0x180c <LCD_SendCommand+0x100>
    1858:	27 c0       	rjmp	.+78     	; 0x18a8 <LCD_SendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185a:	8e 01       	movw	r16, r28
    185c:	07 5a       	subi	r16, 0xA7	; 167
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	fe 01       	movw	r30, r28
    1862:	e5 5a       	subi	r30, 0xA5	; 165
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	f8 01       	movw	r30, r16
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	de 01       	movw	r26, r28
    187e:	ab 5a       	subi	r26, 0xAB	; 171
    1880:	bf 4f       	sbci	r27, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e7 5a       	subi	r30, 0xA7	; 167
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	8d 93       	st	X+, r24
    188e:	9c 93       	st	X, r25
    1890:	fe 01       	movw	r30, r28
    1892:	eb 5a       	subi	r30, 0xAB	; 171
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_SendCommand+0x18e>
    189e:	fe 01       	movw	r30, r28
    18a0:	eb 5a       	subi	r30, 0xAB	; 171
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	62 e0       	ldi	r22, 0x02	; 2
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    18b2:	fe 01       	movw	r30, r28
    18b4:	ef 5a       	subi	r30, 0xAF	; 175
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e8       	ldi	r26, 0x80	; 128
    18be:	bf e3       	ldi	r27, 0x3F	; 63
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	8e 01       	movw	r16, r28
    18ca:	03 5b       	subi	r16, 0xB3	; 179
    18cc:	1f 4f       	sbci	r17, 0xFF	; 255
    18ce:	fe 01       	movw	r30, r28
    18d0:	ef 5a       	subi	r30, 0xAF	; 175
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a e7       	ldi	r20, 0x7A	; 122
    18e2:	53 e4       	ldi	r21, 0x43	; 67
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	f8 01       	movw	r30, r16
    18ee:	80 83       	st	Z, r24
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	a2 83       	std	Z+2, r26	; 0x02
    18f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f6:	fe 01       	movw	r30, r28
    18f8:	e3 5b       	subi	r30, 0xB3	; 179
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	44 f4       	brge	.+16     	; 0x1924 <LCD_SendCommand+0x218>
		__ticks = 1;
    1914:	fe 01       	movw	r30, r28
    1916:	e5 5b       	subi	r30, 0xB5	; 181
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
    1922:	64 c0       	rjmp	.+200    	; 0x19ec <LCD_SendCommand+0x2e0>
	else if (__tmp > 65535)
    1924:	fe 01       	movw	r30, r28
    1926:	e3 5b       	subi	r30, 0xB3	; 179
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	0c f0       	brlt	.+2      	; 0x1944 <LCD_SendCommand+0x238>
    1942:	43 c0       	rjmp	.+134    	; 0x19ca <LCD_SendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	fe 01       	movw	r30, r28
    1946:	ef 5a       	subi	r30, 0xAF	; 175
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8e 01       	movw	r16, r28
    1964:	05 5b       	subi	r16, 0xB5	; 181
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	f8 01       	movw	r30, r16
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
    197a:	1f c0       	rjmp	.+62     	; 0x19ba <LCD_SendCommand+0x2ae>
    197c:	fe 01       	movw	r30, r28
    197e:	e7 5b       	subi	r30, 0xB7	; 183
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	89 e1       	ldi	r24, 0x19	; 25
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	80 83       	st	Z, r24
    198a:	fe 01       	movw	r30, r28
    198c:	e7 5b       	subi	r30, 0xB7	; 183
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_SendCommand+0x288>
    1998:	fe 01       	movw	r30, r28
    199a:	e7 5b       	subi	r30, 0xB7	; 183
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	de 01       	movw	r26, r28
    19a4:	a5 5b       	subi	r26, 0xB5	; 181
    19a6:	bf 4f       	sbci	r27, 0xFF	; 255
    19a8:	fe 01       	movw	r30, r28
    19aa:	e5 5b       	subi	r30, 0xB5	; 181
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	9c 93       	st	X, r25
    19b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	fe 01       	movw	r30, r28
    19bc:	e5 5b       	subi	r30, 0xB5	; 181
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	d1 f6       	brne	.-76     	; 0x197c <LCD_SendCommand+0x270>
    19c8:	27 c0       	rjmp	.+78     	; 0x1a18 <LCD_SendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ca:	8e 01       	movw	r16, r28
    19cc:	05 5b       	subi	r16, 0xB5	; 181
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	fe 01       	movw	r30, r28
    19d2:	e3 5b       	subi	r30, 0xB3	; 179
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	f8 01       	movw	r30, r16
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
    19ec:	de 01       	movw	r26, r28
    19ee:	a9 5b       	subi	r26, 0xB9	; 185
    19f0:	bf 4f       	sbci	r27, 0xFF	; 255
    19f2:	fe 01       	movw	r30, r28
    19f4:	e5 5b       	subi	r30, 0xB5	; 181
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	8d 93       	st	X+, r24
    19fe:	9c 93       	st	X, r25
    1a00:	fe 01       	movw	r30, r28
    1a02:	e9 5b       	subi	r30, 0xB9	; 185
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_SendCommand+0x2fe>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e9 5b       	subi	r30, 0xB9	; 185
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
	_delay_ms(1);

	#if(LCD_BIT_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|(command & 0xF0);
    1a18:	a5 e3       	ldi	r26, 0x35	; 53
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e5 e3       	ldi	r30, 0x35	; 53
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	98 2f       	mov	r25, r24
    1a24:	9f 70       	andi	r25, 0x0F	; 15
    1a26:	fe 01       	movw	r30, r28
    1a28:	ed 59       	subi	r30, 0x9D	; 157
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 7f       	andi	r24, 0xF0	; 240
    1a30:	89 2b       	or	r24, r25
    1a32:	8c 93       	st	X, r24
    1a34:	fe 01       	movw	r30, r28
    1a36:	ed 5b       	subi	r30, 0xBD	; 189
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e8       	ldi	r26, 0x80	; 128
    1a40:	bf e3       	ldi	r27, 0x3F	; 63
    1a42:	80 83       	st	Z, r24
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	a2 83       	std	Z+2, r26	; 0x02
    1a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	8e 01       	movw	r16, r28
    1a4c:	01 5c       	subi	r16, 0xC1	; 193
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	fe 01       	movw	r30, r28
    1a52:	ed 5b       	subi	r30, 0xBD	; 189
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a e7       	ldi	r20, 0x7A	; 122
    1a64:	53 e4       	ldi	r21, 0x43	; 67
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	f8 01       	movw	r30, r16
    1a70:	80 83       	st	Z, r24
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	a2 83       	std	Z+2, r26	; 0x02
    1a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ff 96       	adiw	r30, 0x3f	; 63
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <LCD_SendCommand+0x392>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e af       	std	Y+62, r25	; 0x3e
    1a9a:	8d af       	std	Y+61, r24	; 0x3d
    1a9c:	46 c0       	rjmp	.+140    	; 0x1b2a <LCD_SendCommand+0x41e>
	else if (__tmp > 65535)
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ff 96       	adiw	r30, 0x3f	; 63
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	64 f5       	brge	.+88     	; 0x1b12 <LCD_SendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 5b       	subi	r30, 0xBD	; 189
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e af       	std	Y+62, r25	; 0x3e
    1ae6:	8d af       	std	Y+61, r24	; 0x3d
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_SendCommand+0x3fc>
    1aea:	89 e1       	ldi	r24, 0x19	; 25
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9c af       	std	Y+60, r25	; 0x3c
    1af0:	8b af       	std	Y+59, r24	; 0x3b
    1af2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1af4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_SendCommand+0x3ea>
    1afa:	9c af       	std	Y+60, r25	; 0x3c
    1afc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9e af       	std	Y+62, r25	; 0x3e
    1b06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_SendCommand+0x3de>
    1b10:	16 c0       	rjmp	.+44     	; 0x1b3e <LCD_SendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	fe 01       	movw	r30, r28
    1b14:	ff 96       	adiw	r30, 0x3f	; 63
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e af       	std	Y+62, r25	; 0x3e
    1b28:	8d af       	std	Y+61, r24	; 0x3d
    1b2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b2e:	9a af       	std	Y+58, r25	; 0x3a
    1b30:	89 af       	std	Y+57, r24	; 0x39
    1b32:	89 ad       	ldd	r24, Y+57	; 0x39
    1b34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_SendCommand+0x42a>
    1b3a:	9a af       	std	Y+58, r25	; 0x3a
    1b3c:	89 af       	std	Y+57, r24	; 0x39
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|((command & 0xF0)>>4);
	#endif

	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	62 e0       	ldi	r22, 0x02	; 2
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	8d ab       	std	Y+53, r24	; 0x35
    1b52:	9e ab       	std	Y+54, r25	; 0x36
    1b54:	af ab       	std	Y+55, r26	; 0x37
    1b56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	89 ab       	std	Y+49, r24	; 0x31
    1b72:	9a ab       	std	Y+50, r25	; 0x32
    1b74:	ab ab       	std	Y+51, r26	; 0x33
    1b76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b78:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <LCD_SendCommand+0x48e>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	98 ab       	std	Y+48, r25	; 0x30
    1b96:	8f a7       	std	Y+47, r24	; 0x2f
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <LCD_SendCommand+0x50c>
	else if (__tmp > 65535)
    1b9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <LCD_SendCommand+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	98 ab       	std	Y+48, r25	; 0x30
    1bd8:	8f a7       	std	Y+47, r24	; 0x2f
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_SendCommand+0x4ee>
    1bdc:	89 e1       	ldi	r24, 0x19	; 25
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9e a7       	std	Y+46, r25	; 0x2e
    1be2:	8d a7       	std	Y+45, r24	; 0x2d
    1be4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_SendCommand+0x4dc>
    1bec:	9e a7       	std	Y+46, r25	; 0x2e
    1bee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	98 ab       	std	Y+48, r25	; 0x30
    1bf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <LCD_SendCommand+0x4d0>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <LCD_SendCommand+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	69 a9       	ldd	r22, Y+49	; 0x31
    1c06:	7a a9       	ldd	r23, Y+50	; 0x32
    1c08:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	98 ab       	std	Y+48, r25	; 0x30
    1c16:	8f a7       	std	Y+47, r24	; 0x2f
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	9c a7       	std	Y+44, r25	; 0x2c
    1c1e:	8b a7       	std	Y+43, r24	; 0x2b
    1c20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_SendCommand+0x518>
    1c28:	9c a7       	std	Y+44, r25	; 0x2c
    1c2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	62 e0       	ldi	r22, 0x02	; 2
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a0 e8       	ldi	r26, 0x80	; 128
    1c3c:	bf e3       	ldi	r27, 0x3F	; 63
    1c3e:	8f a3       	std	Y+39, r24	; 0x27
    1c40:	98 a7       	std	Y+40, r25	; 0x28
    1c42:	a9 a7       	std	Y+41, r26	; 0x29
    1c44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	6f a1       	ldd	r22, Y+39	; 0x27
    1c48:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a e7       	ldi	r20, 0x7A	; 122
    1c54:	53 e4       	ldi	r21, 0x43	; 67
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	8b a3       	std	Y+35, r24	; 0x23
    1c60:	9c a3       	std	Y+36, r25	; 0x24
    1c62:	ad a3       	std	Y+37, r26	; 0x25
    1c64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c66:	6b a1       	ldd	r22, Y+35	; 0x23
    1c68:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <LCD_SendCommand+0x57c>
		__ticks = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
    1c86:	3f c0       	rjmp	.+126    	; 0x1d06 <LCD_SendCommand+0x5fa>
	else if (__tmp > 65535)
    1c88:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	4c f5       	brge	.+82     	; 0x1cf2 <LCD_SendCommand+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9a a3       	std	Y+34, r25	; 0x22
    1cc6:	89 a3       	std	Y+33, r24	; 0x21
    1cc8:	0f c0       	rjmp	.+30     	; 0x1ce8 <LCD_SendCommand+0x5dc>
    1cca:	89 e1       	ldi	r24, 0x19	; 25
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	98 a3       	std	Y+32, r25	; 0x20
    1cd0:	8f 8f       	std	Y+31, r24	; 0x1f
    1cd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd4:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <LCD_SendCommand+0x5ca>
    1cda:	98 a3       	std	Y+32, r25	; 0x20
    1cdc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cde:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	9a a3       	std	Y+34, r25	; 0x22
    1ce6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cea:	9a a1       	ldd	r25, Y+34	; 0x22
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	69 f7       	brne	.-38     	; 0x1cca <LCD_SendCommand+0x5be>
    1cf0:	14 c0       	rjmp	.+40     	; 0x1d1a <LCD_SendCommand+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9a a3       	std	Y+34, r25	; 0x22
    1d04:	89 a3       	std	Y+33, r24	; 0x21
    1d06:	89 a1       	ldd	r24, Y+33	; 0x21
    1d08:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_SendCommand+0x606>
    1d16:	9e 8f       	std	Y+30, r25	; 0x1e
    1d18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|((command & 0x0F)<<4);
    1d1a:	a5 e3       	ldi	r26, 0x35	; 53
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e5 e3       	ldi	r30, 0x35	; 53
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	28 2f       	mov	r18, r24
    1d26:	2f 70       	andi	r18, 0x0F	; 15
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 59       	subi	r30, 0x9D	; 157
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	82 95       	swap	r24
    1d36:	92 95       	swap	r25
    1d38:	90 7f       	andi	r25, 0xF0	; 240
    1d3a:	98 27       	eor	r25, r24
    1d3c:	80 7f       	andi	r24, 0xF0	; 240
    1d3e:	98 27       	eor	r25, r24
    1d40:	82 2b       	or	r24, r18
    1d42:	8c 93       	st	X, r24
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	89 8f       	std	Y+25, r24	; 0x19
    1d4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d50:	ab 8f       	std	Y+27, r26	; 0x1b
    1d52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	69 8d       	ldd	r22, Y+25	; 0x19
    1d56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	53 e4       	ldi	r21, 0x43	; 67
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8d 8b       	std	Y+21, r24	; 0x15
    1d6e:	9e 8b       	std	Y+22, r25	; 0x16
    1d70:	af 8b       	std	Y+23, r26	; 0x17
    1d72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d74:	6d 89       	ldd	r22, Y+21	; 0x15
    1d76:	7e 89       	ldd	r23, Y+22	; 0x16
    1d78:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_SendCommand+0x68a>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <LCD_SendCommand+0x708>
	else if (__tmp > 65535)
    1d96:	6d 89       	ldd	r22, Y+21	; 0x15
    1d98:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <LCD_SendCommand+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	69 8d       	ldd	r22, Y+25	; 0x19
    1db0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9c 8b       	std	Y+20, r25	; 0x14
    1dd4:	8b 8b       	std	Y+19, r24	; 0x13
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <LCD_SendCommand+0x6ea>
    1dd8:	89 e1       	ldi	r24, 0x19	; 25
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9a 8b       	std	Y+18, r25	; 0x12
    1dde:	89 8b       	std	Y+17, r24	; 0x11
    1de0:	89 89       	ldd	r24, Y+17	; 0x11
    1de2:	9a 89       	ldd	r25, Y+18	; 0x12
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_SendCommand+0x6d8>
    1de8:	9a 8b       	std	Y+18, r25	; 0x12
    1dea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	8b 89       	ldd	r24, Y+19	; 0x13
    1dee:	9c 89       	ldd	r25, Y+20	; 0x14
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	8b 89       	ldd	r24, Y+19	; 0x13
    1df8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <LCD_SendCommand+0x6cc>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <LCD_SendCommand+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	98 8b       	std	Y+16, r25	; 0x10
    1e1a:	8f 87       	std	Y+15, r24	; 0x0f
    1e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1e:	98 89       	ldd	r25, Y+16	; 0x10
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_SendCommand+0x714>
    1e24:	98 8b       	std	Y+16, r25	; 0x10
    1e26:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|(command & 0x0F);
	#endif
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	62 e0       	ldi	r22, 0x02	; 2
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	a0 e8       	ldi	r26, 0x80	; 128
    1e38:	bf e3       	ldi	r27, 0x3F	; 63
    1e3a:	8b 87       	std	Y+11, r24	; 0x0b
    1e3c:	9c 87       	std	Y+12, r25	; 0x0c
    1e3e:	ad 87       	std	Y+13, r26	; 0x0d
    1e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4a e7       	ldi	r20, 0x7A	; 122
    1e50:	53 e4       	ldi	r21, 0x43	; 67
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8f 83       	std	Y+7, r24	; 0x07
    1e5c:	98 87       	std	Y+8, r25	; 0x08
    1e5e:	a9 87       	std	Y+9, r26	; 0x09
    1e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e8       	ldi	r20, 0x80	; 128
    1e70:	5f e3       	ldi	r21, 0x3F	; 63
    1e72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e76:	88 23       	and	r24, r24
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <LCD_SendCommand+0x778>
		__ticks = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	3f c0       	rjmp	.+126    	; 0x1f02 <LCD_SendCommand+0x7f6>
	else if (__tmp > 65535)
    1e84:	6f 81       	ldd	r22, Y+7	; 0x07
    1e86:	78 85       	ldd	r23, Y+8	; 0x08
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	3f ef       	ldi	r19, 0xFF	; 255
    1e90:	4f e7       	ldi	r20, 0x7F	; 127
    1e92:	57 e4       	ldi	r21, 0x47	; 71
    1e94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e98:	18 16       	cp	r1, r24
    1e9a:	4c f5       	brge	.+82     	; 0x1eee <LCD_SendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	0f c0       	rjmp	.+30     	; 0x1ee4 <LCD_SendCommand+0x7d8>
    1ec6:	89 e1       	ldi	r24, 0x19	; 25
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <LCD_SendCommand+0x7c6>
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	69 f7       	brne	.-38     	; 0x1ec6 <LCD_SendCommand+0x7ba>
    1eec:	14 c0       	rjmp	.+40     	; 0x1f16 <LCD_SendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_SendCommand+0x802>
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT=command;
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
	_delay_ms(1);
	#endif
}
    1f16:	cd 59       	subi	r28, 0x9D	; 157
    1f18:	df 4f       	sbci	r29, 0xFF	; 255
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	08 95       	ret

00001f2e <LCD_SendCharacter>:
void LCD_SendCharacter(uint8 data)
{
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	c3 56       	subi	r28, 0x63	; 99
    1f3c:	d0 40       	sbci	r29, 0x00	; 0
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ed 59       	subi	r30, 0x9D	; 157
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 83       	st	Z, r24
	set_pin_value(PORTC_reg, RS, HIGH);
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
	set_pin_value(PORTC_reg, RW, LOW);
    1f5a:	82 e0       	ldi	r24, 0x02	; 2
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    1f64:	fe 01       	movw	r30, r28
    1f66:	e1 5a       	subi	r30, 0xA1	; 161
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e8       	ldi	r26, 0x80	; 128
    1f70:	bf e3       	ldi	r27, 0x3F	; 63
    1f72:	80 83       	st	Z, r24
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	a2 83       	std	Z+2, r26	; 0x02
    1f78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	8e 01       	movw	r16, r28
    1f7c:	05 5a       	subi	r16, 0xA5	; 165
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	fe 01       	movw	r30, r28
    1f82:	e1 5a       	subi	r30, 0xA1	; 161
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	4a e7       	ldi	r20, 0x7A	; 122
    1f94:	53 e4       	ldi	r21, 0x43	; 67
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	80 83       	st	Z, r24
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	a2 83       	std	Z+2, r26	; 0x02
    1fa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e5 5a       	subi	r30, 0xA5	; 165
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	44 f4       	brge	.+16     	; 0x1fd6 <LCD_SendCharacter+0xa8>
		__ticks = 1;
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 5a       	subi	r30, 0xA7	; 167
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	64 c0       	rjmp	.+200    	; 0x209e <LCD_SendCharacter+0x170>
	else if (__tmp > 65535)
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e5 5a       	subi	r30, 0xA5	; 165
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	3f ef       	ldi	r19, 0xFF	; 255
    1fe8:	4f e7       	ldi	r20, 0x7F	; 127
    1fea:	57 e4       	ldi	r21, 0x47	; 71
    1fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	0c f0       	brlt	.+2      	; 0x1ff6 <LCD_SendCharacter+0xc8>
    1ff4:	43 c0       	rjmp	.+134    	; 0x207c <LCD_SendCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e1 5a       	subi	r30, 0xA1	; 161
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8e 01       	movw	r16, r28
    2016:	07 5a       	subi	r16, 0xA7	; 167
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	f8 01       	movw	r30, r16
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	80 83       	st	Z, r24
    202c:	1f c0       	rjmp	.+62     	; 0x206c <LCD_SendCharacter+0x13e>
    202e:	fe 01       	movw	r30, r28
    2030:	e9 5a       	subi	r30, 0xA9	; 169
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	89 e1       	ldi	r24, 0x19	; 25
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
    203c:	fe 01       	movw	r30, r28
    203e:	e9 5a       	subi	r30, 0xA9	; 169
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_SendCharacter+0x118>
    204a:	fe 01       	movw	r30, r28
    204c:	e9 5a       	subi	r30, 0xA9	; 169
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	de 01       	movw	r26, r28
    2056:	a7 5a       	subi	r26, 0xA7	; 167
    2058:	bf 4f       	sbci	r27, 0xFF	; 255
    205a:	fe 01       	movw	r30, r28
    205c:	e7 5a       	subi	r30, 0xA7	; 167
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	11 96       	adiw	r26, 0x01	; 1
    2068:	9c 93       	st	X, r25
    206a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	fe 01       	movw	r30, r28
    206e:	e7 5a       	subi	r30, 0xA7	; 167
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	d1 f6       	brne	.-76     	; 0x202e <LCD_SendCharacter+0x100>
    207a:	27 c0       	rjmp	.+78     	; 0x20ca <LCD_SendCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	8e 01       	movw	r16, r28
    207e:	07 5a       	subi	r16, 0xA7	; 167
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	e5 5a       	subi	r30, 0xA5	; 165
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	f8 01       	movw	r30, r16
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	de 01       	movw	r26, r28
    20a0:	ab 5a       	subi	r26, 0xAB	; 171
    20a2:	bf 4f       	sbci	r27, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	e7 5a       	subi	r30, 0xA7	; 167
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
    20ae:	8d 93       	st	X+, r24
    20b0:	9c 93       	st	X, r25
    20b2:	fe 01       	movw	r30, r28
    20b4:	eb 5a       	subi	r30, 0xAB	; 171
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_SendCharacter+0x18e>
    20c0:	fe 01       	movw	r30, r28
    20c2:	eb 5a       	subi	r30, 0xAB	; 171
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    20d4:	fe 01       	movw	r30, r28
    20d6:	ef 5a       	subi	r30, 0xAF	; 175
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	bf e3       	ldi	r27, 0x3F	; 63
    20e2:	80 83       	st	Z, r24
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	a2 83       	std	Z+2, r26	; 0x02
    20e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	8e 01       	movw	r16, r28
    20ec:	03 5b       	subi	r16, 0xB3	; 179
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	ef 5a       	subi	r30, 0xAF	; 175
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a e7       	ldi	r20, 0x7A	; 122
    2104:	53 e4       	ldi	r21, 0x43	; 67
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	80 83       	st	Z, r24
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	a2 83       	std	Z+2, r26	; 0x02
    2116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2118:	fe 01       	movw	r30, r28
    211a:	e3 5b       	subi	r30, 0xB3	; 179
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	44 f4       	brge	.+16     	; 0x2146 <LCD_SendCharacter+0x218>
		__ticks = 1;
    2136:	fe 01       	movw	r30, r28
    2138:	e5 5b       	subi	r30, 0xB5	; 181
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	64 c0       	rjmp	.+200    	; 0x220e <LCD_SendCharacter+0x2e0>
	else if (__tmp > 65535)
    2146:	fe 01       	movw	r30, r28
    2148:	e3 5b       	subi	r30, 0xB3	; 179
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	0c f0       	brlt	.+2      	; 0x2166 <LCD_SendCharacter+0x238>
    2164:	43 c0       	rjmp	.+134    	; 0x21ec <LCD_SendCharacter+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	fe 01       	movw	r30, r28
    2168:	ef 5a       	subi	r30, 0xAF	; 175
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8e 01       	movw	r16, r28
    2186:	05 5b       	subi	r16, 0xB5	; 181
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	1f c0       	rjmp	.+62     	; 0x21dc <LCD_SendCharacter+0x2ae>
    219e:	fe 01       	movw	r30, r28
    21a0:	e7 5b       	subi	r30, 0xB7	; 183
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	89 e1       	ldi	r24, 0x19	; 25
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	fe 01       	movw	r30, r28
    21ae:	e7 5b       	subi	r30, 0xB7	; 183
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_SendCharacter+0x288>
    21ba:	fe 01       	movw	r30, r28
    21bc:	e7 5b       	subi	r30, 0xB7	; 183
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	de 01       	movw	r26, r28
    21c6:	a5 5b       	subi	r26, 0xB5	; 181
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	e5 5b       	subi	r30, 0xB5	; 181
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	11 96       	adiw	r26, 0x01	; 1
    21d8:	9c 93       	st	X, r25
    21da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	fe 01       	movw	r30, r28
    21de:	e5 5b       	subi	r30, 0xB5	; 181
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d1 f6       	brne	.-76     	; 0x219e <LCD_SendCharacter+0x270>
    21ea:	27 c0       	rjmp	.+78     	; 0x223a <LCD_SendCharacter+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	8e 01       	movw	r16, r28
    21ee:	05 5b       	subi	r16, 0xB5	; 181
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e3 5b       	subi	r30, 0xB3	; 179
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	de 01       	movw	r26, r28
    2210:	a9 5b       	subi	r26, 0xB9	; 185
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e5 5b       	subi	r30, 0xB5	; 181
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	8d 93       	st	X+, r24
    2220:	9c 93       	st	X, r25
    2222:	fe 01       	movw	r30, r28
    2224:	e9 5b       	subi	r30, 0xB9	; 185
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	91 81       	ldd	r25, Z+1	; 0x01
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_SendCharacter+0x2fe>
    2230:	fe 01       	movw	r30, r28
    2232:	e9 5b       	subi	r30, 0xB9	; 185
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
	_delay_ms(1);

	#if(LCD_BIT_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|(data & 0xF0);
    223a:	a5 e3       	ldi	r26, 0x35	; 53
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e5 e3       	ldi	r30, 0x35	; 53
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	98 2f       	mov	r25, r24
    2246:	9f 70       	andi	r25, 0x0F	; 15
    2248:	fe 01       	movw	r30, r28
    224a:	ed 59       	subi	r30, 0x9D	; 157
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	80 7f       	andi	r24, 0xF0	; 240
    2252:	89 2b       	or	r24, r25
    2254:	8c 93       	st	X, r24
    2256:	fe 01       	movw	r30, r28
    2258:	ed 5b       	subi	r30, 0xBD	; 189
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	80 83       	st	Z, r24
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	a2 83       	std	Z+2, r26	; 0x02
    226a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	8e 01       	movw	r16, r28
    226e:	01 5c       	subi	r16, 0xC1	; 193
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	fe 01       	movw	r30, r28
    2274:	ed 5b       	subi	r30, 0xBD	; 189
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a e7       	ldi	r20, 0x7A	; 122
    2286:	53 e4       	ldi	r21, 0x43	; 67
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	f8 01       	movw	r30, r16
    2292:	80 83       	st	Z, r24
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	a2 83       	std	Z+2, r26	; 0x02
    2298:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    229a:	fe 01       	movw	r30, r28
    229c:	ff 96       	adiw	r30, 0x3f	; 63
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <LCD_SendCharacter+0x392>
		__ticks = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e af       	std	Y+62, r25	; 0x3e
    22bc:	8d af       	std	Y+61, r24	; 0x3d
    22be:	46 c0       	rjmp	.+140    	; 0x234c <LCD_SendCharacter+0x41e>
	else if (__tmp > 65535)
    22c0:	fe 01       	movw	r30, r28
    22c2:	ff 96       	adiw	r30, 0x3f	; 63
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	82 81       	ldd	r24, Z+2	; 0x02
    22ca:	93 81       	ldd	r25, Z+3	; 0x03
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	64 f5       	brge	.+88     	; 0x2334 <LCD_SendCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	fe 01       	movw	r30, r28
    22de:	ed 5b       	subi	r30, 0xBD	; 189
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9e af       	std	Y+62, r25	; 0x3e
    2308:	8d af       	std	Y+61, r24	; 0x3d
    230a:	0f c0       	rjmp	.+30     	; 0x232a <LCD_SendCharacter+0x3fc>
    230c:	89 e1       	ldi	r24, 0x19	; 25
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9c af       	std	Y+60, r25	; 0x3c
    2312:	8b af       	std	Y+59, r24	; 0x3b
    2314:	8b ad       	ldd	r24, Y+59	; 0x3b
    2316:	9c ad       	ldd	r25, Y+60	; 0x3c
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_SendCharacter+0x3ea>
    231c:	9c af       	std	Y+60, r25	; 0x3c
    231e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	8d ad       	ldd	r24, Y+61	; 0x3d
    2322:	9e ad       	ldd	r25, Y+62	; 0x3e
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	9e af       	std	Y+62, r25	; 0x3e
    2328:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232a:	8d ad       	ldd	r24, Y+61	; 0x3d
    232c:	9e ad       	ldd	r25, Y+62	; 0x3e
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	69 f7       	brne	.-38     	; 0x230c <LCD_SendCharacter+0x3de>
    2332:	16 c0       	rjmp	.+44     	; 0x2360 <LCD_SendCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2334:	fe 01       	movw	r30, r28
    2336:	ff 96       	adiw	r30, 0x3f	; 63
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e af       	std	Y+62, r25	; 0x3e
    234a:	8d af       	std	Y+61, r24	; 0x3d
    234c:	8d ad       	ldd	r24, Y+61	; 0x3d
    234e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2350:	9a af       	std	Y+58, r25	; 0x3a
    2352:	89 af       	std	Y+57, r24	; 0x39
    2354:	89 ad       	ldd	r24, Y+57	; 0x39
    2356:	9a ad       	ldd	r25, Y+58	; 0x3a
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_SendCharacter+0x42a>
    235c:	9a af       	std	Y+58, r25	; 0x3a
    235e:	89 af       	std	Y+57, r24	; 0x39
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|((data & 0xF0)>>4);
	#endif

	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a0 e8       	ldi	r26, 0x80	; 128
    2370:	bf e3       	ldi	r27, 0x3F	; 63
    2372:	8d ab       	std	Y+53, r24	; 0x35
    2374:	9e ab       	std	Y+54, r25	; 0x36
    2376:	af ab       	std	Y+55, r26	; 0x37
    2378:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6d a9       	ldd	r22, Y+53	; 0x35
    237c:	7e a9       	ldd	r23, Y+54	; 0x36
    237e:	8f a9       	ldd	r24, Y+55	; 0x37
    2380:	98 ad       	ldd	r25, Y+56	; 0x38
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4a e7       	ldi	r20, 0x7A	; 122
    2388:	53 e4       	ldi	r21, 0x43	; 67
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	89 ab       	std	Y+49, r24	; 0x31
    2394:	9a ab       	std	Y+50, r25	; 0x32
    2396:	ab ab       	std	Y+51, r26	; 0x33
    2398:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    239a:	69 a9       	ldd	r22, Y+49	; 0x31
    239c:	7a a9       	ldd	r23, Y+50	; 0x32
    239e:	8b a9       	ldd	r24, Y+51	; 0x33
    23a0:	9c a9       	ldd	r25, Y+52	; 0x34
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <LCD_SendCharacter+0x48e>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	98 ab       	std	Y+48, r25	; 0x30
    23b8:	8f a7       	std	Y+47, r24	; 0x2f
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <LCD_SendCharacter+0x50c>
	else if (__tmp > 65535)
    23bc:	69 a9       	ldd	r22, Y+49	; 0x31
    23be:	7a a9       	ldd	r23, Y+50	; 0x32
    23c0:	8b a9       	ldd	r24, Y+51	; 0x33
    23c2:	9c a9       	ldd	r25, Y+52	; 0x34
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <LCD_SendCharacter+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6d a9       	ldd	r22, Y+53	; 0x35
    23d6:	7e a9       	ldd	r23, Y+54	; 0x36
    23d8:	8f a9       	ldd	r24, Y+55	; 0x37
    23da:	98 ad       	ldd	r25, Y+56	; 0x38
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	98 ab       	std	Y+48, r25	; 0x30
    23fa:	8f a7       	std	Y+47, r24	; 0x2f
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <LCD_SendCharacter+0x4ee>
    23fe:	89 e1       	ldi	r24, 0x19	; 25
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9e a7       	std	Y+46, r25	; 0x2e
    2404:	8d a7       	std	Y+45, r24	; 0x2d
    2406:	8d a5       	ldd	r24, Y+45	; 0x2d
    2408:	9e a5       	ldd	r25, Y+46	; 0x2e
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_SendCharacter+0x4dc>
    240e:	9e a7       	std	Y+46, r25	; 0x2e
    2410:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	8f a5       	ldd	r24, Y+47	; 0x2f
    2414:	98 a9       	ldd	r25, Y+48	; 0x30
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	98 ab       	std	Y+48, r25	; 0x30
    241a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	8f a5       	ldd	r24, Y+47	; 0x2f
    241e:	98 a9       	ldd	r25, Y+48	; 0x30
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <LCD_SendCharacter+0x4d0>
    2424:	14 c0       	rjmp	.+40     	; 0x244e <LCD_SendCharacter+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	69 a9       	ldd	r22, Y+49	; 0x31
    2428:	7a a9       	ldd	r23, Y+50	; 0x32
    242a:	8b a9       	ldd	r24, Y+51	; 0x33
    242c:	9c a9       	ldd	r25, Y+52	; 0x34
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	98 ab       	std	Y+48, r25	; 0x30
    2438:	8f a7       	std	Y+47, r24	; 0x2f
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	9c a7       	std	Y+44, r25	; 0x2c
    2440:	8b a7       	std	Y+43, r24	; 0x2b
    2442:	8b a5       	ldd	r24, Y+43	; 0x2b
    2444:	9c a5       	ldd	r25, Y+44	; 0x2c
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_SendCharacter+0x518>
    244a:	9c a7       	std	Y+44, r25	; 0x2c
    244c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e8       	ldi	r26, 0x80	; 128
    245e:	bf e3       	ldi	r27, 0x3F	; 63
    2460:	8f a3       	std	Y+39, r24	; 0x27
    2462:	98 a7       	std	Y+40, r25	; 0x28
    2464:	a9 a7       	std	Y+41, r26	; 0x29
    2466:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6f a1       	ldd	r22, Y+39	; 0x27
    246a:	78 a5       	ldd	r23, Y+40	; 0x28
    246c:	89 a5       	ldd	r24, Y+41	; 0x29
    246e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a e7       	ldi	r20, 0x7A	; 122
    2476:	53 e4       	ldi	r21, 0x43	; 67
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	8b a3       	std	Y+35, r24	; 0x23
    2482:	9c a3       	std	Y+36, r25	; 0x24
    2484:	ad a3       	std	Y+37, r26	; 0x25
    2486:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2488:	6b a1       	ldd	r22, Y+35	; 0x23
    248a:	7c a1       	ldd	r23, Y+36	; 0x24
    248c:	8d a1       	ldd	r24, Y+37	; 0x25
    248e:	9e a1       	ldd	r25, Y+38	; 0x26
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_SendCharacter+0x57c>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9a a3       	std	Y+34, r25	; 0x22
    24a6:	89 a3       	std	Y+33, r24	; 0x21
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_SendCharacter+0x5fa>
	else if (__tmp > 65535)
    24aa:	6b a1       	ldd	r22, Y+35	; 0x23
    24ac:	7c a1       	ldd	r23, Y+36	; 0x24
    24ae:	8d a1       	ldd	r24, Y+37	; 0x25
    24b0:	9e a1       	ldd	r25, Y+38	; 0x26
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_SendCharacter+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6f a1       	ldd	r22, Y+39	; 0x27
    24c4:	78 a5       	ldd	r23, Y+40	; 0x28
    24c6:	89 a5       	ldd	r24, Y+41	; 0x29
    24c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9a a3       	std	Y+34, r25	; 0x22
    24e8:	89 a3       	std	Y+33, r24	; 0x21
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_SendCharacter+0x5dc>
    24ec:	89 e1       	ldi	r24, 0x19	; 25
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	98 a3       	std	Y+32, r25	; 0x20
    24f2:	8f 8f       	std	Y+31, r24	; 0x1f
    24f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24f6:	98 a1       	ldd	r25, Y+32	; 0x20
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_SendCharacter+0x5ca>
    24fc:	98 a3       	std	Y+32, r25	; 0x20
    24fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	89 a1       	ldd	r24, Y+33	; 0x21
    2502:	9a a1       	ldd	r25, Y+34	; 0x22
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	9a a3       	std	Y+34, r25	; 0x22
    2508:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	89 a1       	ldd	r24, Y+33	; 0x21
    250c:	9a a1       	ldd	r25, Y+34	; 0x22
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_SendCharacter+0x5be>
    2512:	14 c0       	rjmp	.+40     	; 0x253c <LCD_SendCharacter+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	6b a1       	ldd	r22, Y+35	; 0x23
    2516:	7c a1       	ldd	r23, Y+36	; 0x24
    2518:	8d a1       	ldd	r24, Y+37	; 0x25
    251a:	9e a1       	ldd	r25, Y+38	; 0x26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9a a3       	std	Y+34, r25	; 0x22
    2526:	89 a3       	std	Y+33, r24	; 0x21
    2528:	89 a1       	ldd	r24, Y+33	; 0x21
    252a:	9a a1       	ldd	r25, Y+34	; 0x22
    252c:	9e 8f       	std	Y+30, r25	; 0x1e
    252e:	8d 8f       	std	Y+29, r24	; 0x1d
    2530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2532:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_SendCharacter+0x606>
    2538:	9e 8f       	std	Y+30, r25	; 0x1e
    253a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|((data & 0x0F)<<4);
    253c:	a5 e3       	ldi	r26, 0x35	; 53
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e5 e3       	ldi	r30, 0x35	; 53
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	28 2f       	mov	r18, r24
    2548:	2f 70       	andi	r18, 0x0F	; 15
    254a:	fe 01       	movw	r30, r28
    254c:	ed 59       	subi	r30, 0x9D	; 157
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	82 95       	swap	r24
    2558:	92 95       	swap	r25
    255a:	90 7f       	andi	r25, 0xF0	; 240
    255c:	98 27       	eor	r25, r24
    255e:	80 7f       	andi	r24, 0xF0	; 240
    2560:	98 27       	eor	r25, r24
    2562:	82 2b       	or	r24, r18
    2564:	8c 93       	st	X, r24
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e8       	ldi	r26, 0x80	; 128
    256c:	bf e3       	ldi	r27, 0x3F	; 63
    256e:	89 8f       	std	Y+25, r24	; 0x19
    2570:	9a 8f       	std	Y+26, r25	; 0x1a
    2572:	ab 8f       	std	Y+27, r26	; 0x1b
    2574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	69 8d       	ldd	r22, Y+25	; 0x19
    2578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    257a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a e7       	ldi	r20, 0x7A	; 122
    2584:	53 e4       	ldi	r21, 0x43	; 67
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8d 8b       	std	Y+21, r24	; 0x15
    2590:	9e 8b       	std	Y+22, r25	; 0x16
    2592:	af 8b       	std	Y+23, r26	; 0x17
    2594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2596:	6d 89       	ldd	r22, Y+21	; 0x15
    2598:	7e 89       	ldd	r23, Y+22	; 0x16
    259a:	8f 89       	ldd	r24, Y+23	; 0x17
    259c:	98 8d       	ldd	r25, Y+24	; 0x18
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <LCD_SendCharacter+0x68a>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <LCD_SendCharacter+0x708>
	else if (__tmp > 65535)
    25b8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ba:	7e 89       	ldd	r23, Y+22	; 0x16
    25bc:	8f 89       	ldd	r24, Y+23	; 0x17
    25be:	98 8d       	ldd	r25, Y+24	; 0x18
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <LCD_SendCharacter+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	69 8d       	ldd	r22, Y+25	; 0x19
    25d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <LCD_SendCharacter+0x6ea>
    25fa:	89 e1       	ldi	r24, 0x19	; 25
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9a 8b       	std	Y+18, r25	; 0x12
    2600:	89 8b       	std	Y+17, r24	; 0x11
    2602:	89 89       	ldd	r24, Y+17	; 0x11
    2604:	9a 89       	ldd	r25, Y+18	; 0x12
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_SendCharacter+0x6d8>
    260a:	9a 8b       	std	Y+18, r25	; 0x12
    260c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9c 8b       	std	Y+20, r25	; 0x14
    2616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <LCD_SendCharacter+0x6cc>
    2620:	14 c0       	rjmp	.+40     	; 0x264a <LCD_SendCharacter+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6d 89       	ldd	r22, Y+21	; 0x15
    2624:	7e 89       	ldd	r23, Y+22	; 0x16
    2626:	8f 89       	ldd	r24, Y+23	; 0x17
    2628:	98 8d       	ldd	r25, Y+24	; 0x18
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	8b 89       	ldd	r24, Y+19	; 0x13
    2638:	9c 89       	ldd	r25, Y+20	; 0x14
    263a:	98 8b       	std	Y+16, r25	; 0x10
    263c:	8f 87       	std	Y+15, r24	; 0x0f
    263e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCD_SendCharacter+0x714>
    2646:	98 8b       	std	Y+16, r25	; 0x10
    2648:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|(data & 0x0F);
	#endif
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	62 e0       	ldi	r22, 0x02	; 2
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 6d 08 	call	0x10da	; 0x10da <set_pin_value>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a0 e8       	ldi	r26, 0x80	; 128
    265a:	bf e3       	ldi	r27, 0x3F	; 63
    265c:	8b 87       	std	Y+11, r24	; 0x0b
    265e:	9c 87       	std	Y+12, r25	; 0x0c
    2660:	ad 87       	std	Y+13, r26	; 0x0d
    2662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2664:	6b 85       	ldd	r22, Y+11	; 0x0b
    2666:	7c 85       	ldd	r23, Y+12	; 0x0c
    2668:	8d 85       	ldd	r24, Y+13	; 0x0d
    266a:	9e 85       	ldd	r25, Y+14	; 0x0e
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4a e7       	ldi	r20, 0x7A	; 122
    2672:	53 e4       	ldi	r21, 0x43	; 67
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	8f 83       	std	Y+7, r24	; 0x07
    267e:	98 87       	std	Y+8, r25	; 0x08
    2680:	a9 87       	std	Y+9, r26	; 0x09
    2682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	2c f4       	brge	.+10     	; 0x26a6 <LCD_SendCharacter+0x778>
		__ticks = 1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	3f c0       	rjmp	.+126    	; 0x2724 <LCD_SendCharacter+0x7f6>
	else if (__tmp > 65535)
    26a6:	6f 81       	ldd	r22, Y+7	; 0x07
    26a8:	78 85       	ldd	r23, Y+8	; 0x08
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	3f ef       	ldi	r19, 0xFF	; 255
    26b2:	4f e7       	ldi	r20, 0x7F	; 127
    26b4:	57 e4       	ldi	r21, 0x47	; 71
    26b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ba:	18 16       	cp	r1, r24
    26bc:	4c f5       	brge	.+82     	; 0x2710 <LCD_SendCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26be:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e2       	ldi	r20, 0x20	; 32
    26cc:	51 e4       	ldi	r21, 0x41	; 65
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	0f c0       	rjmp	.+30     	; 0x2706 <LCD_SendCharacter+0x7d8>
    26e8:	89 e1       	ldi	r24, 0x19	; 25
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	9c 81       	ldd	r25, Y+4	; 0x04
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <LCD_SendCharacter+0x7c6>
    26f8:	9c 83       	std	Y+4, r25	; 0x04
    26fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	69 f7       	brne	.-38     	; 0x26e8 <LCD_SendCharacter+0x7ba>
    270e:	14 c0       	rjmp	.+40     	; 0x2738 <LCD_SendCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2710:	6f 81       	ldd	r22, Y+7	; 0x07
    2712:	78 85       	ldd	r23, Y+8	; 0x08
    2714:	89 85       	ldd	r24, Y+9	; 0x09
    2716:	9a 85       	ldd	r25, Y+10	; 0x0a
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	8d 81       	ldd	r24, Y+5	; 0x05
    2726:	9e 81       	ldd	r25, Y+6	; 0x06
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	9a 81       	ldd	r25, Y+2	; 0x02
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_SendCharacter+0x802>
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
	_delay_ms(1);
	#endif

}
    2738:	cd 59       	subi	r28, 0x9D	; 157
    273a:	df 4f       	sbci	r29, 0xFF	; 255
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	1f 91       	pop	r17
    274c:	0f 91       	pop	r16
    274e:	08 95       	ret

00002750 <LCD_DisplayString>:
void LCD_DisplayString(uint8* str)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <LCD_DisplayString+0x6>
    2756:	0f 92       	push	r0
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	9b 83       	std	Y+3, r25	; 0x03
    275e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2760:	19 82       	std	Y+1, r1	; 0x01
    2762:	0e c0       	rjmp	.+28     	; 0x2780 <LCD_DisplayString+0x30>
	while(str[i]!='\0')
	{
		LCD_SendCharacter(str[i]);
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	fc 01       	movw	r30, r24
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	80 81       	ld	r24, Z
    2776:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_SendCharacter>
		i++;
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_DisplayString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	fc 01       	movw	r30, r24
    278c:	e2 0f       	add	r30, r18
    278e:	f3 1f       	adc	r31, r19
    2790:	80 81       	ld	r24, Z
    2792:	88 23       	and	r24, r24
    2794:	39 f7       	brne	.-50     	; 0x2764 <LCD_DisplayString+0x14>
	{
		LCD_SendCharacter(str[i]);
		i++;
	}

}
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <GOTO_ROW_COL>:
void GOTO_ROW_COL(uint8 row ,uint8 col)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <GOTO_ROW_COL+0x6>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <GOTO_ROW_COL+0x8>
    27aa:	0f 92       	push	r0
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	8a 83       	std	Y+2, r24	; 0x02
    27b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	3d 83       	std	Y+5, r19	; 0x05
    27bc:	2c 83       	std	Y+4, r18	; 0x04
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	9d 81       	ldd	r25, Y+5	; 0x05
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	31 f0       	breq	.+12     	; 0x27d2 <GOTO_ROW_COL+0x30>
    27c6:	2c 81       	ldd	r18, Y+4	; 0x04
    27c8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ca:	21 30       	cpi	r18, 0x01	; 1
    27cc:	31 05       	cpc	r19, r1
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <GOTO_ROW_COL+0x36>
    27d0:	06 c0       	rjmp	.+12     	; 0x27de <GOTO_ROW_COL+0x3c>
	{
	case 0:
		address=col;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	03 c0       	rjmp	.+6      	; 0x27de <GOTO_ROW_COL+0x3c>
		break;
	case 1:
		address=col+0x40;
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	80 5c       	subi	r24, 0xC0	; 192
    27dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_SendCommand(address | SET_CURSOR_LOCATION);
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	80 68       	ori	r24, 0x80	; 128
    27e2:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <Display_string_row_col>:

void Display_string_row_col(uint8 row,uint8 col,uint8*str)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <Display_string_row_col+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <Display_string_row_col+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	6a 83       	std	Y+2, r22	; 0x02
    2806:	5c 83       	std	Y+4, r21	; 0x04
    2808:	4b 83       	std	Y+3, r20	; 0x03
	GOTO_ROW_COL(row,col);
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	6a 81       	ldd	r22, Y+2	; 0x02
    280e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <GOTO_ROW_COL>
	LCD_DisplayString(str);
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_DisplayString>
}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <LCD_integer_To_String>:
void LCD_integer_To_String(int data)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	62 97       	sbiw	r28, 0x12	; 18
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	9a 8b       	std	Y+18, r25	; 0x12
    283e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2840:	89 89       	ldd	r24, Y+17	; 0x11
    2842:	9a 89       	ldd	r25, Y+18	; 0x12
    2844:	9e 01       	movw	r18, r28
    2846:	2f 5f       	subi	r18, 0xFF	; 255
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	b9 01       	movw	r22, r18
    284c:	4a e0       	ldi	r20, 0x0A	; 10
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <itoa>
	LCD_DisplayString(buff);
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_DisplayString>
}
    285c:	62 96       	adiw	r28, 0x12	; 18
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <LCD_CLEAR>:
void LCD_CLEAR()
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_DISPLAY);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
}
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <main>:
#define OPENED_DOOR '+'

uint8 set_pass_flag=0;

void main()
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	c0 56       	subi	r28, 0x60	; 96
    288c:	d0 40       	sbci	r29, 0x00	; 0
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
    2898:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <LCD_Init>
	uart_Init();
    289c:	0e 94 a3 05 	call	0xb46	; 0xb46 <uart_Init>
	/*Display_string_row_col(0, 0, "1-lock/unlock");
	Display_string_row_col(1, 0, "2-change pass");
	uart_sendString(default_pass);*/
	while(1)
	{
		if(!set_pass_flag)
    28a0:	80 91 92 00 	lds	r24, 0x0092
    28a4:	88 23       	and	r24, r24
    28a6:	e1 f7       	brne	.-8      	; 0x28a0 <main+0x1e>
		{

		 uart_sendByte(SET_PASS);
    28a8:	83 e2       	ldi	r24, 0x23	; 35
    28aa:	0e 94 bf 05 	call	0xb7e	; 0xb7e <uart_sendByte>
		 uint8 key,result;
		 do{
			Display_string_row_col(0, 0, "Enter password");//default password
    28ae:	20 e6       	ldi	r18, 0x60	; 96
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	a9 01       	movw	r20, r18
    28b8:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Display_string_row_col>
			GOTO_ROW_COL(1, 0);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <GOTO_ROW_COL>
			LCD_SendCommand(DISPLAY_ON_CURSOR_BLINK);
    28c4:	8f e0       	ldi	r24, 0x0F	; 15
    28c6:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
			uint8 i;
			for(i=0;i<5;i++)
    28ca:	1c a6       	std	Y+44, r1	; 0x2c
    28cc:	a7 c0       	rjmp	.+334    	; 0x2a1c <main+0x19a>
			{
				key=get_key_pressed();
    28ce:	0e 94 e6 09 	call	0x13cc	; 0x13cc <get_key_pressed>
    28d2:	8e a7       	std	Y+46, r24	; 0x2e
				if(key>=0 && key<=9)
    28d4:	8e a5       	ldd	r24, Y+46	; 0x2e
    28d6:	8a 30       	cpi	r24, 0x0A	; 10
    28d8:	80 f4       	brcc	.+32     	; 0x28fa <main+0x78>
				{
					default_pass[i]=key+'0';
    28da:	8c a5       	ldd	r24, Y+44	; 0x2c
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8e a5       	ldd	r24, Y+46	; 0x2e
    28e2:	48 2f       	mov	r20, r24
    28e4:	40 5d       	subi	r20, 0xD0	; 208
    28e6:	ce 01       	movw	r24, r28
    28e8:	8f 96       	adiw	r24, 0x2f	; 47
    28ea:	fc 01       	movw	r30, r24
    28ec:	e2 0f       	add	r30, r18
    28ee:	f3 1f       	adc	r31, r19
    28f0:	40 83       	st	Z, r20
					LCD_SendCharacter('*');
    28f2:	8a e2       	ldi	r24, 0x2A	; 42
    28f4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_SendCharacter>
    28f8:	1c c0       	rjmp	.+56     	; 0x2932 <main+0xb0>
				}
				else
				{
					default_pass[i]='#';
    28fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	ce 01       	movw	r24, r28
    2902:	8f 96       	adiw	r24, 0x2f	; 47
    2904:	fc 01       	movw	r30, r24
    2906:	e2 0f       	add	r30, r18
    2908:	f3 1f       	adc	r31, r19
    290a:	83 e2       	ldi	r24, 0x23	; 35
    290c:	80 83       	st	Z, r24
					i++;
    290e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2910:	8f 5f       	subi	r24, 0xFF	; 255
    2912:	8c a7       	std	Y+44, r24	; 0x2c
					default_pass[i]='\0';
    2914:	8c a5       	ldd	r24, Y+44	; 0x2c
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	ce 01       	movw	r24, r28
    291c:	8f 96       	adiw	r24, 0x2f	; 47
    291e:	fc 01       	movw	r30, r24
    2920:	e2 0f       	add	r30, r18
    2922:	f3 1f       	adc	r31, r19
    2924:	10 82       	st	Z, r1
					uart_sendString(default_pass);
    2926:	ce 01       	movw	r24, r28
    2928:	8f 96       	adiw	r24, 0x2f	; 47
    292a:	0e 94 e5 05 	call	0xbca	; 0xbca <uart_sendString>
					LCD_CLEAR();
    292e:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_CLEAR>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	aa ef       	ldi	r26, 0xFA	; 250
    2938:	b3 e4       	ldi	r27, 0x43	; 67
    293a:	8f a3       	std	Y+39, r24	; 0x27
    293c:	98 a7       	std	Y+40, r25	; 0x28
    293e:	a9 a7       	std	Y+41, r26	; 0x29
    2940:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2942:	6f a1       	ldd	r22, Y+39	; 0x27
    2944:	78 a5       	ldd	r23, Y+40	; 0x28
    2946:	89 a5       	ldd	r24, Y+41	; 0x29
    2948:	9a a5       	ldd	r25, Y+42	; 0x2a
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4a e7       	ldi	r20, 0x7A	; 122
    2950:	53 e4       	ldi	r21, 0x43	; 67
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	8b a3       	std	Y+35, r24	; 0x23
    295c:	9c a3       	std	Y+36, r25	; 0x24
    295e:	ad a3       	std	Y+37, r26	; 0x25
    2960:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2962:	6b a1       	ldd	r22, Y+35	; 0x23
    2964:	7c a1       	ldd	r23, Y+36	; 0x24
    2966:	8d a1       	ldd	r24, Y+37	; 0x25
    2968:	9e a1       	ldd	r25, Y+38	; 0x26
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	5f e3       	ldi	r21, 0x3F	; 63
    2972:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2976:	88 23       	and	r24, r24
    2978:	2c f4       	brge	.+10     	; 0x2984 <main+0x102>
		__ticks = 1;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9a a3       	std	Y+34, r25	; 0x22
    2980:	89 a3       	std	Y+33, r24	; 0x21
    2982:	3f c0       	rjmp	.+126    	; 0x2a02 <main+0x180>
	else if (__tmp > 65535)
    2984:	6b a1       	ldd	r22, Y+35	; 0x23
    2986:	7c a1       	ldd	r23, Y+36	; 0x24
    2988:	8d a1       	ldd	r24, Y+37	; 0x25
    298a:	9e a1       	ldd	r25, Y+38	; 0x26
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	4c f5       	brge	.+82     	; 0x29ee <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	6f a1       	ldd	r22, Y+39	; 0x27
    299e:	78 a5       	ldd	r23, Y+40	; 0x28
    29a0:	89 a5       	ldd	r24, Y+41	; 0x29
    29a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9a a3       	std	Y+34, r25	; 0x22
    29c2:	89 a3       	std	Y+33, r24	; 0x21
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <main+0x162>
    29c6:	89 e1       	ldi	r24, 0x19	; 25
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	98 a3       	std	Y+32, r25	; 0x20
    29cc:	8f 8f       	std	Y+31, r24	; 0x1f
    29ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d0:	98 a1       	ldd	r25, Y+32	; 0x20
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <main+0x150>
    29d6:	98 a3       	std	Y+32, r25	; 0x20
    29d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	89 a1       	ldd	r24, Y+33	; 0x21
    29dc:	9a a1       	ldd	r25, Y+34	; 0x22
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9a a3       	std	Y+34, r25	; 0x22
    29e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	89 a1       	ldd	r24, Y+33	; 0x21
    29e6:	9a a1       	ldd	r25, Y+34	; 0x22
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <main+0x144>
    29ec:	14 c0       	rjmp	.+40     	; 0x2a16 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	6b a1       	ldd	r22, Y+35	; 0x23
    29f0:	7c a1       	ldd	r23, Y+36	; 0x24
    29f2:	8d a1       	ldd	r24, Y+37	; 0x25
    29f4:	9e a1       	ldd	r25, Y+38	; 0x26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9a a3       	std	Y+34, r25	; 0x22
    2a00:	89 a3       	std	Y+33, r24	; 0x21
    2a02:	89 a1       	ldd	r24, Y+33	; 0x21
    2a04:	9a a1       	ldd	r25, Y+34	; 0x22
    2a06:	9e 8f       	std	Y+30, r25	; 0x1e
    2a08:	8d 8f       	std	Y+29, r24	; 0x1d
    2a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <main+0x18c>
    2a12:	9e 8f       	std	Y+30, r25	; 0x1e
    2a14:	8d 8f       	std	Y+29, r24	; 0x1d
		 do{
			Display_string_row_col(0, 0, "Enter password");//default password
			GOTO_ROW_COL(1, 0);
			LCD_SendCommand(DISPLAY_ON_CURSOR_BLINK);
			uint8 i;
			for(i=0;i<5;i++)
    2a16:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a18:	8f 5f       	subi	r24, 0xFF	; 255
    2a1a:	8c a7       	std	Y+44, r24	; 0x2c
    2a1c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a1e:	85 30       	cpi	r24, 0x05	; 5
    2a20:	08 f4       	brcc	.+2      	; 0x2a24 <main+0x1a2>
    2a22:	55 cf       	rjmp	.-342    	; 0x28ce <main+0x4c>
					uart_sendString(default_pass);
					LCD_CLEAR();
				}
				_delay_ms(500);
			}
			Display_string_row_col(0,0,"ReEnter password");
    2a24:	2f e6       	ldi	r18, 0x6F	; 111
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	a9 01       	movw	r20, r18
    2a2e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Display_string_row_col>
			GOTO_ROW_COL(1, 0);
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <GOTO_ROW_COL>
			LCD_SendCommand(DISPLAY_ON_CURSOR_BLINK);
    2a3a:	8f e0       	ldi	r24, 0x0F	; 15
    2a3c:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_SendCommand>
			uint8 j;
			for(j=0;j<5;j++)
    2a40:	1b a6       	std	Y+43, r1	; 0x2b
    2a42:	a8 c0       	rjmp	.+336    	; 0x2b94 <main+0x312>
			{
			key=get_key_pressed();
    2a44:	0e 94 e6 09 	call	0x13cc	; 0x13cc <get_key_pressed>
    2a48:	8e a7       	std	Y+46, r24	; 0x2e
			if(key>=0 && key<=9)
    2a4a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a4c:	8a 30       	cpi	r24, 0x0A	; 10
    2a4e:	80 f4       	brcc	.+32     	; 0x2a70 <main+0x1ee>
			{
				entered_pass[j]=key+'0';
    2a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a58:	48 2f       	mov	r20, r24
    2a5a:	40 5d       	subi	r20, 0xD0	; 208
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	c9 96       	adiw	r24, 0x39	; 57
    2a60:	fc 01       	movw	r30, r24
    2a62:	e2 0f       	add	r30, r18
    2a64:	f3 1f       	adc	r31, r19
    2a66:	40 83       	st	Z, r20
				LCD_SendCharacter('*');
    2a68:	8a e2       	ldi	r24, 0x2A	; 42
    2a6a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_SendCharacter>
    2a6e:	1d c0       	rjmp	.+58     	; 0x2aaa <main+0x228>
			}
			else
			{
				entered_pass[j]='#';
    2a70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	ce 01       	movw	r24, r28
    2a78:	c9 96       	adiw	r24, 0x39	; 57
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	e2 0f       	add	r30, r18
    2a7e:	f3 1f       	adc	r31, r19
    2a80:	83 e2       	ldi	r24, 0x23	; 35
    2a82:	80 83       	st	Z, r24
				j++;
    2a84:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a86:	8f 5f       	subi	r24, 0xFF	; 255
    2a88:	8b a7       	std	Y+43, r24	; 0x2b
				entered_pass[j]='0';
    2a8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	ce 01       	movw	r24, r28
    2a92:	c9 96       	adiw	r24, 0x39	; 57
    2a94:	fc 01       	movw	r30, r24
    2a96:	e2 0f       	add	r30, r18
    2a98:	f3 1f       	adc	r31, r19
    2a9a:	80 e3       	ldi	r24, 0x30	; 48
    2a9c:	80 83       	st	Z, r24
				uart_sendString(entered_pass);
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	c9 96       	adiw	r24, 0x39	; 57
    2aa2:	0e 94 e5 05 	call	0xbca	; 0xbca <uart_sendString>
				LCD_CLEAR();
    2aa6:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_CLEAR>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	aa ef       	ldi	r26, 0xFA	; 250
    2ab0:	b3 e4       	ldi	r27, 0x43	; 67
    2ab2:	89 8f       	std	Y+25, r24	; 0x19
    2ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	69 8d       	ldd	r22, Y+25	; 0x19
    2abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a e7       	ldi	r20, 0x7A	; 122
    2ac8:	53 e4       	ldi	r21, 0x43	; 67
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	8d 8b       	std	Y+21, r24	; 0x15
    2ad4:	9e 8b       	std	Y+22, r25	; 0x16
    2ad6:	af 8b       	std	Y+23, r26	; 0x17
    2ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ada:	6d 89       	ldd	r22, Y+21	; 0x15
    2adc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ade:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e8       	ldi	r20, 0x80	; 128
    2ae8:	5f e3       	ldi	r21, 0x3F	; 63
    2aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aee:	88 23       	and	r24, r24
    2af0:	2c f4       	brge	.+10     	; 0x2afc <main+0x27a>
		__ticks = 1;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9c 8b       	std	Y+20, r25	; 0x14
    2af8:	8b 8b       	std	Y+19, r24	; 0x13
    2afa:	3f c0       	rjmp	.+126    	; 0x2b7a <main+0x2f8>
	else if (__tmp > 65535)
    2afc:	6d 89       	ldd	r22, Y+21	; 0x15
    2afe:	7e 89       	ldd	r23, Y+22	; 0x16
    2b00:	8f 89       	ldd	r24, Y+23	; 0x17
    2b02:	98 8d       	ldd	r25, Y+24	; 0x18
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	4c f5       	brge	.+82     	; 0x2b66 <main+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b14:	69 8d       	ldd	r22, Y+25	; 0x19
    2b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e2       	ldi	r20, 0x20	; 32
    2b22:	51 e4       	ldi	r21, 0x41	; 65
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9c 8b       	std	Y+20, r25	; 0x14
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	0f c0       	rjmp	.+30     	; 0x2b5c <main+0x2da>
    2b3e:	89 e1       	ldi	r24, 0x19	; 25
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9a 8b       	std	Y+18, r25	; 0x12
    2b44:	89 8b       	std	Y+17, r24	; 0x11
    2b46:	89 89       	ldd	r24, Y+17	; 0x11
    2b48:	9a 89       	ldd	r25, Y+18	; 0x12
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <main+0x2c8>
    2b4e:	9a 8b       	std	Y+18, r25	; 0x12
    2b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b52:	8b 89       	ldd	r24, Y+19	; 0x13
    2b54:	9c 89       	ldd	r25, Y+20	; 0x14
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	69 f7       	brne	.-38     	; 0x2b3e <main+0x2bc>
    2b64:	14 c0       	rjmp	.+40     	; 0x2b8e <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b66:	6d 89       	ldd	r22, Y+21	; 0x15
    2b68:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	98 8b       	std	Y+16, r25	; 0x10
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
    2b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b84:	98 89       	ldd	r25, Y+16	; 0x10
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <main+0x304>
    2b8a:	98 8b       	std	Y+16, r25	; 0x10
    2b8c:	8f 87       	std	Y+15, r24	; 0x0f
			}
			Display_string_row_col(0,0,"ReEnter password");
			GOTO_ROW_COL(1, 0);
			LCD_SendCommand(DISPLAY_ON_CURSOR_BLINK);
			uint8 j;
			for(j=0;j<5;j++)
    2b8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	8b a7       	std	Y+43, r24	; 0x2b
    2b94:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b96:	85 30       	cpi	r24, 0x05	; 5
    2b98:	08 f4       	brcc	.+2      	; 0x2b9c <main+0x31a>
    2b9a:	54 cf       	rjmp	.-344    	; 0x2a44 <main+0x1c2>
				LCD_CLEAR();
			}
			_delay_ms(500);
			}

		}while(result!='1');
    2b9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b9e:	81 33       	cpi	r24, 0x31	; 49
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <main+0x322>
    2ba2:	85 ce       	rjmp	.-758    	; 0x28ae <main+0x2c>
		 set_pass_flag=1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	80 93 92 00 	sts	0x0092, r24
		 LCD_DisplayString("Correct!");
    2baa:	80 e8       	ldi	r24, 0x80	; 128
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_DisplayString>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	aa e7       	ldi	r26, 0x7A	; 122
    2bb8:	b4 e4       	ldi	r27, 0x44	; 68
    2bba:	8b 87       	std	Y+11, r24	; 0x0b
    2bbc:	9c 87       	std	Y+12, r25	; 0x0c
    2bbe:	ad 87       	std	Y+13, r26	; 0x0d
    2bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	53 e4       	ldi	r21, 0x43	; 67
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8f 83       	std	Y+7, r24	; 0x07
    2bdc:	98 87       	std	Y+8, r25	; 0x08
    2bde:	a9 87       	std	Y+9, r26	; 0x09
    2be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be2:	6f 81       	ldd	r22, Y+7	; 0x07
    2be4:	78 85       	ldd	r23, Y+8	; 0x08
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <main+0x382>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <main+0x400>
	else if (__tmp > 65535)
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <main+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <main+0x3e2>
    2c46:	89 e1       	ldi	r24, 0x19	; 25
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	9c 83       	std	Y+4, r25	; 0x04
    2c4c:	8b 83       	std	Y+3, r24	; 0x03
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <main+0x3d0>
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <main+0x3c4>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <main+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <main+0x40c>
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(1000);
		 LCD_CLEAR();
    2c96:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_CLEAR>
    2c9a:	02 ce       	rjmp	.-1020   	; 0x28a0 <main+0x1e>

00002c9c <__prologue_saves__>:
    2c9c:	2f 92       	push	r2
    2c9e:	3f 92       	push	r3
    2ca0:	4f 92       	push	r4
    2ca2:	5f 92       	push	r5
    2ca4:	6f 92       	push	r6
    2ca6:	7f 92       	push	r7
    2ca8:	8f 92       	push	r8
    2caa:	9f 92       	push	r9
    2cac:	af 92       	push	r10
    2cae:	bf 92       	push	r11
    2cb0:	cf 92       	push	r12
    2cb2:	df 92       	push	r13
    2cb4:	ef 92       	push	r14
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	ca 1b       	sub	r28, r26
    2cc6:	db 0b       	sbc	r29, r27
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	09 94       	ijmp

00002cd4 <__epilogue_restores__>:
    2cd4:	2a 88       	ldd	r2, Y+18	; 0x12
    2cd6:	39 88       	ldd	r3, Y+17	; 0x11
    2cd8:	48 88       	ldd	r4, Y+16	; 0x10
    2cda:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cde:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ce0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ce2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ce4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ce6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ce8:	c8 84       	ldd	r12, Y+8	; 0x08
    2cea:	df 80       	ldd	r13, Y+7	; 0x07
    2cec:	ee 80       	ldd	r14, Y+6	; 0x06
    2cee:	fd 80       	ldd	r15, Y+5	; 0x05
    2cf0:	0c 81       	ldd	r16, Y+4	; 0x04
    2cf2:	1b 81       	ldd	r17, Y+3	; 0x03
    2cf4:	aa 81       	ldd	r26, Y+2	; 0x02
    2cf6:	b9 81       	ldd	r27, Y+1	; 0x01
    2cf8:	ce 0f       	add	r28, r30
    2cfa:	d1 1d       	adc	r29, r1
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	ed 01       	movw	r28, r26
    2d08:	08 95       	ret

00002d0a <itoa>:
    2d0a:	fb 01       	movw	r30, r22
    2d0c:	9f 01       	movw	r18, r30
    2d0e:	e8 94       	clt
    2d10:	42 30       	cpi	r20, 0x02	; 2
    2d12:	c4 f0       	brlt	.+48     	; 0x2d44 <itoa+0x3a>
    2d14:	45 32       	cpi	r20, 0x25	; 37
    2d16:	b4 f4       	brge	.+44     	; 0x2d44 <itoa+0x3a>
    2d18:	4a 30       	cpi	r20, 0x0A	; 10
    2d1a:	29 f4       	brne	.+10     	; 0x2d26 <itoa+0x1c>
    2d1c:	97 fb       	bst	r25, 7
    2d1e:	1e f4       	brtc	.+6      	; 0x2d26 <itoa+0x1c>
    2d20:	90 95       	com	r25
    2d22:	81 95       	neg	r24
    2d24:	9f 4f       	sbci	r25, 0xFF	; 255
    2d26:	64 2f       	mov	r22, r20
    2d28:	77 27       	eor	r23, r23
    2d2a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__udivmodhi4>
    2d2e:	80 5d       	subi	r24, 0xD0	; 208
    2d30:	8a 33       	cpi	r24, 0x3A	; 58
    2d32:	0c f0       	brlt	.+2      	; 0x2d36 <itoa+0x2c>
    2d34:	89 5d       	subi	r24, 0xD9	; 217
    2d36:	81 93       	st	Z+, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	a1 f7       	brne	.-24     	; 0x2d26 <itoa+0x1c>
    2d3e:	16 f4       	brtc	.+4      	; 0x2d44 <itoa+0x3a>
    2d40:	5d e2       	ldi	r21, 0x2D	; 45
    2d42:	51 93       	st	Z+, r21
    2d44:	10 82       	st	Z, r1
    2d46:	c9 01       	movw	r24, r18
    2d48:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <strrev>

00002d4c <strrev>:
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	fc 01       	movw	r30, r24
    2d50:	67 2f       	mov	r22, r23
    2d52:	71 91       	ld	r23, Z+
    2d54:	77 23       	and	r23, r23
    2d56:	e1 f7       	brne	.-8      	; 0x2d50 <strrev+0x4>
    2d58:	32 97       	sbiw	r30, 0x02	; 2
    2d5a:	04 c0       	rjmp	.+8      	; 0x2d64 <strrev+0x18>
    2d5c:	7c 91       	ld	r23, X
    2d5e:	6d 93       	st	X+, r22
    2d60:	70 83       	st	Z, r23
    2d62:	62 91       	ld	r22, -Z
    2d64:	ae 17       	cp	r26, r30
    2d66:	bf 07       	cpc	r27, r31
    2d68:	c8 f3       	brcs	.-14     	; 0x2d5c <strrev+0x10>
    2d6a:	08 95       	ret

00002d6c <__udivmodhi4>:
    2d6c:	aa 1b       	sub	r26, r26
    2d6e:	bb 1b       	sub	r27, r27
    2d70:	51 e1       	ldi	r21, 0x11	; 17
    2d72:	07 c0       	rjmp	.+14     	; 0x2d82 <__udivmodhi4_ep>

00002d74 <__udivmodhi4_loop>:
    2d74:	aa 1f       	adc	r26, r26
    2d76:	bb 1f       	adc	r27, r27
    2d78:	a6 17       	cp	r26, r22
    2d7a:	b7 07       	cpc	r27, r23
    2d7c:	10 f0       	brcs	.+4      	; 0x2d82 <__udivmodhi4_ep>
    2d7e:	a6 1b       	sub	r26, r22
    2d80:	b7 0b       	sbc	r27, r23

00002d82 <__udivmodhi4_ep>:
    2d82:	88 1f       	adc	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	5a 95       	dec	r21
    2d88:	a9 f7       	brne	.-22     	; 0x2d74 <__udivmodhi4_loop>
    2d8a:	80 95       	com	r24
    2d8c:	90 95       	com	r25
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	08 95       	ret

00002d94 <_exit>:
    2d94:	f8 94       	cli

00002d96 <__stop_program>:
    2d96:	ff cf       	rjmp	.-2      	; 0x2d96 <__stop_program>
