
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002e56  00002eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00002f08  2**0
                  ALLOC
  3 .stab         000022ec  00000000  00000000  00002f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff3  00000000  00000000  000051f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006327  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006497  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a165  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 12 	call	0x2574	; 0x2574 <main>
      8a:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <set_port_direction>:
 *      Author: Lenovo
 */
#include"DIO.h"

void set_port_direction(PORT_TYPE ptype,DIO_DIRECTION dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <set_port_direction+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <set_port_direction+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <set_port_direction+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
	if(dir == INPUT)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 23       	and	r24, r24
     b5c:	79 f5       	brne	.+94     	; 0xbbc <set_port_direction+0x76>
	{
		switch(ptype)
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	3e 83       	std	Y+6, r19	; 0x06
     b66:	2d 83       	std	Y+5, r18	; 0x05
     b68:	8d 81       	ldd	r24, Y+5	; 0x05
     b6a:	9e 81       	ldd	r25, Y+6	; 0x06
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 05       	cpc	r25, r1
     b70:	c9 f0       	breq	.+50     	; 0xba4 <set_port_direction+0x5e>
     b72:	2d 81       	ldd	r18, Y+5	; 0x05
     b74:	3e 81       	ldd	r19, Y+6	; 0x06
     b76:	22 30       	cpi	r18, 0x02	; 2
     b78:	31 05       	cpc	r19, r1
     b7a:	2c f4       	brge	.+10     	; 0xb86 <set_port_direction+0x40>
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	61 f0       	breq	.+24     	; 0xb9c <set_port_direction+0x56>
     b84:	50 c0       	rjmp	.+160    	; 0xc26 <set_port_direction+0xe0>
     b86:	2d 81       	ldd	r18, Y+5	; 0x05
     b88:	3e 81       	ldd	r19, Y+6	; 0x06
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	71 f0       	breq	.+28     	; 0xbac <set_port_direction+0x66>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	69 f0       	breq	.+26     	; 0xbb4 <set_port_direction+0x6e>
     b9a:	45 c0       	rjmp	.+138    	; 0xc26 <set_port_direction+0xe0>
		{
		case PORTA_reg:
			DDRA=0x00;
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	10 82       	st	Z, r1
     ba2:	41 c0       	rjmp	.+130    	; 0xc26 <set_port_direction+0xe0>
			break;
		case PORTB_reg:
			DDRB=0x00;
     ba4:	e7 e3       	ldi	r30, 0x37	; 55
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	10 82       	st	Z, r1
     baa:	3d c0       	rjmp	.+122    	; 0xc26 <set_port_direction+0xe0>
			break;
		case PORTC_reg:
			DDRC=0x00;
     bac:	e4 e3       	ldi	r30, 0x34	; 52
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	10 82       	st	Z, r1
     bb2:	39 c0       	rjmp	.+114    	; 0xc26 <set_port_direction+0xe0>
			break;
		case PORTD_reg:
			DDRD=0x00;
     bb4:	e1 e3       	ldi	r30, 0x31	; 49
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1
     bba:	35 c0       	rjmp	.+106    	; 0xc26 <set_port_direction+0xe0>
			break;
		}

	}
	else if(dir == OUTPUT)
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	91 f5       	brne	.+100    	; 0xc26 <set_port_direction+0xe0>
	{
		switch(ptype)
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3c 83       	std	Y+4, r19	; 0x04
     bca:	2b 83       	std	Y+3, r18	; 0x03
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	91 05       	cpc	r25, r1
     bd4:	d1 f0       	breq	.+52     	; 0xc0a <set_port_direction+0xc4>
     bd6:	2b 81       	ldd	r18, Y+3	; 0x03
     bd8:	3c 81       	ldd	r19, Y+4	; 0x04
     bda:	22 30       	cpi	r18, 0x02	; 2
     bdc:	31 05       	cpc	r19, r1
     bde:	2c f4       	brge	.+10     	; 0xbea <set_port_direction+0xa4>
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	61 f0       	breq	.+24     	; 0xc00 <set_port_direction+0xba>
     be8:	1e c0       	rjmp	.+60     	; 0xc26 <set_port_direction+0xe0>
     bea:	2b 81       	ldd	r18, Y+3	; 0x03
     bec:	3c 81       	ldd	r19, Y+4	; 0x04
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	81 f0       	breq	.+32     	; 0xc14 <set_port_direction+0xce>
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	9c 81       	ldd	r25, Y+4	; 0x04
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	81 f0       	breq	.+32     	; 0xc1e <set_port_direction+0xd8>
     bfe:	13 c0       	rjmp	.+38     	; 0xc26 <set_port_direction+0xe0>
		{
		case PORTA_reg:
			DDRA=0xFF;
     c00:	ea e3       	ldi	r30, 0x3A	; 58
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	80 83       	st	Z, r24
     c08:	0e c0       	rjmp	.+28     	; 0xc26 <set_port_direction+0xe0>
			break;
		case PORTB_reg:
			DDRB=0xFF;
     c0a:	e7 e3       	ldi	r30, 0x37	; 55
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	80 83       	st	Z, r24
     c12:	09 c0       	rjmp	.+18     	; 0xc26 <set_port_direction+0xe0>
			break;
		case PORTC_reg:
			DDRC=0xFF;
     c14:	e4 e3       	ldi	r30, 0x34	; 52
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	80 83       	st	Z, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <set_port_direction+0xe0>
			break;
		case PORTD_reg:
			DDRD=0xFF;
     c1e:	e1 e3       	ldi	r30, 0x31	; 49
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	80 83       	st	Z, r24
			break;
		}
	}
}
     c26:	26 96       	adiw	r28, 0x06	; 6
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <set_pin_direction>:
void set_pin_direction(PORT_TYPE ptype,PIN_NUM p_num,DIO_DIRECTION dir)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	27 97       	sbiw	r28, 0x07	; 7
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	6a 83       	std	Y+2, r22	; 0x02
     c50:	4b 83       	std	Y+3, r20	; 0x03
	if(dir == INPUT)
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	88 23       	and	r24, r24
     c56:	09 f0       	breq	.+2      	; 0xc5a <set_pin_direction+0x22>
     c58:	74 c0       	rjmp	.+232    	; 0xd42 <set_pin_direction+0x10a>
	{
		switch(ptype)
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	3f 83       	std	Y+7, r19	; 0x07
     c62:	2e 83       	std	Y+6, r18	; 0x06
     c64:	8e 81       	ldd	r24, Y+6	; 0x06
     c66:	9f 81       	ldd	r25, Y+7	; 0x07
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	91 05       	cpc	r25, r1
     c6c:	59 f1       	breq	.+86     	; 0xcc4 <set_pin_direction+0x8c>
     c6e:	2e 81       	ldd	r18, Y+6	; 0x06
     c70:	3f 81       	ldd	r19, Y+7	; 0x07
     c72:	22 30       	cpi	r18, 0x02	; 2
     c74:	31 05       	cpc	r19, r1
     c76:	2c f4       	brge	.+10     	; 0xc82 <set_pin_direction+0x4a>
     c78:	8e 81       	ldd	r24, Y+6	; 0x06
     c7a:	9f 81       	ldd	r25, Y+7	; 0x07
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	69 f0       	breq	.+26     	; 0xc9a <set_pin_direction+0x62>
     c80:	d2 c0       	rjmp	.+420    	; 0xe26 <set_pin_direction+0x1ee>
     c82:	2e 81       	ldd	r18, Y+6	; 0x06
     c84:	3f 81       	ldd	r19, Y+7	; 0x07
     c86:	22 30       	cpi	r18, 0x02	; 2
     c88:	31 05       	cpc	r19, r1
     c8a:	89 f1       	breq	.+98     	; 0xcee <set_pin_direction+0xb6>
     c8c:	8e 81       	ldd	r24, Y+6	; 0x06
     c8e:	9f 81       	ldd	r25, Y+7	; 0x07
     c90:	83 30       	cpi	r24, 0x03	; 3
     c92:	91 05       	cpc	r25, r1
     c94:	09 f4       	brne	.+2      	; 0xc98 <set_pin_direction+0x60>
     c96:	40 c0       	rjmp	.+128    	; 0xd18 <set_pin_direction+0xe0>
     c98:	c6 c0       	rjmp	.+396    	; 0xe26 <set_pin_direction+0x1ee>
		{
		case PORTA_reg:
			CLEAR_BIT(DDRA,p_num);
     c9a:	aa e3       	ldi	r26, 0x3A	; 58
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ea e3       	ldi	r30, 0x3A	; 58
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <set_pin_direction+0x80>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <set_pin_direction+0x7c>
     cbc:	80 95       	com	r24
     cbe:	84 23       	and	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	b1 c0       	rjmp	.+354    	; 0xe26 <set_pin_direction+0x1ee>
			break;
		case PORTB_reg:
			CLEAR_BIT(DDRB,p_num);
     cc4:	a7 e3       	ldi	r26, 0x37	; 55
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e3       	ldi	r30, 0x37	; 55
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <set_pin_direction+0xaa>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <set_pin_direction+0xa6>
     ce6:	80 95       	com	r24
     ce8:	84 23       	and	r24, r20
     cea:	8c 93       	st	X, r24
     cec:	9c c0       	rjmp	.+312    	; 0xe26 <set_pin_direction+0x1ee>
			break;
		case PORTC_reg:
			CLEAR_BIT(DDRC,p_num);
     cee:	a4 e3       	ldi	r26, 0x34	; 52
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e4 e3       	ldi	r30, 0x34	; 52
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <set_pin_direction+0xd4>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <set_pin_direction+0xd0>
     d10:	80 95       	com	r24
     d12:	84 23       	and	r24, r20
     d14:	8c 93       	st	X, r24
     d16:	87 c0       	rjmp	.+270    	; 0xe26 <set_pin_direction+0x1ee>
			break;
		case PORTD_reg:
			CLEAR_BIT(DDRD,p_num);
     d18:	a1 e3       	ldi	r26, 0x31	; 49
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e1 e3       	ldi	r30, 0x31	; 49
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <set_pin_direction+0xfe>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <set_pin_direction+0xfa>
     d3a:	80 95       	com	r24
     d3c:	84 23       	and	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	72 c0       	rjmp	.+228    	; 0xe26 <set_pin_direction+0x1ee>
			break;
		}
	}
	else if(dir == OUTPUT)
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	09 f0       	breq	.+2      	; 0xd4a <set_pin_direction+0x112>
     d48:	6e c0       	rjmp	.+220    	; 0xe26 <set_pin_direction+0x1ee>
	{
		switch(ptype)
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3d 83       	std	Y+5, r19	; 0x05
     d52:	2c 83       	std	Y+4, r18	; 0x04
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	9d 81       	ldd	r25, Y+5	; 0x05
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 05       	cpc	r25, r1
     d5c:	49 f1       	breq	.+82     	; 0xdb0 <set_pin_direction+0x178>
     d5e:	2c 81       	ldd	r18, Y+4	; 0x04
     d60:	3d 81       	ldd	r19, Y+5	; 0x05
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	2c f4       	brge	.+10     	; 0xd72 <set_pin_direction+0x13a>
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	61 f0       	breq	.+24     	; 0xd88 <set_pin_direction+0x150>
     d70:	5a c0       	rjmp	.+180    	; 0xe26 <set_pin_direction+0x1ee>
     d72:	2c 81       	ldd	r18, Y+4	; 0x04
     d74:	3d 81       	ldd	r19, Y+5	; 0x05
     d76:	22 30       	cpi	r18, 0x02	; 2
     d78:	31 05       	cpc	r19, r1
     d7a:	71 f1       	breq	.+92     	; 0xdd8 <set_pin_direction+0x1a0>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	e9 f1       	breq	.+122    	; 0xe00 <set_pin_direction+0x1c8>
     d86:	4f c0       	rjmp	.+158    	; 0xe26 <set_pin_direction+0x1ee>
		{
		case PORTA_reg:
			SET_BIT(DDRA,p_num);
     d88:	aa e3       	ldi	r26, 0x3A	; 58
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ea e3       	ldi	r30, 0x3A	; 58
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <set_pin_direction+0x16e>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <set_pin_direction+0x16a>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	3b c0       	rjmp	.+118    	; 0xe26 <set_pin_direction+0x1ee>
			break;
		case PORTB_reg:
			SET_BIT(DDRB,p_num);
     db0:	a7 e3       	ldi	r26, 0x37	; 55
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e7 e3       	ldi	r30, 0x37	; 55
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <set_pin_direction+0x196>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <set_pin_direction+0x192>
     dd2:	84 2b       	or	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	27 c0       	rjmp	.+78     	; 0xe26 <set_pin_direction+0x1ee>
			break;
		case PORTC_reg:
			SET_BIT(DDRC,p_num);
     dd8:	a4 e3       	ldi	r26, 0x34	; 52
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e4 e3       	ldi	r30, 0x34	; 52
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <set_pin_direction+0x1be>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <set_pin_direction+0x1ba>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	13 c0       	rjmp	.+38     	; 0xe26 <set_pin_direction+0x1ee>
			break;
		case PORTD_reg:
			SET_BIT(DDRD,p_num);
     e00:	a1 e3       	ldi	r26, 0x31	; 49
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e1 e3       	ldi	r30, 0x31	; 49
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <set_pin_direction+0x1e6>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <set_pin_direction+0x1e2>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
			break;
		}

	}

}
     e26:	27 96       	adiw	r28, 0x07	; 7
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <set_port_value>:
void set_port_value(PORT_TYPE ptype,uint8 value)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <set_port_value+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <set_port_value+0x8>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	6a 83       	std	Y+2, r22	; 0x02
	switch(ptype)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3c 83       	std	Y+4, r19	; 0x04
     e50:	2b 83       	std	Y+3, r18	; 0x03
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	91 05       	cpc	r25, r1
     e5a:	d1 f0       	breq	.+52     	; 0xe90 <set_port_value+0x58>
     e5c:	2b 81       	ldd	r18, Y+3	; 0x03
     e5e:	3c 81       	ldd	r19, Y+4	; 0x04
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	2c f4       	brge	.+10     	; 0xe70 <set_port_value+0x38>
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	61 f0       	breq	.+24     	; 0xe86 <set_port_value+0x4e>
     e6e:	1e c0       	rjmp	.+60     	; 0xeac <set_port_value+0x74>
     e70:	2b 81       	ldd	r18, Y+3	; 0x03
     e72:	3c 81       	ldd	r19, Y+4	; 0x04
     e74:	22 30       	cpi	r18, 0x02	; 2
     e76:	31 05       	cpc	r19, r1
     e78:	81 f0       	breq	.+32     	; 0xe9a <set_port_value+0x62>
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	91 05       	cpc	r25, r1
     e82:	81 f0       	breq	.+32     	; 0xea4 <set_port_value+0x6c>
     e84:	13 c0       	rjmp	.+38     	; 0xeac <set_port_value+0x74>
	{
	case PORTA_reg:
		PORTA=value;
     e86:	eb e3       	ldi	r30, 0x3B	; 59
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	80 83       	st	Z, r24
     e8e:	0e c0       	rjmp	.+28     	; 0xeac <set_port_value+0x74>
		break;
	case PORTB_reg:
		PORTB=value;
     e90:	e8 e3       	ldi	r30, 0x38	; 56
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	80 83       	st	Z, r24
     e98:	09 c0       	rjmp	.+18     	; 0xeac <set_port_value+0x74>
		break;
	case PORTC_reg:
		PORTC=value;
     e9a:	e5 e3       	ldi	r30, 0x35	; 53
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	80 83       	st	Z, r24
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <set_port_value+0x74>
		break;
	case PORTD_reg:
		PORTD=value;
     ea4:	e2 e3       	ldi	r30, 0x32	; 50
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	80 83       	st	Z, r24
		break;
	}
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <set_pin_value>:
void set_pin_value(PORT_TYPE ptype,PIN_NUM p_num,DIO_VAL val)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	27 97       	sbiw	r28, 0x07	; 7
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	6a 83       	std	Y+2, r22	; 0x02
     ed2:	4b 83       	std	Y+3, r20	; 0x03
	if(val == HIGH)
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	09 f0       	breq	.+2      	; 0xedc <set_pin_value+0x22>
     eda:	6f c0       	rjmp	.+222    	; 0xfba <set_pin_value+0x100>
	{
		switch(ptype)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3f 83       	std	Y+7, r19	; 0x07
     ee4:	2e 83       	std	Y+6, r18	; 0x06
     ee6:	8e 81       	ldd	r24, Y+6	; 0x06
     ee8:	9f 81       	ldd	r25, Y+7	; 0x07
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	49 f1       	breq	.+82     	; 0xf42 <set_pin_value+0x88>
     ef0:	2e 81       	ldd	r18, Y+6	; 0x06
     ef2:	3f 81       	ldd	r19, Y+7	; 0x07
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	31 05       	cpc	r19, r1
     ef8:	2c f4       	brge	.+10     	; 0xf04 <set_pin_value+0x4a>
     efa:	8e 81       	ldd	r24, Y+6	; 0x06
     efc:	9f 81       	ldd	r25, Y+7	; 0x07
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	61 f0       	breq	.+24     	; 0xf1a <set_pin_value+0x60>
     f02:	d2 c0       	rjmp	.+420    	; 0x10a8 <set_pin_value+0x1ee>
     f04:	2e 81       	ldd	r18, Y+6	; 0x06
     f06:	3f 81       	ldd	r19, Y+7	; 0x07
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	71 f1       	breq	.+92     	; 0xf6a <set_pin_value+0xb0>
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	91 05       	cpc	r25, r1
     f16:	e9 f1       	breq	.+122    	; 0xf92 <set_pin_value+0xd8>
     f18:	c7 c0       	rjmp	.+398    	; 0x10a8 <set_pin_value+0x1ee>
		{
		case PORTA_reg:
			SET_BIT(PORTA,p_num);
     f1a:	ab e3       	ldi	r26, 0x3B	; 59
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	eb e3       	ldi	r30, 0x3B	; 59
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <set_pin_value+0x7e>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <set_pin_value+0x7a>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	b3 c0       	rjmp	.+358    	; 0x10a8 <set_pin_value+0x1ee>
			break;
		case PORTB_reg:
			SET_BIT(PORTB,p_num);
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <set_pin_value+0xa6>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <set_pin_value+0xa2>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	9f c0       	rjmp	.+318    	; 0x10a8 <set_pin_value+0x1ee>
			break;
		case PORTC_reg:
			SET_BIT(PORTC,p_num);
     f6a:	a5 e3       	ldi	r26, 0x35	; 53
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e3       	ldi	r30, 0x35	; 53
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <set_pin_value+0xce>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <set_pin_value+0xca>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	8b c0       	rjmp	.+278    	; 0x10a8 <set_pin_value+0x1ee>
			break;
		case PORTD_reg:
			SET_BIT(PORTD,p_num);
     f92:	a2 e3       	ldi	r26, 0x32	; 50
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e2 e3       	ldi	r30, 0x32	; 50
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <set_pin_value+0xf6>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <set_pin_value+0xf2>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	77 c0       	rjmp	.+238    	; 0x10a8 <set_pin_value+0x1ee>
			break;
		}

	}
	else if(val == LOW)
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <set_pin_value+0x108>
     fc0:	73 c0       	rjmp	.+230    	; 0x10a8 <set_pin_value+0x1ee>
	{
		switch(ptype)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	3d 83       	std	Y+5, r19	; 0x05
     fca:	2c 83       	std	Y+4, r18	; 0x04
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	91 05       	cpc	r25, r1
     fd4:	59 f1       	breq	.+86     	; 0x102c <set_pin_value+0x172>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	2c f4       	brge	.+10     	; 0xfea <set_pin_value+0x130>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f0       	breq	.+26     	; 0x1002 <set_pin_value+0x148>
     fe8:	5f c0       	rjmp	.+190    	; 0x10a8 <set_pin_value+0x1ee>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	89 f1       	breq	.+98     	; 0x1056 <set_pin_value+0x19c>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <set_pin_value+0x146>
     ffe:	40 c0       	rjmp	.+128    	; 0x1080 <set_pin_value+0x1c6>
    1000:	53 c0       	rjmp	.+166    	; 0x10a8 <set_pin_value+0x1ee>
		{
		case PORTA_reg:
			CLEAR_BIT(PORTA,p_num);
    1002:	ab e3       	ldi	r26, 0x3B	; 59
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	eb e3       	ldi	r30, 0x3B	; 59
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <set_pin_value+0x166>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <set_pin_value+0x162>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	3e c0       	rjmp	.+124    	; 0x10a8 <set_pin_value+0x1ee>
			break;
		case PORTB_reg:
			CLEAR_BIT(PORTB,p_num);
    102c:	a8 e3       	ldi	r26, 0x38	; 56
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e8 e3       	ldi	r30, 0x38	; 56
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <set_pin_value+0x190>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <set_pin_value+0x18c>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	29 c0       	rjmp	.+82     	; 0x10a8 <set_pin_value+0x1ee>
			break;
		case PORTC_reg:
			CLEAR_BIT(PORTC,p_num);
    1056:	a5 e3       	ldi	r26, 0x35	; 53
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e5 e3       	ldi	r30, 0x35	; 53
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <set_pin_value+0x1ba>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <set_pin_value+0x1b6>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <set_pin_value+0x1ee>
			break;
		case PORTD_reg:
			CLEAR_BIT(PORTD,p_num);
    1080:	a2 e3       	ldi	r26, 0x32	; 50
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e2 e3       	ldi	r30, 0x32	; 50
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <set_pin_value+0x1e4>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <set_pin_value+0x1e0>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
			break;
		}
	}

}
    10a8:	27 96       	adiw	r28, 0x07	; 7
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <get_pin_value>:
DIO_VAL get_pin_value(PORT_TYPE ptype,PIN_NUM p_num)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <get_pin_value+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <get_pin_value+0x8>
    10c2:	0f 92       	push	r0
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VAL x;
	switch(ptype)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3d 83       	std	Y+5, r19	; 0x05
    10d4:	2c 83       	std	Y+4, r18	; 0x04
    10d6:	4c 81       	ldd	r20, Y+4	; 0x04
    10d8:	5d 81       	ldd	r21, Y+5	; 0x05
    10da:	41 30       	cpi	r20, 0x01	; 1
    10dc:	51 05       	cpc	r21, r1
    10de:	41 f1       	breq	.+80     	; 0x1130 <get_pin_value+0x76>
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	91 05       	cpc	r25, r1
    10e8:	34 f4       	brge	.+12     	; 0x10f6 <get_pin_value+0x3c>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	21 15       	cp	r18, r1
    10f0:	31 05       	cpc	r19, r1
    10f2:	61 f0       	breq	.+24     	; 0x110c <get_pin_value+0x52>
    10f4:	52 c0       	rjmp	.+164    	; 0x119a <get_pin_value+0xe0>
    10f6:	4c 81       	ldd	r20, Y+4	; 0x04
    10f8:	5d 81       	ldd	r21, Y+5	; 0x05
    10fa:	42 30       	cpi	r20, 0x02	; 2
    10fc:	51 05       	cpc	r21, r1
    10fe:	51 f1       	breq	.+84     	; 0x1154 <get_pin_value+0x9a>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	b9 f1       	breq	.+110    	; 0x1178 <get_pin_value+0xbe>
    110a:	47 c0       	rjmp	.+142    	; 0x119a <get_pin_value+0xe0>
	{
	case PORTA_reg:
			x=GET_BIT(PINA,p_num);
    110c:	e9 e3       	ldi	r30, 0x39	; 57
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a9 01       	movw	r20, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <get_pin_value+0x6a>
    1120:	55 95       	asr	r21
    1122:	47 95       	ror	r20
    1124:	8a 95       	dec	r24
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <get_pin_value+0x66>
    1128:	ca 01       	movw	r24, r20
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	35 c0       	rjmp	.+106    	; 0x119a <get_pin_value+0xe0>
			break;
	case PORTB_reg:
			x=GET_BIT(PINB,p_num);
    1130:	e6 e3       	ldi	r30, 0x36	; 54
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <get_pin_value+0x8e>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <get_pin_value+0x8a>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	23 c0       	rjmp	.+70     	; 0x119a <get_pin_value+0xe0>
			break;
	case PORTC_reg:
			x=GET_BIT(PINC,p_num);
    1154:	e3 e3       	ldi	r30, 0x33	; 51
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <get_pin_value+0xb2>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <get_pin_value+0xae>
    1170:	ca 01       	movw	r24, r20
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	11 c0       	rjmp	.+34     	; 0x119a <get_pin_value+0xe0>
			break;
	case PORTD_reg:
			x=GET_BIT(PIND,p_num);
    1178:	e0 e3       	ldi	r30, 0x30	; 48
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <get_pin_value+0xd6>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <get_pin_value+0xd2>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return x;
    119a:	89 81       	ldd	r24, Y+1	; 0x01


}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <get_key_pressed>:
#elif(N_COL == 4)
static uint8 Keypad_4x4_Config(uint8 button_number);
#endif

uint8 get_key_pressed()
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <get_key_pressed+0x6>
    11b2:	0f 92       	push	r0
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	uint8 res;
	while(1)
	{
		for(col=0;col<N_COL;col++)
    11b8:	1a 82       	std	Y+2, r1	; 0x02
    11ba:	4d c0       	rjmp	.+154    	; 0x1256 <get_key_pressed+0xaa>
		{
			Keypad_DDR=(0b00010000<<col);//make col0 output and rest of cols and rows are input
    11bc:	ea e3       	ldi	r30, 0x3A	; 58
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	80 e1       	ldi	r24, 0x10	; 16
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <get_key_pressed+0x24>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	2a 95       	dec	r18
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <get_key_pressed+0x20>
    11d4:	80 83       	st	Z, r24
			Keypad_PORT=(~(0b00010000<<col));//put 0 on col0 and make all pins internal pull up resistance
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	80 e1       	ldi	r24, 0x10	; 16
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <get_key_pressed+0x40>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <get_key_pressed+0x3c>
    11f0:	80 95       	com	r24
    11f2:	80 83       	st	Z, r24
			for(row=0;row<N_ROW;row++)
    11f4:	1b 82       	std	Y+3, r1	; 0x03
    11f6:	29 c0       	rjmp	.+82     	; 0x124a <get_key_pressed+0x9e>
			{
				if(BIT_IS_CLEAR(Keypad_PIN,row))
    11f8:	e9 e3       	ldi	r30, 0x39	; 57
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <get_key_pressed+0x64>
    120c:	55 95       	asr	r21
    120e:	47 95       	ror	r20
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <get_key_pressed+0x60>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	90 70       	andi	r25, 0x00	; 0
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	99 f4       	brne	.+38     	; 0x1244 <get_key_pressed+0x98>
				{
					#if(N_COL == 3)
					return Keypad_4x3_Config((row*N_COL)+col+1);
					#elif(N_COL == 4)
					return Keypad_4x4_Config((row*N_COL)+col+1);
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	98 2f       	mov	r25, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	89 0f       	add	r24, r25
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	0e 94 30 09 	call	0x1260	; 0x1260 <Keypad_4x4_Config>
					#endif
				}
			}
		}
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret
	{
		for(col=0;col<N_COL;col++)
		{
			Keypad_DDR=(0b00010000<<col);//make col0 output and rest of cols and rows are input
			Keypad_PORT=(~(0b00010000<<col));//put 0 on col0 and make all pins internal pull up resistance
			for(row=0;row<N_ROW;row++)
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	a0 f2       	brcs	.-88     	; 0x11f8 <get_key_pressed+0x4c>
{
	uint8 row,col;
	uint8 res;
	while(1)
	{
		for(col=0;col<N_COL;col++)
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	8a 83       	std	Y+2, r24	; 0x02
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	08 f4       	brcc	.+2      	; 0x125e <get_key_pressed+0xb2>
    125c:	af cf       	rjmp	.-162    	; 0x11bc <get_key_pressed+0x10>
    125e:	ac cf       	rjmp	.-168    	; 0x11b8 <get_key_pressed+0xc>

00001260 <Keypad_4x4_Config>:
			}
		}
	}
}
static uint8 Keypad_4x4_Config(uint8 button_number)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Keypad_4x4_Config+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <Keypad_4x4_Config+0x8>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01

	switch(button_number)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3c 83       	std	Y+4, r19	; 0x04
    1276:	2b 83       	std	Y+3, r18	; 0x03
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	88 30       	cpi	r24, 0x08	; 8
    127e:	91 05       	cpc	r25, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <Keypad_4x4_Config+0x24>
    1282:	70 c0       	rjmp	.+224    	; 0x1364 <Keypad_4x4_Config+0x104>
    1284:	2b 81       	ldd	r18, Y+3	; 0x03
    1286:	3c 81       	ldd	r19, Y+4	; 0x04
    1288:	29 30       	cpi	r18, 0x09	; 9
    128a:	31 05       	cpc	r19, r1
    128c:	5c f5       	brge	.+86     	; 0x12e4 <Keypad_4x4_Config+0x84>
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	91 05       	cpc	r25, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <Keypad_4x4_Config+0x3a>
    1298:	59 c0       	rjmp	.+178    	; 0x134c <Keypad_4x4_Config+0xec>
    129a:	2b 81       	ldd	r18, Y+3	; 0x03
    129c:	3c 81       	ldd	r19, Y+4	; 0x04
    129e:	25 30       	cpi	r18, 0x05	; 5
    12a0:	31 05       	cpc	r19, r1
    12a2:	9c f4       	brge	.+38     	; 0x12ca <Keypad_4x4_Config+0x6a>
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <Keypad_4x4_Config+0x50>
    12ae:	48 c0       	rjmp	.+144    	; 0x1340 <Keypad_4x4_Config+0xe0>
    12b0:	2b 81       	ldd	r18, Y+3	; 0x03
    12b2:	3c 81       	ldd	r19, Y+4	; 0x04
    12b4:	23 30       	cpi	r18, 0x03	; 3
    12b6:	31 05       	cpc	r19, r1
    12b8:	0c f0       	brlt	.+2      	; 0x12bc <Keypad_4x4_Config+0x5c>
    12ba:	45 c0       	rjmp	.+138    	; 0x1346 <Keypad_4x4_Config+0xe6>
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <Keypad_4x4_Config+0x68>
    12c6:	39 c0       	rjmp	.+114    	; 0x133a <Keypad_4x4_Config+0xda>
    12c8:	67 c0       	rjmp	.+206    	; 0x1398 <Keypad_4x4_Config+0x138>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	26 30       	cpi	r18, 0x06	; 6
    12d0:	31 05       	cpc	r19, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <Keypad_4x4_Config+0x76>
    12d4:	41 c0       	rjmp	.+130    	; 0x1358 <Keypad_4x4_Config+0xf8>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	87 30       	cpi	r24, 0x07	; 7
    12dc:	91 05       	cpc	r25, r1
    12de:	0c f0       	brlt	.+2      	; 0x12e2 <Keypad_4x4_Config+0x82>
    12e0:	3e c0       	rjmp	.+124    	; 0x135e <Keypad_4x4_Config+0xfe>
    12e2:	37 c0       	rjmp	.+110    	; 0x1352 <Keypad_4x4_Config+0xf2>
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	2c 30       	cpi	r18, 0x0C	; 12
    12ea:	31 05       	cpc	r19, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <Keypad_4x4_Config+0x90>
    12ee:	46 c0       	rjmp	.+140    	; 0x137c <Keypad_4x4_Config+0x11c>
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	8d 30       	cpi	r24, 0x0D	; 13
    12f6:	91 05       	cpc	r25, r1
    12f8:	5c f4       	brge	.+22     	; 0x1310 <Keypad_4x4_Config+0xb0>
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	3c 81       	ldd	r19, Y+4	; 0x04
    12fe:	2a 30       	cpi	r18, 0x0A	; 10
    1300:	31 05       	cpc	r19, r1
    1302:	b1 f1       	breq	.+108    	; 0x1370 <Keypad_4x4_Config+0x110>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	8b 30       	cpi	r24, 0x0B	; 11
    130a:	91 05       	cpc	r25, r1
    130c:	a4 f5       	brge	.+104    	; 0x1376 <Keypad_4x4_Config+0x116>
    130e:	2d c0       	rjmp	.+90     	; 0x136a <Keypad_4x4_Config+0x10a>
    1310:	2b 81       	ldd	r18, Y+3	; 0x03
    1312:	3c 81       	ldd	r19, Y+4	; 0x04
    1314:	2e 30       	cpi	r18, 0x0E	; 14
    1316:	31 05       	cpc	r19, r1
    1318:	b9 f1       	breq	.+110    	; 0x1388 <Keypad_4x4_Config+0x128>
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	8e 30       	cpi	r24, 0x0E	; 14
    1320:	91 05       	cpc	r25, r1
    1322:	7c f1       	brlt	.+94     	; 0x1382 <Keypad_4x4_Config+0x122>
    1324:	2b 81       	ldd	r18, Y+3	; 0x03
    1326:	3c 81       	ldd	r19, Y+4	; 0x04
    1328:	2f 30       	cpi	r18, 0x0F	; 15
    132a:	31 05       	cpc	r19, r1
    132c:	79 f1       	breq	.+94     	; 0x138c <Keypad_4x4_Config+0x12c>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	80 31       	cpi	r24, 0x10	; 16
    1334:	91 05       	cpc	r25, r1
    1336:	69 f1       	breq	.+90     	; 0x1392 <Keypad_4x4_Config+0x132>
    1338:	2f c0       	rjmp	.+94     	; 0x1398 <Keypad_4x4_Config+0x138>
	{
	case 1: return 7;
    133a:	97 e0       	ldi	r25, 0x07	; 7
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	2e c0       	rjmp	.+92     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 2: return 8;
    1340:	28 e0       	ldi	r18, 0x08	; 8
    1342:	2a 83       	std	Y+2, r18	; 0x02
    1344:	2b c0       	rjmp	.+86     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 3: return 9;
    1346:	39 e0       	ldi	r19, 0x09	; 9
    1348:	3a 83       	std	Y+2, r19	; 0x02
    134a:	28 c0       	rjmp	.+80     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 4: return '/';
    134c:	8f e2       	ldi	r24, 0x2F	; 47
    134e:	8a 83       	std	Y+2, r24	; 0x02
    1350:	25 c0       	rjmp	.+74     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 5: return 4;
    1352:	94 e0       	ldi	r25, 0x04	; 4
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	22 c0       	rjmp	.+68     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 6: return 5;
    1358:	25 e0       	ldi	r18, 0x05	; 5
    135a:	2a 83       	std	Y+2, r18	; 0x02
    135c:	1f c0       	rjmp	.+62     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 7: return 6;
    135e:	36 e0       	ldi	r19, 0x06	; 6
    1360:	3a 83       	std	Y+2, r19	; 0x02
    1362:	1c c0       	rjmp	.+56     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 8: return '*'; /* ASCII Code of '*' */
    1364:	8a e2       	ldi	r24, 0x2A	; 42
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	19 c0       	rjmp	.+50     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 9: return 1;
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	16 c0       	rjmp	.+44     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 10: return 2;
    1370:	22 e0       	ldi	r18, 0x02	; 2
    1372:	2a 83       	std	Y+2, r18	; 0x02
    1374:	13 c0       	rjmp	.+38     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 11: return 3;
    1376:	33 e0       	ldi	r19, 0x03	; 3
    1378:	3a 83       	std	Y+2, r19	; 0x02
    137a:	10 c0       	rjmp	.+32     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 12: return '-'; /* ASCII Code of '-' */
    137c:	8d e2       	ldi	r24, 0x2D	; 45
    137e:	8a 83       	std	Y+2, r24	; 0x02
    1380:	0d c0       	rjmp	.+26     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 13: return 13;  /* ASCII of Enter */
    1382:	9d e0       	ldi	r25, 0x0D	; 13
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	0a c0       	rjmp	.+20     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 14: return 0;
    1388:	1a 82       	std	Y+2, r1	; 0x02
    138a:	08 c0       	rjmp	.+16     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 15:return '=';
    138c:	2d e3       	ldi	r18, 0x3D	; 61
    138e:	2a 83       	std	Y+2, r18	; 0x02
    1390:	05 c0       	rjmp	.+10     	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	case 16: return '+'; /* ASCII Code of '+' */
    1392:	3b e2       	ldi	r19, 0x2B	; 43
    1394:	3a 83       	std	Y+2, r19	; 0x02
    1396:	02 c0       	rjmp	.+4      	; 0x139c <Keypad_4x4_Config+0x13c>
			break;
	default: return button_number;
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
	}

}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <LCD_Init>:
 */

#include"LCD.h"

void LCD_Init()
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	set_pin_direction(PORTC_reg, RS, OUTPUT);
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	0e 94 1c 06 	call	0xc38	; 0xc38 <set_pin_direction>
	set_pin_direction(PORTC_reg,RW,OUTPUT); //make control pins output
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 1c 06 	call	0xc38	; 0xc38 <set_pin_direction>
	set_pin_direction(PORTC_reg,E,OUTPUT);
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 1c 06 	call	0xc38	; 0xc38 <set_pin_direction>

	#if(LCD_BIT_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_DIR|=0xF0; //make upper port pins output
    13d2:	a4 e3       	ldi	r26, 0x34	; 52
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	80 6f       	ori	r24, 0xF0	; 240
    13de:	8c 93       	st	X, r24
	#else
	LCD_DATA_DIR|=0x0F; //make lower port pins output
	#endif
	LCD_SendCommand(FOUR_BIT_DATA_MODE);
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_SendCommand>
	LCD_SendCommand(LCD_4_BIT_TWO_LINE);
    13e6:	88 e2       	ldi	r24, 0x28	; 40
    13e8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_SendCommand>
	#elif(LCD_BIT_MODE==8)
	LCD_DATA_DIR|=0xFF;
	LCD_SendCommand(LCD_8_BIT_TWO_LINE);
	#endif
	LCD_SendCommand(DISPLAY_ON_CURSOR_ON);
    13ec:	8e e0       	ldi	r24, 0x0E	; 14
    13ee:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_SendCommand>
	LCD_SendCommand(CLEAR_DISPLAY);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_SendCommand>
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <LCD_SendCommand>:
void LCD_SendCommand(uint8 command)
{
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	c3 56       	subi	r28, 0x63	; 99
    140c:	d0 40       	sbci	r29, 0x00	; 0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	fe 01       	movw	r30, r28
    141a:	ed 59       	subi	r30, 0x9D	; 157
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 83       	st	Z, r24
	set_pin_value(PORTC_reg, RS, LOW);
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
	set_pin_value(PORTC_reg, RW, LOW);
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    1434:	fe 01       	movw	r30, r28
    1436:	e1 5a       	subi	r30, 0xA1	; 161
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 e8       	ldi	r26, 0x80	; 128
    1440:	bf e3       	ldi	r27, 0x3F	; 63
    1442:	80 83       	st	Z, r24
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	a2 83       	std	Z+2, r26	; 0x02
    1448:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	8e 01       	movw	r16, r28
    144c:	05 5a       	subi	r16, 0xA5	; 165
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	fe 01       	movw	r30, r28
    1452:	e1 5a       	subi	r30, 0xA1	; 161
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a e7       	ldi	r20, 0x7A	; 122
    1464:	53 e4       	ldi	r21, 0x43	; 67
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	f8 01       	movw	r30, r16
    1470:	80 83       	st	Z, r24
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	a2 83       	std	Z+2, r26	; 0x02
    1476:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1478:	fe 01       	movw	r30, r28
    147a:	e5 5a       	subi	r30, 0xA5	; 165
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e8       	ldi	r20, 0x80	; 128
    148c:	5f e3       	ldi	r21, 0x3F	; 63
    148e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1492:	88 23       	and	r24, r24
    1494:	44 f4       	brge	.+16     	; 0x14a6 <LCD_SendCommand+0xa8>
		__ticks = 1;
    1496:	fe 01       	movw	r30, r28
    1498:	e7 5a       	subi	r30, 0xA7	; 167
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	64 c0       	rjmp	.+200    	; 0x156e <LCD_SendCommand+0x170>
	else if (__tmp > 65535)
    14a6:	fe 01       	movw	r30, r28
    14a8:	e5 5a       	subi	r30, 0xA5	; 165
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	0c f0       	brlt	.+2      	; 0x14c6 <LCD_SendCommand+0xc8>
    14c4:	43 c0       	rjmp	.+134    	; 0x154c <LCD_SendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	fe 01       	movw	r30, r28
    14c8:	e1 5a       	subi	r30, 0xA1	; 161
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8e 01       	movw	r16, r28
    14e6:	07 5a       	subi	r16, 0xA7	; 167
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	f8 01       	movw	r30, r16
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
    14fc:	1f c0       	rjmp	.+62     	; 0x153c <LCD_SendCommand+0x13e>
    14fe:	fe 01       	movw	r30, r28
    1500:	e9 5a       	subi	r30, 0xA9	; 169
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	89 e1       	ldi	r24, 0x19	; 25
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    150c:	fe 01       	movw	r30, r28
    150e:	e9 5a       	subi	r30, 0xA9	; 169
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_SendCommand+0x118>
    151a:	fe 01       	movw	r30, r28
    151c:	e9 5a       	subi	r30, 0xA9	; 169
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	de 01       	movw	r26, r28
    1526:	a7 5a       	subi	r26, 0xA7	; 167
    1528:	bf 4f       	sbci	r27, 0xFF	; 255
    152a:	fe 01       	movw	r30, r28
    152c:	e7 5a       	subi	r30, 0xA7	; 167
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	9c 93       	st	X, r25
    153a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153c:	fe 01       	movw	r30, r28
    153e:	e7 5a       	subi	r30, 0xA7	; 167
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	d1 f6       	brne	.-76     	; 0x14fe <LCD_SendCommand+0x100>
    154a:	27 c0       	rjmp	.+78     	; 0x159a <LCD_SendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	8e 01       	movw	r16, r28
    154e:	07 5a       	subi	r16, 0xA7	; 167
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	fe 01       	movw	r30, r28
    1554:	e5 5a       	subi	r30, 0xA5	; 165
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	60 81       	ld	r22, Z
    155a:	71 81       	ldd	r23, Z+1	; 0x01
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	93 81       	ldd	r25, Z+3	; 0x03
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	f8 01       	movw	r30, r16
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
    156e:	de 01       	movw	r26, r28
    1570:	ab 5a       	subi	r26, 0xAB	; 171
    1572:	bf 4f       	sbci	r27, 0xFF	; 255
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5a       	subi	r30, 0xA7	; 167
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	8d 93       	st	X+, r24
    1580:	9c 93       	st	X, r25
    1582:	fe 01       	movw	r30, r28
    1584:	eb 5a       	subi	r30, 0xAB	; 171
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <LCD_SendCommand+0x18e>
    1590:	fe 01       	movw	r30, r28
    1592:	eb 5a       	subi	r30, 0xAB	; 171
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	91 83       	std	Z+1, r25	; 0x01
    1598:	80 83       	st	Z, r24
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    15a4:	fe 01       	movw	r30, r28
    15a6:	ef 5a       	subi	r30, 0xAF	; 175
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a0 e8       	ldi	r26, 0x80	; 128
    15b0:	bf e3       	ldi	r27, 0x3F	; 63
    15b2:	80 83       	st	Z, r24
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	a2 83       	std	Z+2, r26	; 0x02
    15b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ba:	8e 01       	movw	r16, r28
    15bc:	03 5b       	subi	r16, 0xB3	; 179
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	fe 01       	movw	r30, r28
    15c2:	ef 5a       	subi	r30, 0xAF	; 175
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a e7       	ldi	r20, 0x7A	; 122
    15d4:	53 e4       	ldi	r21, 0x43	; 67
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	f8 01       	movw	r30, r16
    15e0:	80 83       	st	Z, r24
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	a2 83       	std	Z+2, r26	; 0x02
    15e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15e8:	fe 01       	movw	r30, r28
    15ea:	e3 5b       	subi	r30, 0xB3	; 179
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	5f e3       	ldi	r21, 0x3F	; 63
    15fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1602:	88 23       	and	r24, r24
    1604:	44 f4       	brge	.+16     	; 0x1616 <LCD_SendCommand+0x218>
		__ticks = 1;
    1606:	fe 01       	movw	r30, r28
    1608:	e5 5b       	subi	r30, 0xB5	; 181
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	64 c0       	rjmp	.+200    	; 0x16de <LCD_SendCommand+0x2e0>
	else if (__tmp > 65535)
    1616:	fe 01       	movw	r30, r28
    1618:	e3 5b       	subi	r30, 0xB3	; 179
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	0c f0       	brlt	.+2      	; 0x1636 <LCD_SendCommand+0x238>
    1634:	43 c0       	rjmp	.+134    	; 0x16bc <LCD_SendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1636:	fe 01       	movw	r30, r28
    1638:	ef 5a       	subi	r30, 0xAF	; 175
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e2       	ldi	r20, 0x20	; 32
    164a:	51 e4       	ldi	r21, 0x41	; 65
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8e 01       	movw	r16, r28
    1656:	05 5b       	subi	r16, 0xB5	; 181
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	f8 01       	movw	r30, r16
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	80 83       	st	Z, r24
    166c:	1f c0       	rjmp	.+62     	; 0x16ac <LCD_SendCommand+0x2ae>
    166e:	fe 01       	movw	r30, r28
    1670:	e7 5b       	subi	r30, 0xB7	; 183
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	89 e1       	ldi	r24, 0x19	; 25
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	fe 01       	movw	r30, r28
    167e:	e7 5b       	subi	r30, 0xB7	; 183
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <LCD_SendCommand+0x288>
    168a:	fe 01       	movw	r30, r28
    168c:	e7 5b       	subi	r30, 0xB7	; 183
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1694:	de 01       	movw	r26, r28
    1696:	a5 5b       	subi	r26, 0xB5	; 181
    1698:	bf 4f       	sbci	r27, 0xFF	; 255
    169a:	fe 01       	movw	r30, r28
    169c:	e5 5b       	subi	r30, 0xB5	; 181
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	11 96       	adiw	r26, 0x01	; 1
    16a8:	9c 93       	st	X, r25
    16aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ac:	fe 01       	movw	r30, r28
    16ae:	e5 5b       	subi	r30, 0xB5	; 181
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	d1 f6       	brne	.-76     	; 0x166e <LCD_SendCommand+0x270>
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <LCD_SendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	8e 01       	movw	r16, r28
    16be:	05 5b       	subi	r16, 0xB5	; 181
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	fe 01       	movw	r30, r28
    16c4:	e3 5b       	subi	r30, 0xB3	; 179
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	f8 01       	movw	r30, r16
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	de 01       	movw	r26, r28
    16e0:	a9 5b       	subi	r26, 0xB9	; 185
    16e2:	bf 4f       	sbci	r27, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	e5 5b       	subi	r30, 0xB5	; 181
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	8d 93       	st	X+, r24
    16f0:	9c 93       	st	X, r25
    16f2:	fe 01       	movw	r30, r28
    16f4:	e9 5b       	subi	r30, 0xB9	; 185
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_SendCommand+0x2fe>
    1700:	fe 01       	movw	r30, r28
    1702:	e9 5b       	subi	r30, 0xB9	; 185
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
	_delay_ms(1);

	#if(LCD_BIT_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|(command & 0xF0);
    170a:	a5 e3       	ldi	r26, 0x35	; 53
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e3       	ldi	r30, 0x35	; 53
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	98 2f       	mov	r25, r24
    1716:	9f 70       	andi	r25, 0x0F	; 15
    1718:	fe 01       	movw	r30, r28
    171a:	ed 59       	subi	r30, 0x9D	; 157
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	80 7f       	andi	r24, 0xF0	; 240
    1722:	89 2b       	or	r24, r25
    1724:	8c 93       	st	X, r24
    1726:	fe 01       	movw	r30, r28
    1728:	ed 5b       	subi	r30, 0xBD	; 189
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e8       	ldi	r26, 0x80	; 128
    1732:	bf e3       	ldi	r27, 0x3F	; 63
    1734:	80 83       	st	Z, r24
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	a2 83       	std	Z+2, r26	; 0x02
    173a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	8e 01       	movw	r16, r28
    173e:	01 5c       	subi	r16, 0xC1	; 193
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	fe 01       	movw	r30, r28
    1744:	ed 5b       	subi	r30, 0xBD	; 189
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	4a e7       	ldi	r20, 0x7A	; 122
    1756:	53 e4       	ldi	r21, 0x43	; 67
    1758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	f8 01       	movw	r30, r16
    1762:	80 83       	st	Z, r24
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	a2 83       	std	Z+2, r26	; 0x02
    1768:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    176a:	fe 01       	movw	r30, r28
    176c:	ff 96       	adiw	r30, 0x3f	; 63
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_SendCommand+0x392>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9e af       	std	Y+62, r25	; 0x3e
    178c:	8d af       	std	Y+61, r24	; 0x3d
    178e:	46 c0       	rjmp	.+140    	; 0x181c <LCD_SendCommand+0x41e>
	else if (__tmp > 65535)
    1790:	fe 01       	movw	r30, r28
    1792:	ff 96       	adiw	r30, 0x3f	; 63
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	64 f5       	brge	.+88     	; 0x1804 <LCD_SendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	fe 01       	movw	r30, r28
    17ae:	ed 5b       	subi	r30, 0xBD	; 189
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9e af       	std	Y+62, r25	; 0x3e
    17d8:	8d af       	std	Y+61, r24	; 0x3d
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <LCD_SendCommand+0x3fc>
    17dc:	89 e1       	ldi	r24, 0x19	; 25
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9c af       	std	Y+60, r25	; 0x3c
    17e2:	8b af       	std	Y+59, r24	; 0x3b
    17e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    17e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_SendCommand+0x3ea>
    17ec:	9c af       	std	Y+60, r25	; 0x3c
    17ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	9e af       	std	Y+62, r25	; 0x3e
    17f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    17fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	69 f7       	brne	.-38     	; 0x17dc <LCD_SendCommand+0x3de>
    1802:	16 c0       	rjmp	.+44     	; 0x1830 <LCD_SendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	fe 01       	movw	r30, r28
    1806:	ff 96       	adiw	r30, 0x3f	; 63
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9e af       	std	Y+62, r25	; 0x3e
    181a:	8d af       	std	Y+61, r24	; 0x3d
    181c:	8d ad       	ldd	r24, Y+61	; 0x3d
    181e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1820:	9a af       	std	Y+58, r25	; 0x3a
    1822:	89 af       	std	Y+57, r24	; 0x39
    1824:	89 ad       	ldd	r24, Y+57	; 0x39
    1826:	9a ad       	ldd	r25, Y+58	; 0x3a
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_SendCommand+0x42a>
    182c:	9a af       	std	Y+58, r25	; 0x3a
    182e:	89 af       	std	Y+57, r24	; 0x39
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|((command & 0xF0)>>4);
	#endif

	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    1830:	82 e0       	ldi	r24, 0x02	; 2
    1832:	62 e0       	ldi	r22, 0x02	; 2
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a0 e8       	ldi	r26, 0x80	; 128
    1840:	bf e3       	ldi	r27, 0x3F	; 63
    1842:	8d ab       	std	Y+53, r24	; 0x35
    1844:	9e ab       	std	Y+54, r25	; 0x36
    1846:	af ab       	std	Y+55, r26	; 0x37
    1848:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184a:	6d a9       	ldd	r22, Y+53	; 0x35
    184c:	7e a9       	ldd	r23, Y+54	; 0x36
    184e:	8f a9       	ldd	r24, Y+55	; 0x37
    1850:	98 ad       	ldd	r25, Y+56	; 0x38
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a e7       	ldi	r20, 0x7A	; 122
    1858:	53 e4       	ldi	r21, 0x43	; 67
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	89 ab       	std	Y+49, r24	; 0x31
    1864:	9a ab       	std	Y+50, r25	; 0x32
    1866:	ab ab       	std	Y+51, r26	; 0x33
    1868:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    186a:	69 a9       	ldd	r22, Y+49	; 0x31
    186c:	7a a9       	ldd	r23, Y+50	; 0x32
    186e:	8b a9       	ldd	r24, Y+51	; 0x33
    1870:	9c a9       	ldd	r25, Y+52	; 0x34
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    187e:	88 23       	and	r24, r24
    1880:	2c f4       	brge	.+10     	; 0x188c <LCD_SendCommand+0x48e>
		__ticks = 1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	98 ab       	std	Y+48, r25	; 0x30
    1888:	8f a7       	std	Y+47, r24	; 0x2f
    188a:	3f c0       	rjmp	.+126    	; 0x190a <LCD_SendCommand+0x50c>
	else if (__tmp > 65535)
    188c:	69 a9       	ldd	r22, Y+49	; 0x31
    188e:	7a a9       	ldd	r23, Y+50	; 0x32
    1890:	8b a9       	ldd	r24, Y+51	; 0x33
    1892:	9c a9       	ldd	r25, Y+52	; 0x34
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	4f e7       	ldi	r20, 0x7F	; 127
    189a:	57 e4       	ldi	r21, 0x47	; 71
    189c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	4c f5       	brge	.+82     	; 0x18f6 <LCD_SendCommand+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a4:	6d a9       	ldd	r22, Y+53	; 0x35
    18a6:	7e a9       	ldd	r23, Y+54	; 0x36
    18a8:	8f a9       	ldd	r24, Y+55	; 0x37
    18aa:	98 ad       	ldd	r25, Y+56	; 0x38
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	98 ab       	std	Y+48, r25	; 0x30
    18ca:	8f a7       	std	Y+47, r24	; 0x2f
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <LCD_SendCommand+0x4ee>
    18ce:	89 e1       	ldi	r24, 0x19	; 25
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9e a7       	std	Y+46, r25	; 0x2e
    18d4:	8d a7       	std	Y+45, r24	; 0x2d
    18d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    18d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_SendCommand+0x4dc>
    18de:	9e a7       	std	Y+46, r25	; 0x2e
    18e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e4:	98 a9       	ldd	r25, Y+48	; 0x30
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	98 ab       	std	Y+48, r25	; 0x30
    18ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ee:	98 a9       	ldd	r25, Y+48	; 0x30
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f7       	brne	.-38     	; 0x18ce <LCD_SendCommand+0x4d0>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <LCD_SendCommand+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f6:	69 a9       	ldd	r22, Y+49	; 0x31
    18f8:	7a a9       	ldd	r23, Y+50	; 0x32
    18fa:	8b a9       	ldd	r24, Y+51	; 0x33
    18fc:	9c a9       	ldd	r25, Y+52	; 0x34
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	98 ab       	std	Y+48, r25	; 0x30
    1908:	8f a7       	std	Y+47, r24	; 0x2f
    190a:	8f a5       	ldd	r24, Y+47	; 0x2f
    190c:	98 a9       	ldd	r25, Y+48	; 0x30
    190e:	9c a7       	std	Y+44, r25	; 0x2c
    1910:	8b a7       	std	Y+43, r24	; 0x2b
    1912:	8b a5       	ldd	r24, Y+43	; 0x2b
    1914:	9c a5       	ldd	r25, Y+44	; 0x2c
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_SendCommand+0x518>
    191a:	9c a7       	std	Y+44, r25	; 0x2c
    191c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 e8       	ldi	r26, 0x80	; 128
    192e:	bf e3       	ldi	r27, 0x3F	; 63
    1930:	8f a3       	std	Y+39, r24	; 0x27
    1932:	98 a7       	std	Y+40, r25	; 0x28
    1934:	a9 a7       	std	Y+41, r26	; 0x29
    1936:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1938:	6f a1       	ldd	r22, Y+39	; 0x27
    193a:	78 a5       	ldd	r23, Y+40	; 0x28
    193c:	89 a5       	ldd	r24, Y+41	; 0x29
    193e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a e7       	ldi	r20, 0x7A	; 122
    1946:	53 e4       	ldi	r21, 0x43	; 67
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8b a3       	std	Y+35, r24	; 0x23
    1952:	9c a3       	std	Y+36, r25	; 0x24
    1954:	ad a3       	std	Y+37, r26	; 0x25
    1956:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1958:	6b a1       	ldd	r22, Y+35	; 0x23
    195a:	7c a1       	ldd	r23, Y+36	; 0x24
    195c:	8d a1       	ldd	r24, Y+37	; 0x25
    195e:	9e a1       	ldd	r25, Y+38	; 0x26
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e8       	ldi	r20, 0x80	; 128
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196c:	88 23       	and	r24, r24
    196e:	2c f4       	brge	.+10     	; 0x197a <LCD_SendCommand+0x57c>
		__ticks = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
    1978:	3f c0       	rjmp	.+126    	; 0x19f8 <LCD_SendCommand+0x5fa>
	else if (__tmp > 65535)
    197a:	6b a1       	ldd	r22, Y+35	; 0x23
    197c:	7c a1       	ldd	r23, Y+36	; 0x24
    197e:	8d a1       	ldd	r24, Y+37	; 0x25
    1980:	9e a1       	ldd	r25, Y+38	; 0x26
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	3f ef       	ldi	r19, 0xFF	; 255
    1986:	4f e7       	ldi	r20, 0x7F	; 127
    1988:	57 e4       	ldi	r21, 0x47	; 71
    198a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198e:	18 16       	cp	r1, r24
    1990:	4c f5       	brge	.+82     	; 0x19e4 <LCD_SendCommand+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1992:	6f a1       	ldd	r22, Y+39	; 0x27
    1994:	78 a5       	ldd	r23, Y+40	; 0x28
    1996:	89 a5       	ldd	r24, Y+41	; 0x29
    1998:	9a a5       	ldd	r25, Y+42	; 0x2a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e2       	ldi	r20, 0x20	; 32
    19a0:	51 e4       	ldi	r21, 0x41	; 65
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9a a3       	std	Y+34, r25	; 0x22
    19b8:	89 a3       	std	Y+33, r24	; 0x21
    19ba:	0f c0       	rjmp	.+30     	; 0x19da <LCD_SendCommand+0x5dc>
    19bc:	89 e1       	ldi	r24, 0x19	; 25
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	98 a3       	std	Y+32, r25	; 0x20
    19c2:	8f 8f       	std	Y+31, r24	; 0x1f
    19c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19c6:	98 a1       	ldd	r25, Y+32	; 0x20
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <LCD_SendCommand+0x5ca>
    19cc:	98 a3       	std	Y+32, r25	; 0x20
    19ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	89 a1       	ldd	r24, Y+33	; 0x21
    19d2:	9a a1       	ldd	r25, Y+34	; 0x22
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	9a a3       	std	Y+34, r25	; 0x22
    19d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19da:	89 a1       	ldd	r24, Y+33	; 0x21
    19dc:	9a a1       	ldd	r25, Y+34	; 0x22
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	69 f7       	brne	.-38     	; 0x19bc <LCD_SendCommand+0x5be>
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <LCD_SendCommand+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e4:	6b a1       	ldd	r22, Y+35	; 0x23
    19e6:	7c a1       	ldd	r23, Y+36	; 0x24
    19e8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ea:	9e a1       	ldd	r25, Y+38	; 0x26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9a a3       	std	Y+34, r25	; 0x22
    19f6:	89 a3       	std	Y+33, r24	; 0x21
    19f8:	89 a1       	ldd	r24, Y+33	; 0x21
    19fa:	9a a1       	ldd	r25, Y+34	; 0x22
    19fc:	9e 8f       	std	Y+30, r25	; 0x1e
    19fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_SendCommand+0x606>
    1a08:	9e 8f       	std	Y+30, r25	; 0x1e
    1a0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|((command & 0x0F)<<4);
    1a0c:	a5 e3       	ldi	r26, 0x35	; 53
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e5 e3       	ldi	r30, 0x35	; 53
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	28 2f       	mov	r18, r24
    1a18:	2f 70       	andi	r18, 0x0F	; 15
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 59       	subi	r30, 0x9D	; 157
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 81       	ld	r24, Z
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	82 95       	swap	r24
    1a28:	92 95       	swap	r25
    1a2a:	90 7f       	andi	r25, 0xF0	; 240
    1a2c:	98 27       	eor	r25, r24
    1a2e:	80 7f       	andi	r24, 0xF0	; 240
    1a30:	98 27       	eor	r25, r24
    1a32:	82 2b       	or	r24, r18
    1a34:	8c 93       	st	X, r24
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a0 e8       	ldi	r26, 0x80	; 128
    1a3c:	bf e3       	ldi	r27, 0x3F	; 63
    1a3e:	89 8f       	std	Y+25, r24	; 0x19
    1a40:	9a 8f       	std	Y+26, r25	; 0x1a
    1a42:	ab 8f       	std	Y+27, r26	; 0x1b
    1a44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	69 8d       	ldd	r22, Y+25	; 0x19
    1a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4a e7       	ldi	r20, 0x7A	; 122
    1a54:	53 e4       	ldi	r21, 0x43	; 67
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	8d 8b       	std	Y+21, r24	; 0x15
    1a60:	9e 8b       	std	Y+22, r25	; 0x16
    1a62:	af 8b       	std	Y+23, r26	; 0x17
    1a64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a66:	6d 89       	ldd	r22, Y+21	; 0x15
    1a68:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <LCD_SendCommand+0x68a>
		__ticks = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9c 8b       	std	Y+20, r25	; 0x14
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
    1a86:	3f c0       	rjmp	.+126    	; 0x1b06 <LCD_SendCommand+0x708>
	else if (__tmp > 65535)
    1a88:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	3f ef       	ldi	r19, 0xFF	; 255
    1a94:	4f e7       	ldi	r20, 0x7F	; 127
    1a96:	57 e4       	ldi	r21, 0x47	; 71
    1a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	4c f5       	brge	.+82     	; 0x1af2 <LCD_SendCommand+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa0:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e2       	ldi	r20, 0x20	; 32
    1aae:	51 e4       	ldi	r21, 0x41	; 65
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9c 8b       	std	Y+20, r25	; 0x14
    1ac6:	8b 8b       	std	Y+19, r24	; 0x13
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <LCD_SendCommand+0x6ea>
    1aca:	89 e1       	ldi	r24, 0x19	; 25
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9a 8b       	std	Y+18, r25	; 0x12
    1ad0:	89 8b       	std	Y+17, r24	; 0x11
    1ad2:	89 89       	ldd	r24, Y+17	; 0x11
    1ad4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_SendCommand+0x6d8>
    1ada:	9a 8b       	std	Y+18, r25	; 0x12
    1adc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aea:	9c 89       	ldd	r25, Y+20	; 0x14
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	69 f7       	brne	.-38     	; 0x1aca <LCD_SendCommand+0x6cc>
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <LCD_SendCommand+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af2:	6d 89       	ldd	r22, Y+21	; 0x15
    1af4:	7e 89       	ldd	r23, Y+22	; 0x16
    1af6:	8f 89       	ldd	r24, Y+23	; 0x17
    1af8:	98 8d       	ldd	r25, Y+24	; 0x18
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9c 8b       	std	Y+20, r25	; 0x14
    1b04:	8b 8b       	std	Y+19, r24	; 0x13
    1b06:	8b 89       	ldd	r24, Y+19	; 0x13
    1b08:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0a:	98 8b       	std	Y+16, r25	; 0x10
    1b0c:	8f 87       	std	Y+15, r24	; 0x0f
    1b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b10:	98 89       	ldd	r25, Y+16	; 0x10
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_SendCommand+0x714>
    1b16:	98 8b       	std	Y+16, r25	; 0x10
    1b18:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|(command & 0x0F);
	#endif
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	62 e0       	ldi	r22, 0x02	; 2
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e8       	ldi	r26, 0x80	; 128
    1b2a:	bf e3       	ldi	r27, 0x3F	; 63
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
    1b2e:	9c 87       	std	Y+12, r25	; 0x0c
    1b30:	ad 87       	std	Y+13, r26	; 0x0d
    1b32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a e7       	ldi	r20, 0x7A	; 122
    1b42:	53 e4       	ldi	r21, 0x43	; 67
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8f 83       	std	Y+7, r24	; 0x07
    1b4e:	98 87       	std	Y+8, r25	; 0x08
    1b50:	a9 87       	std	Y+9, r26	; 0x09
    1b52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_SendCommand+0x778>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <LCD_SendCommand+0x7f6>
	else if (__tmp > 65535)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <LCD_SendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <LCD_SendCommand+0x7d8>
    1bb8:	89 e1       	ldi	r24, 0x19	; 25
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_SendCommand+0x7c6>
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <LCD_SendCommand+0x7ba>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <LCD_SendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_SendCommand+0x802>
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT=command;
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
	_delay_ms(1);
	#endif
}
    1c08:	cd 59       	subi	r28, 0x9D	; 157
    1c0a:	df 4f       	sbci	r29, 0xFF	; 255
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	08 95       	ret

00001c20 <LCD_SendCharacter>:
void LCD_SendCharacter(uint8 data)
{
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	c3 56       	subi	r28, 0x63	; 99
    1c2e:	d0 40       	sbci	r29, 0x00	; 0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ed 59       	subi	r30, 0x9D	; 157
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 83       	st	Z, r24
	set_pin_value(PORTC_reg, RS, HIGH);
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
	set_pin_value(PORTC_reg, RW, LOW);
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    1c56:	fe 01       	movw	r30, r28
    1c58:	e1 5a       	subi	r30, 0xA1	; 161
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e8       	ldi	r26, 0x80	; 128
    1c62:	bf e3       	ldi	r27, 0x3F	; 63
    1c64:	80 83       	st	Z, r24
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	a2 83       	std	Z+2, r26	; 0x02
    1c6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	05 5a       	subi	r16, 0xA5	; 165
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	fe 01       	movw	r30, r28
    1c74:	e1 5a       	subi	r30, 0xA1	; 161
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a e7       	ldi	r20, 0x7A	; 122
    1c86:	53 e4       	ldi	r21, 0x43	; 67
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	f8 01       	movw	r30, r16
    1c92:	80 83       	st	Z, r24
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	a2 83       	std	Z+2, r26	; 0x02
    1c98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e5 5a       	subi	r30, 0xA5	; 165
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	44 f4       	brge	.+16     	; 0x1cc8 <LCD_SendCharacter+0xa8>
		__ticks = 1;
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e7 5a       	subi	r30, 0xA7	; 167
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	64 c0       	rjmp	.+200    	; 0x1d90 <LCD_SendCharacter+0x170>
	else if (__tmp > 65535)
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e5 5a       	subi	r30, 0xA5	; 165
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	0c f0       	brlt	.+2      	; 0x1ce8 <LCD_SendCharacter+0xc8>
    1ce6:	43 c0       	rjmp	.+134    	; 0x1d6e <LCD_SendCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e1 5a       	subi	r30, 0xA1	; 161
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8e 01       	movw	r16, r28
    1d08:	07 5a       	subi	r16, 0xA7	; 167
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	f8 01       	movw	r30, r16
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
    1d1e:	1f c0       	rjmp	.+62     	; 0x1d5e <LCD_SendCharacter+0x13e>
    1d20:	fe 01       	movw	r30, r28
    1d22:	e9 5a       	subi	r30, 0xA9	; 169
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	89 e1       	ldi	r24, 0x19	; 25
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e9 5a       	subi	r30, 0xA9	; 169
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_SendCharacter+0x118>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e9 5a       	subi	r30, 0xA9	; 169
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d46:	de 01       	movw	r26, r28
    1d48:	a7 5a       	subi	r26, 0xA7	; 167
    1d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e7 5a       	subi	r30, 0xA7	; 167
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	11 96       	adiw	r26, 0x01	; 1
    1d5a:	9c 93       	st	X, r25
    1d5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e7 5a       	subi	r30, 0xA7	; 167
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	d1 f6       	brne	.-76     	; 0x1d20 <LCD_SendCharacter+0x100>
    1d6c:	27 c0       	rjmp	.+78     	; 0x1dbc <LCD_SendCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	8e 01       	movw	r16, r28
    1d70:	07 5a       	subi	r16, 0xA7	; 167
    1d72:	1f 4f       	sbci	r17, 0xFF	; 255
    1d74:	fe 01       	movw	r30, r28
    1d76:	e5 5a       	subi	r30, 0xA5	; 165
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	de 01       	movw	r26, r28
    1d92:	ab 5a       	subi	r26, 0xAB	; 171
    1d94:	bf 4f       	sbci	r27, 0xFF	; 255
    1d96:	fe 01       	movw	r30, r28
    1d98:	e7 5a       	subi	r30, 0xA7	; 167
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	8d 93       	st	X+, r24
    1da2:	9c 93       	st	X, r25
    1da4:	fe 01       	movw	r30, r28
    1da6:	eb 5a       	subi	r30, 0xAB	; 171
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_SendCharacter+0x18e>
    1db2:	fe 01       	movw	r30, r28
    1db4:	eb 5a       	subi	r30, 0xAB	; 171
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    1dbc:	82 e0       	ldi	r24, 0x02	; 2
    1dbe:	62 e0       	ldi	r22, 0x02	; 2
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ef 5a       	subi	r30, 0xAF	; 175
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e8       	ldi	r26, 0x80	; 128
    1dd2:	bf e3       	ldi	r27, 0x3F	; 63
    1dd4:	80 83       	st	Z, r24
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	a2 83       	std	Z+2, r26	; 0x02
    1dda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	8e 01       	movw	r16, r28
    1dde:	03 5b       	subi	r16, 0xB3	; 179
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	fe 01       	movw	r30, r28
    1de4:	ef 5a       	subi	r30, 0xAF	; 175
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	53 e4       	ldi	r21, 0x43	; 67
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	f8 01       	movw	r30, r16
    1e02:	80 83       	st	Z, r24
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	a2 83       	std	Z+2, r26	; 0x02
    1e08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e3 5b       	subi	r30, 0xB3	; 179
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	44 f4       	brge	.+16     	; 0x1e38 <LCD_SendCharacter+0x218>
		__ticks = 1;
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e5 5b       	subi	r30, 0xB5	; 181
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
    1e36:	64 c0       	rjmp	.+200    	; 0x1f00 <LCD_SendCharacter+0x2e0>
	else if (__tmp > 65535)
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e3 5b       	subi	r30, 0xB3	; 179
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <LCD_SendCharacter+0x238>
    1e56:	43 c0       	rjmp	.+134    	; 0x1ede <LCD_SendCharacter+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e58:	fe 01       	movw	r30, r28
    1e5a:	ef 5a       	subi	r30, 0xAF	; 175
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	8e 01       	movw	r16, r28
    1e78:	05 5b       	subi	r16, 0xB5	; 181
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	f8 01       	movw	r30, r16
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
    1e8e:	1f c0       	rjmp	.+62     	; 0x1ece <LCD_SendCharacter+0x2ae>
    1e90:	fe 01       	movw	r30, r28
    1e92:	e7 5b       	subi	r30, 0xB7	; 183
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	89 e1       	ldi	r24, 0x19	; 25
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	80 83       	st	Z, r24
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 5b       	subi	r30, 0xB7	; 183
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_SendCharacter+0x288>
    1eac:	fe 01       	movw	r30, r28
    1eae:	e7 5b       	subi	r30, 0xB7	; 183
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	de 01       	movw	r26, r28
    1eb8:	a5 5b       	subi	r26, 0xB5	; 181
    1eba:	bf 4f       	sbci	r27, 0xFF	; 255
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e5 5b       	subi	r30, 0xB5	; 181
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	80 81       	ld	r24, Z
    1ec4:	91 81       	ldd	r25, Z+1	; 0x01
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	11 96       	adiw	r26, 0x01	; 1
    1eca:	9c 93       	st	X, r25
    1ecc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e5 5b       	subi	r30, 0xB5	; 181
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	d1 f6       	brne	.-76     	; 0x1e90 <LCD_SendCharacter+0x270>
    1edc:	27 c0       	rjmp	.+78     	; 0x1f2c <LCD_SendCharacter+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ede:	8e 01       	movw	r16, r28
    1ee0:	05 5b       	subi	r16, 0xB5	; 181
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e3 5b       	subi	r30, 0xB3	; 179
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	f8 01       	movw	r30, r16
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	80 83       	st	Z, r24
    1f00:	de 01       	movw	r26, r28
    1f02:	a9 5b       	subi	r26, 0xB9	; 185
    1f04:	bf 4f       	sbci	r27, 0xFF	; 255
    1f06:	fe 01       	movw	r30, r28
    1f08:	e5 5b       	subi	r30, 0xB5	; 181
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	8d 93       	st	X+, r24
    1f12:	9c 93       	st	X, r25
    1f14:	fe 01       	movw	r30, r28
    1f16:	e9 5b       	subi	r30, 0xB9	; 185
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_SendCharacter+0x2fe>
    1f22:	fe 01       	movw	r30, r28
    1f24:	e9 5b       	subi	r30, 0xB9	; 185
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
	_delay_ms(1);

	#if(LCD_BIT_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|(data & 0xF0);
    1f2c:	a5 e3       	ldi	r26, 0x35	; 53
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e5 e3       	ldi	r30, 0x35	; 53
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	98 2f       	mov	r25, r24
    1f38:	9f 70       	andi	r25, 0x0F	; 15
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ed 59       	subi	r30, 0x9D	; 157
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	80 7f       	andi	r24, 0xF0	; 240
    1f44:	89 2b       	or	r24, r25
    1f46:	8c 93       	st	X, r24
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ed 5b       	subi	r30, 0xBD	; 189
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 e8       	ldi	r26, 0x80	; 128
    1f54:	bf e3       	ldi	r27, 0x3F	; 63
    1f56:	80 83       	st	Z, r24
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	a2 83       	std	Z+2, r26	; 0x02
    1f5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	01 5c       	subi	r16, 0xC1	; 193
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	ed 5b       	subi	r30, 0xBD	; 189
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a e7       	ldi	r20, 0x7A	; 122
    1f78:	53 e4       	ldi	r21, 0x43	; 67
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 83       	st	Z, r24
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	a2 83       	std	Z+2, r26	; 0x02
    1f8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ff 96       	adiw	r30, 0x3f	; 63
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_SendCharacter+0x392>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e af       	std	Y+62, r25	; 0x3e
    1fae:	8d af       	std	Y+61, r24	; 0x3d
    1fb0:	46 c0       	rjmp	.+140    	; 0x203e <LCD_SendCharacter+0x41e>
	else if (__tmp > 65535)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ff 96       	adiw	r30, 0x3f	; 63
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	64 f5       	brge	.+88     	; 0x2026 <LCD_SendCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ed 5b       	subi	r30, 0xBD	; 189
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9e af       	std	Y+62, r25	; 0x3e
    1ffa:	8d af       	std	Y+61, r24	; 0x3d
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_SendCharacter+0x3fc>
    1ffe:	89 e1       	ldi	r24, 0x19	; 25
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c af       	std	Y+60, r25	; 0x3c
    2004:	8b af       	std	Y+59, r24	; 0x3b
    2006:	8b ad       	ldd	r24, Y+59	; 0x3b
    2008:	9c ad       	ldd	r25, Y+60	; 0x3c
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_SendCharacter+0x3ea>
    200e:	9c af       	std	Y+60, r25	; 0x3c
    2010:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8d ad       	ldd	r24, Y+61	; 0x3d
    2014:	9e ad       	ldd	r25, Y+62	; 0x3e
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9e af       	std	Y+62, r25	; 0x3e
    201a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8d ad       	ldd	r24, Y+61	; 0x3d
    201e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_SendCharacter+0x3de>
    2024:	16 c0       	rjmp	.+44     	; 0x2052 <LCD_SendCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	fe 01       	movw	r30, r28
    2028:	ff 96       	adiw	r30, 0x3f	; 63
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9e af       	std	Y+62, r25	; 0x3e
    203c:	8d af       	std	Y+61, r24	; 0x3d
    203e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2040:	9e ad       	ldd	r25, Y+62	; 0x3e
    2042:	9a af       	std	Y+58, r25	; 0x3a
    2044:	89 af       	std	Y+57, r24	; 0x39
    2046:	89 ad       	ldd	r24, Y+57	; 0x39
    2048:	9a ad       	ldd	r25, Y+58	; 0x3a
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_SendCharacter+0x42a>
    204e:	9a af       	std	Y+58, r25	; 0x3a
    2050:	89 af       	std	Y+57, r24	; 0x39
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|((data & 0xF0)>>4);
	#endif

	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	62 e0       	ldi	r22, 0x02	; 2
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e8       	ldi	r26, 0x80	; 128
    2062:	bf e3       	ldi	r27, 0x3F	; 63
    2064:	8d ab       	std	Y+53, r24	; 0x35
    2066:	9e ab       	std	Y+54, r25	; 0x36
    2068:	af ab       	std	Y+55, r26	; 0x37
    206a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	6d a9       	ldd	r22, Y+53	; 0x35
    206e:	7e a9       	ldd	r23, Y+54	; 0x36
    2070:	8f a9       	ldd	r24, Y+55	; 0x37
    2072:	98 ad       	ldd	r25, Y+56	; 0x38
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	53 e4       	ldi	r21, 0x43	; 67
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	89 ab       	std	Y+49, r24	; 0x31
    2086:	9a ab       	std	Y+50, r25	; 0x32
    2088:	ab ab       	std	Y+51, r26	; 0x33
    208a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    208c:	69 a9       	ldd	r22, Y+49	; 0x31
    208e:	7a a9       	ldd	r23, Y+50	; 0x32
    2090:	8b a9       	ldd	r24, Y+51	; 0x33
    2092:	9c a9       	ldd	r25, Y+52	; 0x34
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <LCD_SendCharacter+0x48e>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	98 ab       	std	Y+48, r25	; 0x30
    20aa:	8f a7       	std	Y+47, r24	; 0x2f
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <LCD_SendCharacter+0x50c>
	else if (__tmp > 65535)
    20ae:	69 a9       	ldd	r22, Y+49	; 0x31
    20b0:	7a a9       	ldd	r23, Y+50	; 0x32
    20b2:	8b a9       	ldd	r24, Y+51	; 0x33
    20b4:	9c a9       	ldd	r25, Y+52	; 0x34
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <LCD_SendCharacter+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	6d a9       	ldd	r22, Y+53	; 0x35
    20c8:	7e a9       	ldd	r23, Y+54	; 0x36
    20ca:	8f a9       	ldd	r24, Y+55	; 0x37
    20cc:	98 ad       	ldd	r25, Y+56	; 0x38
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	98 ab       	std	Y+48, r25	; 0x30
    20ec:	8f a7       	std	Y+47, r24	; 0x2f
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <LCD_SendCharacter+0x4ee>
    20f0:	89 e1       	ldi	r24, 0x19	; 25
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9e a7       	std	Y+46, r25	; 0x2e
    20f6:	8d a7       	std	Y+45, r24	; 0x2d
    20f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_SendCharacter+0x4dc>
    2100:	9e a7       	std	Y+46, r25	; 0x2e
    2102:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8f a5       	ldd	r24, Y+47	; 0x2f
    2106:	98 a9       	ldd	r25, Y+48	; 0x30
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	98 ab       	std	Y+48, r25	; 0x30
    210c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2110:	98 a9       	ldd	r25, Y+48	; 0x30
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <LCD_SendCharacter+0x4d0>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <LCD_SendCharacter+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	69 a9       	ldd	r22, Y+49	; 0x31
    211a:	7a a9       	ldd	r23, Y+50	; 0x32
    211c:	8b a9       	ldd	r24, Y+51	; 0x33
    211e:	9c a9       	ldd	r25, Y+52	; 0x34
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	8f a5       	ldd	r24, Y+47	; 0x2f
    212e:	98 a9       	ldd	r25, Y+48	; 0x30
    2130:	9c a7       	std	Y+44, r25	; 0x2c
    2132:	8b a7       	std	Y+43, r24	; 0x2b
    2134:	8b a5       	ldd	r24, Y+43	; 0x2b
    2136:	9c a5       	ldd	r25, Y+44	; 0x2c
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_SendCharacter+0x518>
    213c:	9c a7       	std	Y+44, r25	; 0x2c
    213e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, HIGH);
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	62 e0       	ldi	r22, 0x02	; 2
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	8f a3       	std	Y+39, r24	; 0x27
    2154:	98 a7       	std	Y+40, r25	; 0x28
    2156:	a9 a7       	std	Y+41, r26	; 0x29
    2158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	6f a1       	ldd	r22, Y+39	; 0x27
    215c:	78 a5       	ldd	r23, Y+40	; 0x28
    215e:	89 a5       	ldd	r24, Y+41	; 0x29
    2160:	9a a5       	ldd	r25, Y+42	; 0x2a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	53 e4       	ldi	r21, 0x43	; 67
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8b a3       	std	Y+35, r24	; 0x23
    2174:	9c a3       	std	Y+36, r25	; 0x24
    2176:	ad a3       	std	Y+37, r26	; 0x25
    2178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_SendCharacter+0x57c>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_SendCharacter+0x5fa>
	else if (__tmp > 65535)
    219c:	6b a1       	ldd	r22, Y+35	; 0x23
    219e:	7c a1       	ldd	r23, Y+36	; 0x24
    21a0:	8d a1       	ldd	r24, Y+37	; 0x25
    21a2:	9e a1       	ldd	r25, Y+38	; 0x26
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_SendCharacter+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	6f a1       	ldd	r22, Y+39	; 0x27
    21b6:	78 a5       	ldd	r23, Y+40	; 0x28
    21b8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_SendCharacter+0x5dc>
    21de:	89 e1       	ldi	r24, 0x19	; 25
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	98 a3       	std	Y+32, r25	; 0x20
    21e4:	8f 8f       	std	Y+31, r24	; 0x1f
    21e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_SendCharacter+0x5ca>
    21ee:	98 a3       	std	Y+32, r25	; 0x20
    21f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	89 a1       	ldd	r24, Y+33	; 0x21
    21f4:	9a a1       	ldd	r25, Y+34	; 0x22
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9a a3       	std	Y+34, r25	; 0x22
    21fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	89 a1       	ldd	r24, Y+33	; 0x21
    21fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_SendCharacter+0x5be>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_SendCharacter+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9a a3       	std	Y+34, r25	; 0x22
    2218:	89 a3       	std	Y+33, r24	; 0x21
    221a:	89 a1       	ldd	r24, Y+33	; 0x21
    221c:	9a a1       	ldd	r25, Y+34	; 0x22
    221e:	9e 8f       	std	Y+30, r25	; 0x1e
    2220:	8d 8f       	std	Y+29, r24	; 0x1d
    2222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_SendCharacter+0x606>
    222a:	9e 8f       	std	Y+30, r25	; 0x1e
    222c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F)|((data & 0x0F)<<4);
    222e:	a5 e3       	ldi	r26, 0x35	; 53
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e5 e3       	ldi	r30, 0x35	; 53
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	28 2f       	mov	r18, r24
    223a:	2f 70       	andi	r18, 0x0F	; 15
    223c:	fe 01       	movw	r30, r28
    223e:	ed 59       	subi	r30, 0x9D	; 157
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	82 95       	swap	r24
    224a:	92 95       	swap	r25
    224c:	90 7f       	andi	r25, 0xF0	; 240
    224e:	98 27       	eor	r25, r24
    2250:	80 7f       	andi	r24, 0xF0	; 240
    2252:	98 27       	eor	r25, r24
    2254:	82 2b       	or	r24, r18
    2256:	8c 93       	st	X, r24
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	a0 e8       	ldi	r26, 0x80	; 128
    225e:	bf e3       	ldi	r27, 0x3F	; 63
    2260:	89 8f       	std	Y+25, r24	; 0x19
    2262:	9a 8f       	std	Y+26, r25	; 0x1a
    2264:	ab 8f       	std	Y+27, r26	; 0x1b
    2266:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	4a e7       	ldi	r20, 0x7A	; 122
    2276:	53 e4       	ldi	r21, 0x43	; 67
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	8d 8b       	std	Y+21, r24	; 0x15
    2282:	9e 8b       	std	Y+22, r25	; 0x16
    2284:	af 8b       	std	Y+23, r26	; 0x17
    2286:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2288:	6d 89       	ldd	r22, Y+21	; 0x15
    228a:	7e 89       	ldd	r23, Y+22	; 0x16
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	98 8d       	ldd	r25, Y+24	; 0x18
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229c:	88 23       	and	r24, r24
    229e:	2c f4       	brge	.+10     	; 0x22aa <LCD_SendCharacter+0x68a>
		__ticks = 1;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
    22a8:	3f c0       	rjmp	.+126    	; 0x2328 <LCD_SendCharacter+0x708>
	else if (__tmp > 65535)
    22aa:	6d 89       	ldd	r22, Y+21	; 0x15
    22ac:	7e 89       	ldd	r23, Y+22	; 0x16
    22ae:	8f 89       	ldd	r24, Y+23	; 0x17
    22b0:	98 8d       	ldd	r25, Y+24	; 0x18
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22be:	18 16       	cp	r1, r24
    22c0:	4c f5       	brge	.+82     	; 0x2314 <LCD_SendCharacter+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	69 8d       	ldd	r22, Y+25	; 0x19
    22c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9c 8b       	std	Y+20, r25	; 0x14
    22e8:	8b 8b       	std	Y+19, r24	; 0x13
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <LCD_SendCharacter+0x6ea>
    22ec:	89 e1       	ldi	r24, 0x19	; 25
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9a 8b       	std	Y+18, r25	; 0x12
    22f2:	89 8b       	std	Y+17, r24	; 0x11
    22f4:	89 89       	ldd	r24, Y+17	; 0x11
    22f6:	9a 89       	ldd	r25, Y+18	; 0x12
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_SendCharacter+0x6d8>
    22fc:	9a 8b       	std	Y+18, r25	; 0x12
    22fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	8b 89       	ldd	r24, Y+19	; 0x13
    230c:	9c 89       	ldd	r25, Y+20	; 0x14
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	69 f7       	brne	.-38     	; 0x22ec <LCD_SendCharacter+0x6cc>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <LCD_SendCharacter+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9c 8b       	std	Y+20, r25	; 0x14
    2326:	8b 8b       	std	Y+19, r24	; 0x13
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	98 8b       	std	Y+16, r25	; 0x10
    232e:	8f 87       	std	Y+15, r24	; 0x0f
    2330:	8f 85       	ldd	r24, Y+15	; 0x0f
    2332:	98 89       	ldd	r25, Y+16	; 0x10
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_SendCharacter+0x714>
    2338:	98 8b       	std	Y+16, r25	; 0x10
    233a:	8f 87       	std	Y+15, r24	; 0x0f
	#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0)|(data & 0x0F);
	#endif
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
    233c:	82 e0       	ldi	r24, 0x02	; 2
    233e:	62 e0       	ldi	r22, 0x02	; 2
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	0e 94 5d 07 	call	0xeba	; 0xeba <set_pin_value>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	a0 e8       	ldi	r26, 0x80	; 128
    234c:	bf e3       	ldi	r27, 0x3F	; 63
    234e:	8b 87       	std	Y+11, r24	; 0x0b
    2350:	9c 87       	std	Y+12, r25	; 0x0c
    2352:	ad 87       	std	Y+13, r26	; 0x0d
    2354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a e7       	ldi	r20, 0x7A	; 122
    2364:	53 e4       	ldi	r21, 0x43	; 67
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8f 83       	std	Y+7, r24	; 0x07
    2370:	98 87       	std	Y+8, r25	; 0x08
    2372:	a9 87       	std	Y+9, r26	; 0x09
    2374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <LCD_SendCharacter+0x778>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <LCD_SendCharacter+0x7f6>
	else if (__tmp > 65535)
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <LCD_SendCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <LCD_SendCharacter+0x7d8>
    23da:	89 e1       	ldi	r24, 0x19	; 25
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_SendCharacter+0x7c6>
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8d 81       	ldd	r24, Y+5	; 0x05
    23fa:	9e 81       	ldd	r25, Y+6	; 0x06
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <LCD_SendCharacter+0x7ba>
    2400:	14 c0       	rjmp	.+40     	; 0x242a <LCD_SendCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_SendCharacter+0x802>
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	set_pin_value(PORTC_reg, E, LOW);
	_delay_ms(1);
	#endif

}
    242a:	cd 59       	subi	r28, 0x9D	; 157
    242c:	df 4f       	sbci	r29, 0xFF	; 255
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	08 95       	ret

00002442 <LCD_DisplayString>:
void LCD_DisplayString(uint8* str)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <LCD_DisplayString+0x6>
    2448:	0f 92       	push	r0
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	9b 83       	std	Y+3, r25	; 0x03
    2450:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2452:	19 82       	std	Y+1, r1	; 0x01
    2454:	0e c0       	rjmp	.+28     	; 0x2472 <LCD_DisplayString+0x30>
	while(str[i]!='\0')
	{
		LCD_SendCharacter(str[i]);
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	fc 01       	movw	r30, r24
    2462:	e2 0f       	add	r30, r18
    2464:	f3 1f       	adc	r31, r19
    2466:	80 81       	ld	r24, Z
    2468:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCharacter>
		i++;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_DisplayString(uint8* str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	9b 81       	ldd	r25, Y+3	; 0x03
    247c:	fc 01       	movw	r30, r24
    247e:	e2 0f       	add	r30, r18
    2480:	f3 1f       	adc	r31, r19
    2482:	80 81       	ld	r24, Z
    2484:	88 23       	and	r24, r24
    2486:	39 f7       	brne	.-50     	; 0x2456 <LCD_DisplayString+0x14>
	{
		LCD_SendCharacter(str[i]);
		i++;
	}

}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <GOTO_ROW_COL>:
void GOTO_ROW_COL(uint8 row ,uint8 col)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <GOTO_ROW_COL+0x6>
    249a:	00 d0       	rcall	.+0      	; 0x249c <GOTO_ROW_COL+0x8>
    249c:	0f 92       	push	r0
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	8a 83       	std	Y+2, r24	; 0x02
    24a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	3d 83       	std	Y+5, r19	; 0x05
    24ae:	2c 83       	std	Y+4, r18	; 0x04
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	9d 81       	ldd	r25, Y+5	; 0x05
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	31 f0       	breq	.+12     	; 0x24c4 <GOTO_ROW_COL+0x30>
    24b8:	2c 81       	ldd	r18, Y+4	; 0x04
    24ba:	3d 81       	ldd	r19, Y+5	; 0x05
    24bc:	21 30       	cpi	r18, 0x01	; 1
    24be:	31 05       	cpc	r19, r1
    24c0:	21 f0       	breq	.+8      	; 0x24ca <GOTO_ROW_COL+0x36>
    24c2:	06 c0       	rjmp	.+12     	; 0x24d0 <GOTO_ROW_COL+0x3c>
	{
	case 0:
		address=col;
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <GOTO_ROW_COL+0x3c>
		break;
	case 1:
		address=col+0x40;
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	80 5c       	subi	r24, 0xC0	; 192
    24ce:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_SendCommand(address | SET_CURSOR_LOCATION);
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	80 68       	ori	r24, 0x80	; 128
    24d4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_SendCommand>
}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <Display_string_row_col>:

void Display_string_row_col(uint8 row,uint8 col,uint8*str)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <Display_string_row_col+0x6>
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <Display_string_row_col+0x8>
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	6a 83       	std	Y+2, r22	; 0x02
    24f8:	5c 83       	std	Y+4, r21	; 0x04
    24fa:	4b 83       	std	Y+3, r20	; 0x03
	GOTO_ROW_COL(row,col);
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2500:	0e 94 4a 12 	call	0x2494	; 0x2494 <GOTO_ROW_COL>
	LCD_DisplayString(str);
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	0e 94 21 12 	call	0x2442	; 0x2442 <LCD_DisplayString>
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <LCD_integer_To_String>:
void LCD_integer_To_String(int data)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	62 97       	sbiw	r28, 0x12	; 18
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	9a 8b       	std	Y+18, r25	; 0x12
    2530:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2532:	89 89       	ldd	r24, Y+17	; 0x11
    2534:	9a 89       	ldd	r25, Y+18	; 0x12
    2536:	9e 01       	movw	r18, r28
    2538:	2f 5f       	subi	r18, 0xFF	; 255
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	b9 01       	movw	r22, r18
    253e:	4a e0       	ldi	r20, 0x0A	; 10
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <itoa>
	LCD_DisplayString(buff);
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	0e 94 21 12 	call	0x2442	; 0x2442 <LCD_DisplayString>
}
    254e:	62 96       	adiw	r28, 0x12	; 18
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <LCD_CLEAR>:
void LCD_CLEAR()
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_DISPLAY);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_SendCommand>
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <main>:
#include"../HAL/Keypad.h"
#include"../HAL/LCD.h"
uint8 x,y,z;
char op;
int main()
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	c5 54       	subi	r28, 0x45	; 69
    257e:	d0 40       	sbci	r29, 0x00	; 0
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
	uint8 number1[3],number2[3];
	sint64 result;
	int num1,num2;
	uint8 key;
	uint8 j,i;
	LCD_Init();
    258a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <LCD_Init>
	Display_string_row_col(0, 1, "Welcome To");
    258e:	20 e6       	ldi	r18, 0x60	; 96
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	a9 01       	movw	r20, r18
    2598:	0e 94 74 12 	call	0x24e8	; 0x24e8 <Display_string_row_col>
	Display_string_row_col(1, 1, "Calculator");
    259c:	2b e6       	ldi	r18, 0x6B	; 107
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	a9 01       	movw	r20, r18
    25a6:	0e 94 74 12 	call	0x24e8	; 0x24e8 <Display_string_row_col>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	aa e7       	ldi	r26, 0x7A	; 122
    25b0:	b4 e4       	ldi	r27, 0x44	; 68
    25b2:	8f a3       	std	Y+39, r24	; 0x27
    25b4:	98 a7       	std	Y+40, r25	; 0x28
    25b6:	a9 a7       	std	Y+41, r26	; 0x29
    25b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ba:	6f a1       	ldd	r22, Y+39	; 0x27
    25bc:	78 a5       	ldd	r23, Y+40	; 0x28
    25be:	89 a5       	ldd	r24, Y+41	; 0x29
    25c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a e7       	ldi	r20, 0x7A	; 122
    25c8:	53 e4       	ldi	r21, 0x43	; 67
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	8b a3       	std	Y+35, r24	; 0x23
    25d4:	9c a3       	std	Y+36, r25	; 0x24
    25d6:	ad a3       	std	Y+37, r26	; 0x25
    25d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25da:	6b a1       	ldd	r22, Y+35	; 0x23
    25dc:	7c a1       	ldd	r23, Y+36	; 0x24
    25de:	8d a1       	ldd	r24, Y+37	; 0x25
    25e0:	9e a1       	ldd	r25, Y+38	; 0x26
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	2c f4       	brge	.+10     	; 0x25fc <main+0x88>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9a a3       	std	Y+34, r25	; 0x22
    25f8:	89 a3       	std	Y+33, r24	; 0x21
    25fa:	3f c0       	rjmp	.+126    	; 0x267a <main+0x106>
	else if (__tmp > 65535)
    25fc:	6b a1       	ldd	r22, Y+35	; 0x23
    25fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2600:	8d a1       	ldd	r24, Y+37	; 0x25
    2602:	9e a1       	ldd	r25, Y+38	; 0x26
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	4c f5       	brge	.+82     	; 0x2666 <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2614:	6f a1       	ldd	r22, Y+39	; 0x27
    2616:	78 a5       	ldd	r23, Y+40	; 0x28
    2618:	89 a5       	ldd	r24, Y+41	; 0x29
    261a:	9a a5       	ldd	r25, Y+42	; 0x2a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9a a3       	std	Y+34, r25	; 0x22
    263a:	89 a3       	std	Y+33, r24	; 0x21
    263c:	0f c0       	rjmp	.+30     	; 0x265c <main+0xe8>
    263e:	89 e1       	ldi	r24, 0x19	; 25
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	98 a3       	std	Y+32, r25	; 0x20
    2644:	8f 8f       	std	Y+31, r24	; 0x1f
    2646:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2648:	98 a1       	ldd	r25, Y+32	; 0x20
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <main+0xd6>
    264e:	98 a3       	std	Y+32, r25	; 0x20
    2650:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2652:	89 a1       	ldd	r24, Y+33	; 0x21
    2654:	9a a1       	ldd	r25, Y+34	; 0x22
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	9a a3       	std	Y+34, r25	; 0x22
    265a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	9a a1       	ldd	r25, Y+34	; 0x22
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	69 f7       	brne	.-38     	; 0x263e <main+0xca>
    2664:	14 c0       	rjmp	.+40     	; 0x268e <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2666:	6b a1       	ldd	r22, Y+35	; 0x23
    2668:	7c a1       	ldd	r23, Y+36	; 0x24
    266a:	8d a1       	ldd	r24, Y+37	; 0x25
    266c:	9e a1       	ldd	r25, Y+38	; 0x26
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9a a3       	std	Y+34, r25	; 0x22
    2678:	89 a3       	std	Y+33, r24	; 0x21
    267a:	89 a1       	ldd	r24, Y+33	; 0x21
    267c:	9a a1       	ldd	r25, Y+34	; 0x22
    267e:	9e 8f       	std	Y+30, r25	; 0x1e
    2680:	8d 8f       	std	Y+29, r24	; 0x1d
    2682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2684:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <main+0x112>
    268a:	9e 8f       	std	Y+30, r25	; 0x1e
    268c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_CLEAR();
    268e:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_CLEAR>
	LCD_SendCommand(DISPLAY_ON_CURSOR_BLINK);
    2692:	8f e0       	ldi	r24, 0x0F	; 15
    2694:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_SendCommand>
	while(1)
	{

		for(x=0;x<4;x++)
    2698:	10 92 7f 00 	sts	0x007F, r1
    269c:	23 c1       	rjmp	.+582    	; 0x28e4 <main+0x370>
		{
		key=get_key_pressed();
    269e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <get_key_pressed>
    26a2:	8d a7       	std	Y+45, r24	; 0x2d
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	aa e7       	ldi	r26, 0x7A	; 122
    26aa:	b3 e4       	ldi	r27, 0x43	; 67
    26ac:	89 8f       	std	Y+25, r24	; 0x19
    26ae:	9a 8f       	std	Y+26, r25	; 0x1a
    26b0:	ab 8f       	std	Y+27, r26	; 0x1b
    26b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b4:	69 8d       	ldd	r22, Y+25	; 0x19
    26b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a e7       	ldi	r20, 0x7A	; 122
    26c2:	53 e4       	ldi	r21, 0x43	; 67
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8d 8b       	std	Y+21, r24	; 0x15
    26ce:	9e 8b       	std	Y+22, r25	; 0x16
    26d0:	af 8b       	std	Y+23, r26	; 0x17
    26d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d4:	6d 89       	ldd	r22, Y+21	; 0x15
    26d6:	7e 89       	ldd	r23, Y+22	; 0x16
    26d8:	8f 89       	ldd	r24, Y+23	; 0x17
    26da:	98 8d       	ldd	r25, Y+24	; 0x18
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e8       	ldi	r20, 0x80	; 128
    26e2:	5f e3       	ldi	r21, 0x3F	; 63
    26e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e8:	88 23       	and	r24, r24
    26ea:	2c f4       	brge	.+10     	; 0x26f6 <main+0x182>
		__ticks = 1;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	9c 8b       	std	Y+20, r25	; 0x14
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	3f c0       	rjmp	.+126    	; 0x2774 <main+0x200>
	else if (__tmp > 65535)
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	7e 89       	ldd	r23, Y+22	; 0x16
    26fa:	8f 89       	ldd	r24, Y+23	; 0x17
    26fc:	98 8d       	ldd	r25, Y+24	; 0x18
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	3f ef       	ldi	r19, 0xFF	; 255
    2702:	4f e7       	ldi	r20, 0x7F	; 127
    2704:	57 e4       	ldi	r21, 0x47	; 71
    2706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270a:	18 16       	cp	r1, r24
    270c:	4c f5       	brge	.+82     	; 0x2760 <main+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270e:	69 8d       	ldd	r22, Y+25	; 0x19
    2710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e2       	ldi	r20, 0x20	; 32
    271c:	51 e4       	ldi	r21, 0x41	; 65
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
    2736:	0f c0       	rjmp	.+30     	; 0x2756 <main+0x1e2>
    2738:	89 e1       	ldi	r24, 0x19	; 25
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9a 8b       	std	Y+18, r25	; 0x12
    273e:	89 8b       	std	Y+17, r24	; 0x11
    2740:	89 89       	ldd	r24, Y+17	; 0x11
    2742:	9a 89       	ldd	r25, Y+18	; 0x12
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <main+0x1d0>
    2748:	9a 8b       	std	Y+18, r25	; 0x12
    274a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	8b 89       	ldd	r24, Y+19	; 0x13
    274e:	9c 89       	ldd	r25, Y+20	; 0x14
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	69 f7       	brne	.-38     	; 0x2738 <main+0x1c4>
    275e:	14 c0       	rjmp	.+40     	; 0x2788 <main+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	9c 89       	ldd	r25, Y+20	; 0x14
    2778:	98 8b       	std	Y+16, r25	; 0x10
    277a:	8f 87       	std	Y+15, r24	; 0x0f
    277c:	8f 85       	ldd	r24, Y+15	; 0x0f
    277e:	98 89       	ldd	r25, Y+16	; 0x10
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <main+0x20c>
    2784:	98 8b       	std	Y+16, r25	; 0x10
    2786:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		if(key>=0 && key<=9)
    2788:	8d a5       	ldd	r24, Y+45	; 0x2d
    278a:	8a 30       	cpi	r24, 0x0A	; 10
    278c:	b0 f4       	brcc	.+44     	; 0x27ba <main+0x246>
		{
			LCD_integer_To_String(key);
    278e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2790:	88 2f       	mov	r24, r24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_integer_To_String>
			number1[x]=key;
    2798:	80 91 7f 00 	lds	r24, 0x007F
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	ce 01       	movw	r24, r28
    27a2:	ca 96       	adiw	r24, 0x3a	; 58
    27a4:	fc 01       	movw	r30, r24
    27a6:	e2 0f       	add	r30, r18
    27a8:	f3 1f       	adc	r31, r19
    27aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    27ac:	80 83       	st	Z, r24
	LCD_CLEAR();
	LCD_SendCommand(DISPLAY_ON_CURSOR_BLINK);
	while(1)
	{

		for(x=0;x<4;x++)
    27ae:	80 91 7f 00 	lds	r24, 0x007F
    27b2:	8f 5f       	subi	r24, 0xFF	; 255
    27b4:	80 93 7f 00 	sts	0x007F, r24
    27b8:	95 c0       	rjmp	.+298    	; 0x28e4 <main+0x370>
			LCD_integer_To_String(key);
			number1[x]=key;
		}
		else
		{
			if(key == 13)
    27ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    27bc:	8d 30       	cpi	r24, 0x0D	; 13
    27be:	19 f4       	brne	.+6      	; 0x27c6 <main+0x252>
			{
				LCD_CLEAR();
    27c0:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_CLEAR>
    27c4:	94 c0       	rjmp	.+296    	; 0x28ee <main+0x37a>
				break;
			}
			if(x==1)
    27c6:	80 91 7f 00 	lds	r24, 0x007F
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	31 f4       	brne	.+12     	; 0x27da <main+0x266>
			{
				num1=(int)(number1[0]);
    27ce:	8a ad       	ldd	r24, Y+58	; 0x3a
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	99 ab       	std	Y+49, r25	; 0x31
    27d6:	88 ab       	std	Y+48, r24	; 0x30
    27d8:	8a c0       	rjmp	.+276    	; 0x28ee <main+0x37a>
			}
			else if(x==2)
    27da:	80 91 7f 00 	lds	r24, 0x007F
    27de:	82 30       	cpi	r24, 0x02	; 2
    27e0:	a9 f4       	brne	.+42     	; 0x280c <main+0x298>
			{
				num1=(int)((number1[0])*10+(number1[1]));
    27e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 01       	movw	r18, r24
    27ea:	22 0f       	add	r18, r18
    27ec:	33 1f       	adc	r19, r19
    27ee:	c9 01       	movw	r24, r18
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	28 0f       	add	r18, r24
    27fa:	39 1f       	adc	r19, r25
    27fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    27fe:	88 2f       	mov	r24, r24
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	82 0f       	add	r24, r18
    2804:	93 1f       	adc	r25, r19
    2806:	99 ab       	std	Y+49, r25	; 0x31
    2808:	88 ab       	std	Y+48, r24	; 0x30
    280a:	71 c0       	rjmp	.+226    	; 0x28ee <main+0x37a>
			}
			else if(x==3)
    280c:	80 91 7f 00 	lds	r24, 0x007F
    2810:	83 30       	cpi	r24, 0x03	; 3
    2812:	41 f5       	brne	.+80     	; 0x2864 <main+0x2f0>
			{
				num1=(int)((number1[0])*10+(number1[1]));
    2814:	8a ad       	ldd	r24, Y+58	; 0x3a
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	9c 01       	movw	r18, r24
    281c:	22 0f       	add	r18, r18
    281e:	33 1f       	adc	r19, r19
    2820:	c9 01       	movw	r24, r18
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	28 0f       	add	r18, r24
    282c:	39 1f       	adc	r19, r25
    282e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	82 0f       	add	r24, r18
    2836:	93 1f       	adc	r25, r19
    2838:	99 ab       	std	Y+49, r25	; 0x31
    283a:	88 ab       	std	Y+48, r24	; 0x30
				num1=num1*10+(number1[2]);
    283c:	88 a9       	ldd	r24, Y+48	; 0x30
    283e:	99 a9       	ldd	r25, Y+49	; 0x31
    2840:	9c 01       	movw	r18, r24
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	c9 01       	movw	r24, r18
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	28 0f       	add	r18, r24
    2852:	39 1f       	adc	r19, r25
    2854:	8c ad       	ldd	r24, Y+60	; 0x3c
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	82 0f       	add	r24, r18
    285c:	93 1f       	adc	r25, r19
    285e:	99 ab       	std	Y+49, r25	; 0x31
    2860:	88 ab       	std	Y+48, r24	; 0x30
    2862:	45 c0       	rjmp	.+138    	; 0x28ee <main+0x37a>
			}
			else if(x==4)
    2864:	80 91 7f 00 	lds	r24, 0x007F
    2868:	84 30       	cpi	r24, 0x04	; 4
    286a:	09 f0       	breq	.+2      	; 0x286e <main+0x2fa>
    286c:	40 c0       	rjmp	.+128    	; 0x28ee <main+0x37a>
			{
				num1=(int)((number1[0])*10+(number1[1]));
    286e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9c 01       	movw	r18, r24
    2876:	22 0f       	add	r18, r18
    2878:	33 1f       	adc	r19, r19
    287a:	c9 01       	movw	r24, r18
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	28 0f       	add	r18, r24
    2886:	39 1f       	adc	r19, r25
    2888:	8b ad       	ldd	r24, Y+59	; 0x3b
    288a:	88 2f       	mov	r24, r24
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	82 0f       	add	r24, r18
    2890:	93 1f       	adc	r25, r19
    2892:	99 ab       	std	Y+49, r25	; 0x31
    2894:	88 ab       	std	Y+48, r24	; 0x30
				num1=num1*10+(int)(number1[2]);
    2896:	88 a9       	ldd	r24, Y+48	; 0x30
    2898:	99 a9       	ldd	r25, Y+49	; 0x31
    289a:	9c 01       	movw	r18, r24
    289c:	22 0f       	add	r18, r18
    289e:	33 1f       	adc	r19, r19
    28a0:	c9 01       	movw	r24, r18
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	28 0f       	add	r18, r24
    28ac:	39 1f       	adc	r19, r25
    28ae:	8c ad       	ldd	r24, Y+60	; 0x3c
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	82 0f       	add	r24, r18
    28b6:	93 1f       	adc	r25, r19
    28b8:	99 ab       	std	Y+49, r25	; 0x31
    28ba:	88 ab       	std	Y+48, r24	; 0x30
				num1=num1*10+(int)(number1[3]);
    28bc:	88 a9       	ldd	r24, Y+48	; 0x30
    28be:	99 a9       	ldd	r25, Y+49	; 0x31
    28c0:	9c 01       	movw	r18, r24
    28c2:	22 0f       	add	r18, r18
    28c4:	33 1f       	adc	r19, r19
    28c6:	c9 01       	movw	r24, r18
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	28 0f       	add	r18, r24
    28d2:	39 1f       	adc	r19, r25
    28d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d6:	88 2f       	mov	r24, r24
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	82 0f       	add	r24, r18
    28dc:	93 1f       	adc	r25, r19
    28de:	99 ab       	std	Y+49, r25	; 0x31
    28e0:	88 ab       	std	Y+48, r24	; 0x30
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <main+0x37a>
	LCD_CLEAR();
	LCD_SendCommand(DISPLAY_ON_CURSOR_BLINK);
	while(1)
	{

		for(x=0;x<4;x++)
    28e4:	80 91 7f 00 	lds	r24, 0x007F
    28e8:	84 30       	cpi	r24, 0x04	; 4
    28ea:	08 f4       	brcc	.+2      	; 0x28ee <main+0x37a>
    28ec:	d8 ce       	rjmp	.-592    	; 0x269e <main+0x12a>
			}
			break;
		}

		}
		switch(key)
    28ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	26 96       	adiw	r28, 0x06	; 6
    28f6:	3f af       	std	Y+63, r19	; 0x3f
    28f8:	2e af       	std	Y+62, r18	; 0x3e
    28fa:	26 97       	sbiw	r28, 0x06	; 6
    28fc:	26 96       	adiw	r28, 0x06	; 6
    28fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2900:	5f ad       	ldd	r21, Y+63	; 0x3f
    2902:	26 97       	sbiw	r28, 0x06	; 6
    2904:	4b 32       	cpi	r20, 0x2B	; 43
    2906:	51 05       	cpc	r21, r1
    2908:	29 f1       	breq	.+74     	; 0x2954 <main+0x3e0>
    290a:	26 96       	adiw	r28, 0x06	; 6
    290c:	8e ad       	ldd	r24, Y+62	; 0x3e
    290e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2910:	26 97       	sbiw	r28, 0x06	; 6
    2912:	8c 32       	cpi	r24, 0x2C	; 44
    2914:	91 05       	cpc	r25, r1
    2916:	7c f4       	brge	.+30     	; 0x2936 <main+0x3c2>
    2918:	26 96       	adiw	r28, 0x06	; 6
    291a:	2e ad       	ldd	r18, Y+62	; 0x3e
    291c:	3f ad       	ldd	r19, Y+63	; 0x3f
    291e:	26 97       	sbiw	r28, 0x06	; 6
    2920:	2d 30       	cpi	r18, 0x0D	; 13
    2922:	31 05       	cpc	r19, r1
    2924:	99 f1       	breq	.+102    	; 0x298c <main+0x418>
    2926:	26 96       	adiw	r28, 0x06	; 6
    2928:	4e ad       	ldd	r20, Y+62	; 0x3e
    292a:	5f ad       	ldd	r21, Y+63	; 0x3f
    292c:	26 97       	sbiw	r28, 0x06	; 6
    292e:	4a 32       	cpi	r20, 0x2A	; 42
    2930:	51 05       	cpc	r21, r1
    2932:	f1 f0       	breq	.+60     	; 0x2970 <main+0x3fc>
    2934:	2d c0       	rjmp	.+90     	; 0x2990 <main+0x41c>
    2936:	26 96       	adiw	r28, 0x06	; 6
    2938:	8e ad       	ldd	r24, Y+62	; 0x3e
    293a:	9f ad       	ldd	r25, Y+63	; 0x3f
    293c:	26 97       	sbiw	r28, 0x06	; 6
    293e:	8d 32       	cpi	r24, 0x2D	; 45
    2940:	91 05       	cpc	r25, r1
    2942:	79 f0       	breq	.+30     	; 0x2962 <main+0x3ee>
    2944:	26 96       	adiw	r28, 0x06	; 6
    2946:	2e ad       	ldd	r18, Y+62	; 0x3e
    2948:	3f ad       	ldd	r19, Y+63	; 0x3f
    294a:	26 97       	sbiw	r28, 0x06	; 6
    294c:	2f 32       	cpi	r18, 0x2F	; 47
    294e:	31 05       	cpc	r19, r1
    2950:	b1 f0       	breq	.+44     	; 0x297e <main+0x40a>
    2952:	1e c0       	rjmp	.+60     	; 0x2990 <main+0x41c>
		{
		case '+':
			LCD_SendCharacter(key);
    2954:	8d a5       	ldd	r24, Y+45	; 0x2d
    2956:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCharacter>
			op='+';
    295a:	8b e2       	ldi	r24, 0x2B	; 43
    295c:	80 93 7e 00 	sts	0x007E, r24
    2960:	17 c0       	rjmp	.+46     	; 0x2990 <main+0x41c>
			break;
		case '-':
			LCD_SendCharacter(key);
    2962:	8d a5       	ldd	r24, Y+45	; 0x2d
    2964:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCharacter>
			op='-';
    2968:	8d e2       	ldi	r24, 0x2D	; 45
    296a:	80 93 7e 00 	sts	0x007E, r24
    296e:	10 c0       	rjmp	.+32     	; 0x2990 <main+0x41c>
			break;
		case '*':
			LCD_SendCharacter(key);
    2970:	8d a5       	ldd	r24, Y+45	; 0x2d
    2972:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCharacter>
			op='*';
    2976:	8a e2       	ldi	r24, 0x2A	; 42
    2978:	80 93 7e 00 	sts	0x007E, r24
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <main+0x41c>
			break;
		case '/':
			LCD_SendCharacter(key);
    297e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2980:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCharacter>
			op='/';
    2984:	8f e2       	ldi	r24, 0x2F	; 47
    2986:	80 93 7e 00 	sts	0x007E, r24
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <main+0x41c>
			break;
		case 13:
			LCD_CLEAR();
    298c:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_CLEAR>
			break;
		}
		for(y=0;y<3;y++)
    2990:	10 92 81 00 	sts	0x0081, r1
    2994:	26 c1       	rjmp	.+588    	; 0x2be2 <main+0x66e>
		{
		key=get_key_pressed();
    2996:	0e 94 d6 08 	call	0x11ac	; 0x11ac <get_key_pressed>
    299a:	8d a7       	std	Y+45, r24	; 0x2d
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	aa e7       	ldi	r26, 0x7A	; 122
    29a2:	b3 e4       	ldi	r27, 0x43	; 67
    29a4:	8b 87       	std	Y+11, r24	; 0x0b
    29a6:	9c 87       	std	Y+12, r25	; 0x0c
    29a8:	ad 87       	std	Y+13, r26	; 0x0d
    29aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a e7       	ldi	r20, 0x7A	; 122
    29ba:	53 e4       	ldi	r21, 0x43	; 67
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8f 83       	std	Y+7, r24	; 0x07
    29c6:	98 87       	std	Y+8, r25	; 0x08
    29c8:	a9 87       	std	Y+9, r26	; 0x09
    29ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <main+0x47a>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <main+0x4f8>
	else if (__tmp > 65535)
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <main+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <main+0x4da>
    2a30:	89 e1       	ldi	r24, 0x19	; 25
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <main+0x4c8>
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <main+0x4bc>
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <main+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5a:	78 85       	ldd	r23, Y+8	; 0x08
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <main+0x504>
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		if(key>=0 && key<=9)
    2a80:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a82:	8a 30       	cpi	r24, 0x0A	; 10
    2a84:	b0 f4       	brcc	.+44     	; 0x2ab2 <main+0x53e>
		{
			LCD_integer_To_String(key);
    2a86:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_integer_To_String>
			number2[y]=key;
    2a90:	80 91 81 00 	lds	r24, 0x0081
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	ce 01       	movw	r24, r28
    2a9a:	cd 96       	adiw	r24, 0x3d	; 61
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f3 1f       	adc	r31, r19
    2aa2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aa4:	80 83       	st	Z, r24
			break;
		case 13:
			LCD_CLEAR();
			break;
		}
		for(y=0;y<3;y++)
    2aa6:	80 91 81 00 	lds	r24, 0x0081
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	80 93 81 00 	sts	0x0081, r24
    2ab0:	98 c0       	rjmp	.+304    	; 0x2be2 <main+0x66e>
			LCD_integer_To_String(key);
			number2[y]=key;
		}
		else
		{
			if(key == 13)
    2ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab4:	8d 30       	cpi	r24, 0x0D	; 13
    2ab6:	19 f4       	brne	.+6      	; 0x2abe <main+0x54a>
			{
				LCD_CLEAR();
    2ab8:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_CLEAR>
    2abc:	97 c0       	rjmp	.+302    	; 0x2bec <main+0x678>
				break;
			}
			if(y==1)
    2abe:	80 91 81 00 	lds	r24, 0x0081
    2ac2:	81 30       	cpi	r24, 0x01	; 1
    2ac4:	31 f4       	brne	.+12     	; 0x2ad2 <main+0x55e>
			{
				num2=(int)(number2[0]);
    2ac6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9f a7       	std	Y+47, r25	; 0x2f
    2ace:	8e a7       	std	Y+46, r24	; 0x2e
    2ad0:	8d c0       	rjmp	.+282    	; 0x2bec <main+0x678>
			}
			else if(y==2)
    2ad2:	80 91 81 00 	lds	r24, 0x0081
    2ad6:	82 30       	cpi	r24, 0x02	; 2
    2ad8:	a9 f4       	brne	.+42     	; 0x2b04 <main+0x590>
			{
				num2=(int)((number2[0])*10+(number2[1]));
    2ada:	8d ad       	ldd	r24, Y+61	; 0x3d
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	22 0f       	add	r18, r18
    2ae4:	33 1f       	adc	r19, r19
    2ae6:	c9 01       	movw	r24, r18
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	28 0f       	add	r18, r24
    2af2:	39 1f       	adc	r19, r25
    2af4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	82 0f       	add	r24, r18
    2afc:	93 1f       	adc	r25, r19
    2afe:	9f a7       	std	Y+47, r25	; 0x2f
    2b00:	8e a7       	std	Y+46, r24	; 0x2e
    2b02:	74 c0       	rjmp	.+232    	; 0x2bec <main+0x678>
			}
			else if(y==3)
    2b04:	80 91 81 00 	lds	r24, 0x0081
    2b08:	83 30       	cpi	r24, 0x03	; 3
    2b0a:	41 f5       	brne	.+80     	; 0x2b5c <main+0x5e8>
			{
				num2=(int)((number2[0])*10+(number2[1]));
    2b0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9c 01       	movw	r18, r24
    2b14:	22 0f       	add	r18, r18
    2b16:	33 1f       	adc	r19, r19
    2b18:	c9 01       	movw	r24, r18
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	28 0f       	add	r18, r24
    2b24:	39 1f       	adc	r19, r25
    2b26:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b28:	88 2f       	mov	r24, r24
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	82 0f       	add	r24, r18
    2b2e:	93 1f       	adc	r25, r19
    2b30:	9f a7       	std	Y+47, r25	; 0x2f
    2b32:	8e a7       	std	Y+46, r24	; 0x2e
				num2=num2*10+(int)(number2[2]);
    2b34:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b36:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b38:	9c 01       	movw	r18, r24
    2b3a:	22 0f       	add	r18, r18
    2b3c:	33 1f       	adc	r19, r19
    2b3e:	c9 01       	movw	r24, r18
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	28 0f       	add	r18, r24
    2b4a:	39 1f       	adc	r19, r25
    2b4c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	82 0f       	add	r24, r18
    2b54:	93 1f       	adc	r25, r19
    2b56:	9f a7       	std	Y+47, r25	; 0x2f
    2b58:	8e a7       	std	Y+46, r24	; 0x2e
    2b5a:	48 c0       	rjmp	.+144    	; 0x2bec <main+0x678>
			}
			else if(y==4)
    2b5c:	80 91 81 00 	lds	r24, 0x0081
    2b60:	84 30       	cpi	r24, 0x04	; 4
    2b62:	09 f0       	breq	.+2      	; 0x2b66 <main+0x5f2>
    2b64:	43 c0       	rjmp	.+134    	; 0x2bec <main+0x678>
			{
				num2=(int)((number2[0])*10+(number2[1]));
    2b66:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9c 01       	movw	r18, r24
    2b6e:	22 0f       	add	r18, r18
    2b70:	33 1f       	adc	r19, r19
    2b72:	c9 01       	movw	r24, r18
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	28 0f       	add	r18, r24
    2b7e:	39 1f       	adc	r19, r25
    2b80:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	82 0f       	add	r24, r18
    2b88:	93 1f       	adc	r25, r19
    2b8a:	9f a7       	std	Y+47, r25	; 0x2f
    2b8c:	8e a7       	std	Y+46, r24	; 0x2e
				num2=num2*10+(number2[2]);
    2b8e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b90:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b92:	9c 01       	movw	r18, r24
    2b94:	22 0f       	add	r18, r18
    2b96:	33 1f       	adc	r19, r19
    2b98:	c9 01       	movw	r24, r18
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	28 0f       	add	r18, r24
    2ba4:	39 1f       	adc	r19, r25
    2ba6:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ba8:	88 2f       	mov	r24, r24
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	82 0f       	add	r24, r18
    2bae:	93 1f       	adc	r25, r19
    2bb0:	9f a7       	std	Y+47, r25	; 0x2f
    2bb2:	8e a7       	std	Y+46, r24	; 0x2e
				num2=num2*10+(number2[3]);
    2bb4:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bb6:	9f a5       	ldd	r25, Y+47	; 0x2f
    2bb8:	9c 01       	movw	r18, r24
    2bba:	22 0f       	add	r18, r18
    2bbc:	33 1f       	adc	r19, r19
    2bbe:	c9 01       	movw	r24, r18
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	28 0f       	add	r18, r24
    2bca:	39 1f       	adc	r19, r25
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e0 5c       	subi	r30, 0xC0	; 192
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	82 0f       	add	r24, r18
    2bda:	93 1f       	adc	r25, r19
    2bdc:	9f a7       	std	Y+47, r25	; 0x2f
    2bde:	8e a7       	std	Y+46, r24	; 0x2e
    2be0:	05 c0       	rjmp	.+10     	; 0x2bec <main+0x678>
			break;
		case 13:
			LCD_CLEAR();
			break;
		}
		for(y=0;y<3;y++)
    2be2:	80 91 81 00 	lds	r24, 0x0081
    2be6:	83 30       	cpi	r24, 0x03	; 3
    2be8:	08 f4       	brcc	.+2      	; 0x2bec <main+0x678>
    2bea:	d5 ce       	rjmp	.-598    	; 0x2996 <main+0x422>
			}
			break;
		}

		}
			switch(op)
    2bec:	80 91 7e 00 	lds	r24, 0x007E
    2bf0:	48 2f       	mov	r20, r24
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	24 96       	adiw	r28, 0x04	; 4
    2bf6:	5f af       	std	Y+63, r21	; 0x3f
    2bf8:	4e af       	std	Y+62, r20	; 0x3e
    2bfa:	24 97       	sbiw	r28, 0x04	; 4
    2bfc:	24 96       	adiw	r28, 0x04	; 4
    2bfe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c00:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c02:	24 97       	sbiw	r28, 0x04	; 4
    2c04:	8b 32       	cpi	r24, 0x2B	; 43
    2c06:	91 05       	cpc	r25, r1
    2c08:	f9 f0       	breq	.+62     	; 0x2c48 <main+0x6d4>
    2c0a:	24 96       	adiw	r28, 0x04	; 4
    2c0c:	2e ad       	ldd	r18, Y+62	; 0x3e
    2c0e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2c10:	24 97       	sbiw	r28, 0x04	; 4
    2c12:	2c 32       	cpi	r18, 0x2C	; 44
    2c14:	31 05       	cpc	r19, r1
    2c16:	44 f4       	brge	.+16     	; 0x2c28 <main+0x6b4>
    2c18:	24 96       	adiw	r28, 0x04	; 4
    2c1a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c1c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c1e:	24 97       	sbiw	r28, 0x04	; 4
    2c20:	4a 32       	cpi	r20, 0x2A	; 42
    2c22:	51 05       	cpc	r21, r1
    2c24:	b9 f1       	breq	.+110    	; 0x2c94 <main+0x720>
    2c26:	61 c0       	rjmp	.+194    	; 0x2cea <main+0x776>
    2c28:	24 96       	adiw	r28, 0x04	; 4
    2c2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c2e:	24 97       	sbiw	r28, 0x04	; 4
    2c30:	8d 32       	cpi	r24, 0x2D	; 45
    2c32:	91 05       	cpc	r25, r1
    2c34:	d9 f0       	breq	.+54     	; 0x2c6c <main+0x6f8>
    2c36:	24 96       	adiw	r28, 0x04	; 4
    2c38:	2e ad       	ldd	r18, Y+62	; 0x3e
    2c3a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2c3c:	24 97       	sbiw	r28, 0x04	; 4
    2c3e:	2f 32       	cpi	r18, 0x2F	; 47
    2c40:	31 05       	cpc	r19, r1
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <main+0x6d2>
    2c44:	3f c0       	rjmp	.+126    	; 0x2cc4 <main+0x750>
    2c46:	51 c0       	rjmp	.+162    	; 0x2cea <main+0x776>
			{
			case '+':
				result=(sint64)(num1+num2);
    2c48:	28 a9       	ldd	r18, Y+48	; 0x30
    2c4a:	39 a9       	ldd	r19, Y+49	; 0x31
    2c4c:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c4e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c50:	82 0f       	add	r24, r18
    2c52:	93 1f       	adc	r25, r19
    2c54:	9b ab       	std	Y+51, r25	; 0x33
    2c56:	8a ab       	std	Y+50, r24	; 0x32
    2c58:	99 0f       	add	r25, r25
    2c5a:	88 0b       	sbc	r24, r24
    2c5c:	98 2f       	mov	r25, r24
    2c5e:	8c ab       	std	Y+52, r24	; 0x34
    2c60:	8d ab       	std	Y+53, r24	; 0x35
    2c62:	8e ab       	std	Y+54, r24	; 0x36
    2c64:	8f ab       	std	Y+55, r24	; 0x37
    2c66:	88 af       	std	Y+56, r24	; 0x38
    2c68:	89 af       	std	Y+57, r24	; 0x39
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <main+0x776>
				break;
			case '-':
				result=(sint64)(num1-num2);
    2c6c:	28 a9       	ldd	r18, Y+48	; 0x30
    2c6e:	39 a9       	ldd	r19, Y+49	; 0x31
    2c70:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c72:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c74:	a9 01       	movw	r20, r18
    2c76:	48 1b       	sub	r20, r24
    2c78:	59 0b       	sbc	r21, r25
    2c7a:	ca 01       	movw	r24, r20
    2c7c:	9b ab       	std	Y+51, r25	; 0x33
    2c7e:	8a ab       	std	Y+50, r24	; 0x32
    2c80:	99 0f       	add	r25, r25
    2c82:	88 0b       	sbc	r24, r24
    2c84:	98 2f       	mov	r25, r24
    2c86:	8c ab       	std	Y+52, r24	; 0x34
    2c88:	8d ab       	std	Y+53, r24	; 0x35
    2c8a:	8e ab       	std	Y+54, r24	; 0x36
    2c8c:	8f ab       	std	Y+55, r24	; 0x37
    2c8e:	88 af       	std	Y+56, r24	; 0x38
    2c90:	89 af       	std	Y+57, r24	; 0x39
    2c92:	2b c0       	rjmp	.+86     	; 0x2cea <main+0x776>
				break;
			case '*':
				result=(sint64)(num1*num2);
    2c94:	28 a9       	ldd	r18, Y+48	; 0x30
    2c96:	39 a9       	ldd	r19, Y+49	; 0x31
    2c98:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c9a:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c9c:	ac 01       	movw	r20, r24
    2c9e:	24 9f       	mul	r18, r20
    2ca0:	c0 01       	movw	r24, r0
    2ca2:	25 9f       	mul	r18, r21
    2ca4:	90 0d       	add	r25, r0
    2ca6:	34 9f       	mul	r19, r20
    2ca8:	90 0d       	add	r25, r0
    2caa:	11 24       	eor	r1, r1
    2cac:	9b ab       	std	Y+51, r25	; 0x33
    2cae:	8a ab       	std	Y+50, r24	; 0x32
    2cb0:	99 0f       	add	r25, r25
    2cb2:	88 0b       	sbc	r24, r24
    2cb4:	98 2f       	mov	r25, r24
    2cb6:	8c ab       	std	Y+52, r24	; 0x34
    2cb8:	8d ab       	std	Y+53, r24	; 0x35
    2cba:	8e ab       	std	Y+54, r24	; 0x36
    2cbc:	8f ab       	std	Y+55, r24	; 0x37
    2cbe:	88 af       	std	Y+56, r24	; 0x38
    2cc0:	89 af       	std	Y+57, r24	; 0x39
    2cc2:	13 c0       	rjmp	.+38     	; 0x2cea <main+0x776>
				break;
			case '/':
				result=(sint64)(num1/num2);
    2cc4:	88 a9       	ldd	r24, Y+48	; 0x30
    2cc6:	99 a9       	ldd	r25, Y+49	; 0x31
    2cc8:	2e a5       	ldd	r18, Y+46	; 0x2e
    2cca:	3f a5       	ldd	r19, Y+47	; 0x2f
    2ccc:	b9 01       	movw	r22, r18
    2cce:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__divmodhi4>
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9b ab       	std	Y+51, r25	; 0x33
    2cd6:	8a ab       	std	Y+50, r24	; 0x32
    2cd8:	99 0f       	add	r25, r25
    2cda:	88 0b       	sbc	r24, r24
    2cdc:	98 2f       	mov	r25, r24
    2cde:	8c ab       	std	Y+52, r24	; 0x34
    2ce0:	8d ab       	std	Y+53, r24	; 0x35
    2ce2:	8e ab       	std	Y+54, r24	; 0x36
    2ce4:	8f ab       	std	Y+55, r24	; 0x37
    2ce6:	88 af       	std	Y+56, r24	; 0x38
    2ce8:	89 af       	std	Y+57, r24	; 0x39
				break;
			}

		switch(key)
    2cea:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	22 96       	adiw	r28, 0x02	; 2
    2cf2:	3f af       	std	Y+63, r19	; 0x3f
    2cf4:	2e af       	std	Y+62, r18	; 0x3e
    2cf6:	22 97       	sbiw	r28, 0x02	; 2
    2cf8:	22 96       	adiw	r28, 0x02	; 2
    2cfa:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cfc:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cfe:	22 97       	sbiw	r28, 0x02	; 2
    2d00:	4d 30       	cpi	r20, 0x0D	; 13
    2d02:	51 05       	cpc	r21, r1
    2d04:	a1 f0       	breq	.+40     	; 0x2d2e <main+0x7ba>
    2d06:	22 96       	adiw	r28, 0x02	; 2
    2d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d0c:	22 97       	sbiw	r28, 0x02	; 2
    2d0e:	8d 33       	cpi	r24, 0x3D	; 61
    2d10:	91 05       	cpc	r25, r1
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <main+0x7a2>
    2d14:	c1 cc       	rjmp	.-1662   	; 0x2698 <main+0x124>
		{
		case '=':
			GOTO_ROW_COL(1, 0);
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	0e 94 4a 12 	call	0x2494	; 0x2494 <GOTO_ROW_COL>
			LCD_SendCharacter(key);
    2d1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d20:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_SendCharacter>
			LCD_integer_To_String(result);
    2d24:	8a a9       	ldd	r24, Y+50	; 0x32
    2d26:	9b a9       	ldd	r25, Y+51	; 0x33
    2d28:	0e 94 8d 12 	call	0x251a	; 0x251a <LCD_integer_To_String>
    2d2c:	b5 cc       	rjmp	.-1686   	; 0x2698 <main+0x124>
			break;
		case 13:
			LCD_CLEAR();
    2d2e:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_CLEAR>
    2d32:	b2 cc       	rjmp	.-1692   	; 0x2698 <main+0x124>

00002d34 <__divmodhi4>:
    2d34:	97 fb       	bst	r25, 7
    2d36:	09 2e       	mov	r0, r25
    2d38:	07 26       	eor	r0, r23
    2d3a:	0a d0       	rcall	.+20     	; 0x2d50 <__divmodhi4_neg1>
    2d3c:	77 fd       	sbrc	r23, 7
    2d3e:	04 d0       	rcall	.+8      	; 0x2d48 <__divmodhi4_neg2>
    2d40:	0c d0       	rcall	.+24     	; 0x2d5a <__udivmodhi4>
    2d42:	06 d0       	rcall	.+12     	; 0x2d50 <__divmodhi4_neg1>
    2d44:	00 20       	and	r0, r0
    2d46:	1a f4       	brpl	.+6      	; 0x2d4e <__divmodhi4_exit>

00002d48 <__divmodhi4_neg2>:
    2d48:	70 95       	com	r23
    2d4a:	61 95       	neg	r22
    2d4c:	7f 4f       	sbci	r23, 0xFF	; 255

00002d4e <__divmodhi4_exit>:
    2d4e:	08 95       	ret

00002d50 <__divmodhi4_neg1>:
    2d50:	f6 f7       	brtc	.-4      	; 0x2d4e <__divmodhi4_exit>
    2d52:	90 95       	com	r25
    2d54:	81 95       	neg	r24
    2d56:	9f 4f       	sbci	r25, 0xFF	; 255
    2d58:	08 95       	ret

00002d5a <__udivmodhi4>:
    2d5a:	aa 1b       	sub	r26, r26
    2d5c:	bb 1b       	sub	r27, r27
    2d5e:	51 e1       	ldi	r21, 0x11	; 17
    2d60:	07 c0       	rjmp	.+14     	; 0x2d70 <__udivmodhi4_ep>

00002d62 <__udivmodhi4_loop>:
    2d62:	aa 1f       	adc	r26, r26
    2d64:	bb 1f       	adc	r27, r27
    2d66:	a6 17       	cp	r26, r22
    2d68:	b7 07       	cpc	r27, r23
    2d6a:	10 f0       	brcs	.+4      	; 0x2d70 <__udivmodhi4_ep>
    2d6c:	a6 1b       	sub	r26, r22
    2d6e:	b7 0b       	sbc	r27, r23

00002d70 <__udivmodhi4_ep>:
    2d70:	88 1f       	adc	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	5a 95       	dec	r21
    2d76:	a9 f7       	brne	.-22     	; 0x2d62 <__udivmodhi4_loop>
    2d78:	80 95       	com	r24
    2d7a:	90 95       	com	r25
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	08 95       	ret

00002d82 <__prologue_saves__>:
    2d82:	2f 92       	push	r2
    2d84:	3f 92       	push	r3
    2d86:	4f 92       	push	r4
    2d88:	5f 92       	push	r5
    2d8a:	6f 92       	push	r6
    2d8c:	7f 92       	push	r7
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	ca 1b       	sub	r28, r26
    2dac:	db 0b       	sbc	r29, r27
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	09 94       	ijmp

00002dba <__epilogue_restores__>:
    2dba:	2a 88       	ldd	r2, Y+18	; 0x12
    2dbc:	39 88       	ldd	r3, Y+17	; 0x11
    2dbe:	48 88       	ldd	r4, Y+16	; 0x10
    2dc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dca:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dcc:	b9 84       	ldd	r11, Y+9	; 0x09
    2dce:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd0:	df 80       	ldd	r13, Y+7	; 0x07
    2dd2:	ee 80       	ldd	r14, Y+6	; 0x06
    2dd4:	fd 80       	ldd	r15, Y+5	; 0x05
    2dd6:	0c 81       	ldd	r16, Y+4	; 0x04
    2dd8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dda:	aa 81       	ldd	r26, Y+2	; 0x02
    2ddc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dde:	ce 0f       	add	r28, r30
    2de0:	d1 1d       	adc	r29, r1
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	ed 01       	movw	r28, r26
    2dee:	08 95       	ret

00002df0 <itoa>:
    2df0:	fb 01       	movw	r30, r22
    2df2:	9f 01       	movw	r18, r30
    2df4:	e8 94       	clt
    2df6:	42 30       	cpi	r20, 0x02	; 2
    2df8:	c4 f0       	brlt	.+48     	; 0x2e2a <itoa+0x3a>
    2dfa:	45 32       	cpi	r20, 0x25	; 37
    2dfc:	b4 f4       	brge	.+44     	; 0x2e2a <itoa+0x3a>
    2dfe:	4a 30       	cpi	r20, 0x0A	; 10
    2e00:	29 f4       	brne	.+10     	; 0x2e0c <itoa+0x1c>
    2e02:	97 fb       	bst	r25, 7
    2e04:	1e f4       	brtc	.+6      	; 0x2e0c <itoa+0x1c>
    2e06:	90 95       	com	r25
    2e08:	81 95       	neg	r24
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	64 2f       	mov	r22, r20
    2e0e:	77 27       	eor	r23, r23
    2e10:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__udivmodhi4>
    2e14:	80 5d       	subi	r24, 0xD0	; 208
    2e16:	8a 33       	cpi	r24, 0x3A	; 58
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <itoa+0x2c>
    2e1a:	89 5d       	subi	r24, 0xD9	; 217
    2e1c:	81 93       	st	Z+, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	a1 f7       	brne	.-24     	; 0x2e0c <itoa+0x1c>
    2e24:	16 f4       	brtc	.+4      	; 0x2e2a <itoa+0x3a>
    2e26:	5d e2       	ldi	r21, 0x2D	; 45
    2e28:	51 93       	st	Z+, r21
    2e2a:	10 82       	st	Z, r1
    2e2c:	c9 01       	movw	r24, r18
    2e2e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <strrev>

00002e32 <strrev>:
    2e32:	dc 01       	movw	r26, r24
    2e34:	fc 01       	movw	r30, r24
    2e36:	67 2f       	mov	r22, r23
    2e38:	71 91       	ld	r23, Z+
    2e3a:	77 23       	and	r23, r23
    2e3c:	e1 f7       	brne	.-8      	; 0x2e36 <strrev+0x4>
    2e3e:	32 97       	sbiw	r30, 0x02	; 2
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <strrev+0x18>
    2e42:	7c 91       	ld	r23, X
    2e44:	6d 93       	st	X+, r22
    2e46:	70 83       	st	Z, r23
    2e48:	62 91       	ld	r22, -Z
    2e4a:	ae 17       	cp	r26, r30
    2e4c:	bf 07       	cpc	r27, r31
    2e4e:	c8 f3       	brcs	.-14     	; 0x2e42 <strrev+0x10>
    2e50:	08 95       	ret

00002e52 <_exit>:
    2e52:	f8 94       	cli

00002e54 <__stop_program>:
    2e54:	ff cf       	rjmp	.-2      	; 0x2e54 <__stop_program>
